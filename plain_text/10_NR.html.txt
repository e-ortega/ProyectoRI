   if (TNL_DEBUG) { ?   } ?                           QuiÃ©nes somos  Servicios y tarifas  Contacto  Registro   Navigation     Tek'n'life  Tecnologia y estilo de vida digital                Personal  Profesional  Social             Relacionado: Profesional TecnologÃ­a Big Data   ZOOM    GALERÃA    &npsp  &npsp  &npsp  &npsp    1   COMENTARIO      Te explicamos cÃ³mo funcionan las bases de datos utilizadas en Big Data y otras aplicaciones  MongoDB, Â¿son las bases de datos no relacionales el futuro?       Por AndrÃ©s PurriÃ±os |  28 Mayo, 2014   @andrespurrinos                   Si hay algo que ha permanecido prÃ¡cticamente inmutable en tecnologÃ­a, eso son las bases de datos. El modelo relacional, con mÃ¡s de 40 aÃ±os a sus espaldas, sigue vigente en nuestros dÃ­as y es la base de la mayorÃ­a de aplicaciones que acceden a una base de datos.  Sin embargo, no es el Ãºnico modelo existente, ni el Ãºnico en uso. En los Ãºltimos tiempos han cobrado importancia las bases de datos que no cumplen con los principios expresados por Codd en 1970.  Se trata de las bases de datos no relacionales, tambiÃ©n conocidas como NoSQL , por no utilizar el lenguaje SQL casi universal en las bases de datos convencionales. Â¿Se trata de una moda? Â¿EstÃ¡n muertas las bases de datos relacionales? En este reportaje te explicamos en quÃ© consisten esas bases de datos y quÃ© ventajas te pueden aportar.  Â¿Recuerdas cÃ³mo funciona una base de datos?  Las bases de datos relacionales organizan la informaciÃ³n en tablas. Cada tabla tiene un nÃºmero de columnas o campos, determinados por el administrador, y filas que contienen los datos.  Una tabla de una base de datos relacional tiene una estructura semejante a la de una hoja de cÃ¡lculo  AdemÃ¡s, estas tablas pueden relacionarse entre sÃ­, de manera que mediante consultas que combinan varias tablas (denominadas JOIN) , se puede obtener informaciÃ³n de varias de ellas. Estas relaciones pueden ser de un elemento de una tabla a un elemento de otra, de uno a varios o de varios a varios.  El modelo relacional Para mantener la integridad entre las distintas tablas que componen la base de datos se utilizan las relaciones. En este ejemplo, la tabla Empleados mantiene una relaciÃ³n con las tablas NÃ³minas y Vacaciones. La integridad referencial impide que se den de alta nÃ³minas o periodos vacacionales de empleados inexistentes. Esto, unido a un lenguaje que permite obtener la informaciÃ³n de forma sencilla, asÃ­ como interactuar con ella dando de alta nuevos registros, modificando los ya existentes, etc., hace del modelo relacional perfecto para la mayorÃ­a de aplicaciones por varios motivos. El primero es que organiza la informaciÃ³n de forma muy clara: cada fila (tupla) de la tabla Empleados contendrÃ¡ la informaciÃ³n de un empleado, mientras que la tabla NÃ³minas contendrÃ¡ una nÃ³mina. AdemÃ¡s, estas bases de datos estÃ¡n diseÃ±adas para mantener la integridad de las relaciones: no puede haber una nÃ³mina para un empleado inexistente, asÃ­ como parece lÃ³gico pensar que en la tabla NÃ³minas no se permitirÃ¡ que haya varias filas con el mismo cÃ³digo de empleado para el mismo mes. Pero no todo son ventajas Este modelo parece perfecto, o casi. Permite crear desde bases de datos muy sencillas hasta las mÃ¡s complejas, garantiza la integridad de los datos y dispone de un lenguaje sencillo y que casi cualquier programador conoce bien. El principal problema de este modelo es que todo esto es costoso en tÃ©rminos de rendimiento . No es que las bases de datos relacionales sean terriblemente lentas pero cada operaciÃ³n tiene un coste de tiempo elevado, precisamente, por todas esas garantÃ­as sobre los datos y las transacciones. AdemÃ¡s, las estructuras que se crean estÃ¡n diseÃ±adas para modificarse poco. Si necesitamos aÃ±adir un nuevo dato a algunos de nuestros empleados, la tabla Empleado necesitarÃ¡ una nueva columna. Todos los empleados existentes tendrÃ¡n ese nuevo campo, lo necesiten o no. Esto puede hacer que una base de datos cuya estructura necesite ser modificada periÃ³dicamente crezca a lo ancho, aumentando la necesidad de almacenamiento y los tiempos de proceso. La aproximaciÃ³n no relacional Supongamos que prescindimos de una estructura tan bien pensada. Renunciamos a unas tablas perfectamente definidas, que garantizan la integridad y en las que todo parece ser perfectamente predecible . A cambio, obtenemos rapidez y flexibilidad. Desde el punto de vista de nuestra base de datos de empleados y nÃ³minas parece que lo que ganamos en velocidad no compensa. Una aplicaciÃ³n para gestionar este tipo de informaciÃ³n, incluso en una compaÃ±Ã­a con muchos empleados, no suele tener tanta interacciÃ³n con la base de datos como para que la velocidad llegue a suponer un problema si tanto la aplicaciÃ³n como la base de datos estÃ¡n bien diseÃ±adas. AdemÃ¡s, en el caso de los empleados es muy Ãºtil que la integridad de los datos estÃ© garantizada. De este modo evitamos que se emitan nÃ³minas a un empleado que ha dejado la compaÃ±Ã­a, o que alguien cobre varias veces. Donde empieza a resultar interesante utilizar bases de datos NoSQL es en casos en los que la cantidad de informaciÃ³n es muy grande. Aplicaciones cientÃ­ficas, las transacciones de un gran banco o incluso sistemas de analÃ­tica web en tiempo real.Â En estos casos, la cantidad de informaciÃ³n es tanta que las aproximaciones mediante bases de datos relacionales obligan a dedicar muchos esfuerzos a la optimizaciÃ³n para obtener un resultado aceptable. Â¿CÃ³mo se diseÃ±a un modelo no relacional? Las bases de datos basadas en SQL son parte de las habilidades bÃ¡sicas de la mayorÃ­a de programadores. Incluso los especializados en Ã¡reas bien alejadas de las aplicaciones de gestiÃ³n conocen los principios bÃ¡sicos y son capaces de utilizar el lenguaje SQL en caso de necesidad. Esto hace que la forma de diseÃ±ar estas bases de datos pueda resultar un impedimento: las bases no relacionales exigen pensar de otra forma desde el principio. Por ejemplo en MongoDB (la base de datos mÃ¡s utilizada), nuestras tablas Empleados y Vacaciones, podrÃ­an quedar asÃ­: Shell de MongoDB mostrando la entrada de un empleado, la lista de periodos de vacaciones estÃ¡ embebida en esta. Esto tiene algunas consecuencias. La primera es que toda la informaciÃ³n relacionada estÃ¡ almacenada en el mismo sitio. A la hora de acceder a los datos de un empleado podremos leer toda la informaciÃ³n, vacaciones incluidas, en una sola operaciÃ³n de forma muy rÃ¡pida. FÃ­jate tambiÃ©n que aquellos campos que no tenÃ­an informaciÃ³n en el modelo relacional aquÃ­, simplemente, no existen. No ocupan espacio en disco y no consumen memoria al hacer una consulta, algo que facilita que el tiempo necesario para las consultas se reduzca. La consecuencia indeseada puede llegar cuando hacemos lo mismo con las nÃ³minas. Si el administrador de la empresa quiera obtener un listado con todas las nÃ³minas del mes de junio. En ese caso, habrÃ¡ que recorrer uno por uno los empleados en busca de las nÃ³minas adecuadas. Dado que, en este caso, puede ser incÃ³modo utilizar un Ãºnico documento, MongoDB proporciona tambiÃ©n referencias a otros documentos. El de las nÃ³minas podrÃ­a ser una buena aplicaciÃ³n de esta caracterÃ­stica pero… Â¡los mÃ¡s puristas te dirÃ¡n que aquÃ­ tambiÃ©n puedes evitar usarla! El lenguaje de MongoDB Recuperar informaciÃ³n de la base de datos es muy diferente en este modelo respecto a las bases de datos relacionales y el lenguaje SQL. Consulta en SQL SELECT * FROM EMPLEADOS,NOMINAS,VACACIONES WHERE EMPLEADOS.ID_EMPLEADO = NOMINAS.ID_EMPLEADO AND EMPLEADOS.ID_EMPLEADO = VACACIONES.ID_EMPLEADO AND EMPLEADOS.APELLIDOS = "FERNÃNDEZ GARCÃA" Consulta en MongoDB db.empleados.find( { apellidos: 'FERNÃNDEZ GARCÃA' } ) En el primer ejemplo, hemos seleccionado toda la informaciÃ³n de las tres tablas, para lo que hemos tenido que indicar las relaciones (JOIN) entre ellas, asÃ­ como especificar una condiciÃ³n sobre la columna por el que queremos filtrar la consulta. En el segundo caso, sÃ³lo tenemos que especificar la condiciÃ³n por la que queremos buscar. La informaciÃ³n relativa a las vacaciones estÃ¡ en el mismo documento y la que hemos llevado a otro, las nÃ³minas, son accesibles desde los resultados de forma automÃ¡tica. Supongamos ahora que necesitamos aÃ±adir las vacaciones de un empleado. En la base relacional deberemos de dar de alta una entrada en la tabla Vacaciones, mientras que en MongoDB bastarÃ¡ con actualizar la entrada del empleado en cuestiÃ³n: InserciÃ³n en SQL INSERT INTO VACACIONES (ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) SELECT ID_EMPLEADOS, '20/07/2014' AS FECHA_INICIO, '31/07/2014' AS FECHA_FIN FROM EMPLEADOS WHERE APELLIDOS = "FERNÃNDEZ GARCÃA", ActualizaciÃ³n en MongoDB db.empleados.update( { apellidos: "FERNÃNDEZ GARCÃA" }, { $push: { vacaciones: { "fecha_inicio": "20/07/2014", "fecha_fin": "31/07/2014" } } } )  En el primer caso, es necesario hacer una consulta para localizar el identificador del empleado por sus apellidos, para insertar una nueva fila en la tabla Vacaciones. Para hacer todo en una sola operaciÃ³n utilizamos un pequeÃ±o truco, introducir como cadenas los valores que no salen de la tabla de empleados. E n MongoDB se utilizan dos parÃ¡metros, el primero para especificar la condiciÃ³n de bÃºsqueda y el segundo para indicar los cambios a realizar en el empleado. La orden $push indica que se debe incorporar la informaciÃ³n a un array. Como ves, la forma de interactuar con la base de datos es mÃ¡s sencilla que en SQL, un lenguaje cuyas primeras versiones son de 1974 y que estÃ¡ basado en comandos de texto. El modelo de MongoDB utiliza sintaxis propia de la programaciÃ³n orientada a objetos (el lenguaje usado es JavaScript) y dispone de librerÃ­as para trabajar con la base de datos en los lenguajes mÃ¡s utilizados. Por supuesto, hay capas de abstracciÃ³n que permiten trabajar con bases de datos relacionales de forma mÃ¡s intuitiva que las viejas, pero potentes, instrucciones SQL. AÃºn asÃ­ no se mejora el rendimiento (es posible que incluso salga penalizado) y hay que desarrollar mÃ¡s cÃ³digo para poder utilizarlas. Tipos de bases no relacionales Aunque MongoDB es la mÃ¡s conocida, no es la Ãºnica base de datos no relacional que existe. De hecho, hay muchos tipos de base de datos no relacionales. Existen bases de datos documentales, en grafo, clave/valor, multivalor… cada una de ellas tiene su punto fuerte y algunas encajan en varias de estas definiciones. MongoDB, la mÃ¡s popular, se considera tanto una base de datos documental como clave/valor, ya que estÃ¡ basada en documentos y los datos se almacenan como pares de claves con un valor asignado.Â Una ventaja de la diversidad de opciones existente es que se pueden combinar varios sistemas de bases de datos, incluyendo las relacionales, aprovechando los puntos fuertes de cada uno en los puntos en los que es necesario. AdemÃ¡s, en muchas ocasiones se combinan estas arquitecturas complicadas con los sistemas de bases de datos en memoria. Se trata de bases de datos que no almacenan informaciÃ³n en disco, de modo que son muy rÃ¡pidas aunque, por supuesto, es muy costoso y tiene grandes limitaciones. Un ejemplo de este tipo de arquitecturas es Twitter, que incluso ha aportado sus propios desarrollos sobre el modelo y combina varios de estos modelos para optimizar el acceso de millones de usuarios a los millones de tweets que se publican cada dÃ­a, bÃºsquedas, calculo de los trending topics en tiempo real, etc. Entrevista con Luis Mesas, ingeniero de Intelygenz Luis Mesas, Intelygenz Luis Mesas es ingeniero en Intelygenz y trabaja como Innovation Architect. EstÃ¡ involucrado en diversos proyectos en los que el uso de las bases de datos no relacionales es clave para ofrecer una ventaja competitiva a sus clientes. TNL: Â¿CuÃ¡les son las diferencias entre una base de datos relacional y otra no relacional como MongoDB? La diferencia principal es cÃ³mo almacena la informaciÃ³n cada una de ellas. Una base de datos relacional es como una hoja de Excel. Tienes unas columnas definidas y todos los objetos que crean tienen todos los datos de esas columnas. En una no relacional el objeto es polimÃ³rfico, puede tener los atributos que quieras para cada objeto. La ventaja principal la encuentras cuando trabajas con sistemas masivos. En una base de datos relacional, si tuvieses miles de millones de registros y aÃ±ades un campo nuevo ese campo se aÃ±ade a todos los registros ya existentes. En una polimÃ³rfica no, sÃ³lo se aÃ±aden los datos al objeto concreto. TNL: Eso implica que el programador tiene que llevarse parte de la lÃ³gica a una capa superior. Bastante de ella sÃ­. Cuando haces una bÃºsqueda en una base de datos, relacional o no, la haces contra un Ã­ndice. Tienes un Ã­ndice en memoria que relaciona, por ejemplo, los nombres de usuario con la posiciÃ³n en disco duro de cada objeto. A nivel de bÃºsqueda es muy parecido en ambos casos. Pero en una no relacional tÃº puedes tener arrays de datos. Por ejemplo, si tienes mÃ¡s de una direcciÃ³n postal, en una base de datos relacional tendrÃ­as una tabla de usuarios y otra de direcciones postales. Cuando haces una bÃºsqueda tienes que hacer un montÃ³n de consultas en paralelo. Primero buscas los usuarios y luego las direcciones que les corresponden en otra tabla. En una base como MongoDB tÃº le pides el usuario y te devuelve directamente al usuario con todas sus direcciones. Como el dato estÃ¡ prÃ³ximo en el disco, lo puedes leer entero en mucho menos tiempo . Los discos estÃ¡n optimizados para hacer lecturas secuenciales y pierden tiempo para hacer saltos. TNL: Al almacenarse toda la informaciÃ³n junta, Â¿desaparecen los JOINs propios de SQL? Efectivamente. Las versiones nuevas empiezan a tener algunas referencias entre objetos para convencer a las personas que han usado muchos aÃ±os bases de datos relacionales. Pero no es la funciÃ³n principal de estas bases de datos. Tienes que hacer menos consultas y los datos estÃ¡n mÃ¡s prÃ³ximos, asÃ­ que tienes una mejora de eficiencia porque sacas la informaciÃ³n del disco mucho mÃ¡s rÃ¡pido. Para una aplicaciÃ³n pequeÃ±a como un blog da igual quÃ© tipo de base de datos utilizas. Cuando la base de datos es muy grande empieza a tener mÃ¡s sentido irse a bases de datos no relacionales. TNL: Es decir, Â¿son bases ideales para hacer desarrollos sobre big data, cientÃ­ficas o estadÃ­sticas? Hay bases de datos tipo HDFS que optimizan todo en disco duro y te permiten leer y escribir en paralelo sobre la misma colecciÃ³n. Normalmente de una colecciÃ³n de datos cuando estÃ¡s escribiendo no puedes hacer otras escrituras, aunque sÃ­ puedes leer en paralelo. TNL: Otro de los sistemas que las bases relacionales utilizan son las transacciones. Â¿CÃ³mo se gestionan en MongoDB? No hay transaccionalidad, aunque en versiones futuras quieren meterlo. Lo delegan en el desarrollador, que tiene que implementarla mediante una mÃ¡quina de estados u otros sistemas. TNL: Â¿Esto no supone una limitaciÃ³n para algunas aplicaciones? Hay aplicaciones en las que la transaccionalidad es importante porque la informaciÃ³n estÃ¡ distribuida en varias tablas, de modo que hasta que no se termina de escribir en todas ellas no finaliza la transacciÃ³n. En una no relacional el modelo de cada objeto puede variar y si tienes toda la informaciÃ³n en el mismo objeto, por ejemplo, una cuenta bancaria que contenga todas las operaciones y el saldo. Es un caso crÃ­tico, estÃ¡s jugando con el dinero de la gente. En una relacional tienes una tabla con un contrato, otra de movimientos, y el saldo lo puedes tener en la primera. Escribes el movimiento en su tabla y luego modificas el saldo en el contrato. Todo eso lo haces en una transacciÃ³n. En una no relacional no necesitas la transacciÃ³n: tienes el objeto completo con los movimientos y el saldo, los actualizas en memoria y lo escribes en el disco en una sola operaciÃ³n . Puedes diseÃ±ar un modelo de datos que no te exija transaccionalidad. TNL: Â¿En quÃ© tipo de proyectos son una ventaja estas bases de datos? La principal ventaja es agilidad de desarrollo. En tu aplicaciÃ³n tienes objetos que son estructuras de datos y mÃ©todos que operan sobre ellos. En una relacional, tienes un mÃ©todo que busca en la base de datos y rellena la informaciÃ³n desde muchas tablas. Tienes que hacerlo tÃº, tienes que programar la clase para incluir esas relaciones. En una no relacional el modelo de datos estÃ¡ emparejado al modelo de objetos. Cuando cargas un objeto viene todo entero. Lo almacenas en las propiedades internas del objeto y ya lo tienes. Es mÃ¡s fÃ¡cil a la hora de programar y es mÃ¡s robusto porque es mÃ¡s difÃ­cil cometer errores. Te quitas la parte de datos, que es la parte mÃ¡s aburrida de la programaciÃ³n, y te puedes dedicar sÃ³lo a la funcionalidad de tu aplicaciÃ³n. El programador tiene la sensaciÃ³n de que su trabajo estÃ¡ mÃ¡s aprovechado. el modelo de datos estÃ¡ emparejado al modelo de objetos, Cuando cargas un objeto viene todo entero TNL: Se trata de un lenguaje muy simple, con principios de la programaciÃ³n orientada a objetos, Â¿recomendarÃ­as a un empezar a aprender bases de datos con MongoDB? Hay varios perfiles de personas que empiezan a programar. Uno muy tÃ­pico es la persona que quiere aprender a hacer pÃ¡ginas web y luego se engancha y se quiere dedicar a eso. Normalmente quien aprende a hacer pÃ¡ginas web aprende HTML, CSS y Javascript. MongoDB y algunas otras utilizan JavaScript. No tienen que aprender un lenguaje nuevo, sÃ³lo objetos y mÃ©todos nuevos para acceder a la informaciÃ³n. Es mÃ¡s natural para ese perfil. TNL: Â¿Y para los que hemos aprendido por el otro camino? Lo bueno es que se simplifica tu modelo de datos. En una aplicaciÃ³n pequeÃ±a acabas teniendo 7 u 8 tablas. En una no relacional la reducciÃ³n es mÃ¡xima. Tiendes a acumular toda la informaciÃ³n que sueles tener dispersa. La primera direcciÃ³n de acumulaciÃ³n son los arrays de informaciÃ³n. Cuando tienes mÃ¡s de un objeto y quieres permitir que sean infinitos normalmente te creas una tabla nueva y una relaciÃ³n. Por ejemplo, una lista de emails o direcciones relacionadas con un usuario.Â En una base de datos no relacional tienes ya el objeto usuario con el listado de direcciones y de emails. Si quieres aÃ±adir o eliminar lo haces sobre el mismo objeto. TNL: VenÃ­as de desarrollar bases de datos convencionales, Â¿cuesta mucho cambiar la forma de pensar? Cuesta bastantes iteraciones de pensamiento y leer mucho. Llevamos muchos aÃ±os utilizando las bases de datos relacionales , en las universidades estamos muy acostumbrados a utilizar Excel, una representaciÃ³n directa de una base de datos relacional. Es muy natural pensar de esta manera, nuestra vida estÃ¡ muy adaptada a ella: una carta con los movimientos bancarios son una tabla. Estamos entrenados para pensar de modo relacional. Como las no relacionales son polimÃ³rficas no hay elementos que en el mundo real te lo evoque. Es difÃ­cil explicar a la gente ese cambio. Los que llevan muchos aÃ±os en el mundo relacional tienen que enfrentarse al miedo al cambio , un programador tiene unos plazos y al no conocerlo no se arriesgan. Siempre estÃ¡s buscando el proyecto en el que puedas empezar. Tienes una estimaciÃ³n y tienes que cumplirla y si tienes mucha experiencia con la relacional ya sabes quÃ© esperar. Hasta que no empiezas a arriesgar usando la no relacional no conoces el ahorro de tiempo. En diseÃ±o se ahorra mucho tiempo porque el modelo de datos es mÃ¡s simple. En el desarrollo tambiÃ©n se ahorra tiempo, porque la capa de datos es mÃ¡s sencilla. Los que llevan muchos aÃ±os en el mundo relacional tienen que enfrentarse al miedo al cambio TNL: Un caso de Ã©xito, quizÃ¡ el mÃ¡s conocido, es el de Twitter. A lo que mÃ¡s ha contribuido es al proceso de big data en tiempo real con Twitter Storm. TambiÃ©n utilizan Hadoop para ofrecer la informaciÃ³n de millones de tweets en tiempo real. TNL: Â¿Y cuÃ¡l es la reacciÃ³n de las grandes compaÃ±Ã­as de bases de datos a este fenÃ³meno? EstÃ¡n adquiriendo compaÃ±Ã­as [mÃ¡s pequeÃ±as] de bases de datos no relacionales para aguantar el tirÃ³n. TambiÃ©n hacen pequeÃ±as modificaciones en sus bases relacionales y estÃ¡n desarrollando productos no relacionales para poder ofrecer ambos catÃ¡logos a sus clientes.Â Personalmente creo que los grandes actores de las relacionales juegan con ventaja. Los que han reconocido que hay que adaptarse van a mejorar su catÃ¡logo. Y pueden recomendar la mÃ¡s base de datos mÃ¡s apropiada para cada caso. El problema de compaÃ±Ã­as como Mongo es que estÃ¡n convencidas de que el modelo relacional estÃ¡ muerto y no van a desarrollarlo. El catÃ¡logo [de las grandes compaÃ±Ã­as] es mÃ¡s completo. TNL: Â¿UtilizÃ¡is otras bases de datos, ademÃ¡s de las relacionales y de MongoDB? Utilizamos bases clave-valor como Redis o Memcache. Tienes toda la informaciÃ³n en memoria, con lo cual es muy rÃ¡pida. Se utiliza sobre todo como cachÃ© de informaciÃ³n, pides el dato y lo guardas en esta base de datos para acelerar el acceso a determinados datos.Â Delegas la base de datos, relacional o no, a una mera persistencia en el tiempo. Si tengo que regenerar mi sistema porque se ha caÃ­do, obtienes la informaciÃ³n de otra base de datos y reconstruyes la memoria. Pero si tienes una consulta que se repite de forma desproporcionada al resto, la aÃ±ades a esa base de datos clave/valor y el acceso resulta muchÃ­simo mÃ¡s rÃ¡pido. Probar MongoDB Â¿Te interesan las bases de datos no relacionales? Puedes probar MongoDB en su propia web, mediante una demo/tutorial . AdemÃ¡s, pronto publicaremos un tutorial en el que te enseÃ±amos a crear una base de datos MongoDB y acceder a ella desde tu web.   Intelygenz MongoDB Te puede interesar Oracle incorpora las bases de datos en memoria by AndrÃ©s PurriÃ±os  MongoDB y Teradata se integrarÃ¡n mediante JSON by AndrÃ©s PurriÃ±os  Apple compra FoundationDB, desarrolladora de bases de datos by Celia Valdeolmillos  Teradata compra la consultora Think Big by AndrÃ©s PurriÃ±os  Las personas que gobiernan casi nunca entienden la tecnologÃ­a by AndrÃ©s PurriÃ±os  Larry Ellison deja de ser CEO de Oracle by Marcos Sagrado  Foursquare cobrarÃ¡ a algunas empresas por acceder a sus datos by Celia Valdeolmillos  Twitter compra Gnip, empresa de anÃ¡lisis de datos de redes sociales by Celia Valdeolmillos   One Response to MongoDB, Â¿son las bases de datos no relacionales el futuro?       alejandro  26 Agosto, 2017 at 0:47  #     soy demografo de Argentina.  me interesarÃ­a conversar sobre el uso de este tipo de bases para el manejo de datos censales. los censos, como casi todas las operaciones estadÃ­sticas vienen usando bases relacionales. por lo que estuve leyendo de Mongo, por ejemplo, que es poco hasta ahora, me parece interesante la opciÃ³n que presentan. lo que me interesarÃ­a conocer es, cuÃ¡les son los procesos que se realizan para obtener resultados del censo en formatos que se usan habitualmente, distribuciones de frecuencias, tabulados, indicadores, etc. me pueden orientar? gracias!   Responder        Deja un comentario Click here to cancel reply.   Comentario  Name (required)   Email (will not be published) (required)   Website       Current ye@r *      Leave this field empty                © TeknLife Servicios y ConsultorÃ­a SL 2017    Condiciones de uso  PolÃ­tica de privacidad  Contacto           Tek'n'Life usa cookies para mejorar la experiencia de usuario, si continÃºa navegando acepta las condiciones de uso. Aceptar 