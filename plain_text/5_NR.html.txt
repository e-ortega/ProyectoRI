Homepage Become a member Sign in Get started Homepage Eugenio Mendoza Blocked Unblock Follow Following Teacher, Web Developer, Writer and game lover. Sep 16, 2017 Â¿CÃ³mo saber si necesitas una Base de DatosÂ NoSQL? Foto por Martin Reisch enÂ Unsplash Si has pasado tiempo con Nodejs, estarÃ¡s familiarizado con MongoDB; y si lo tuyo es React Native, Kotlin o hasta Angular y Vue, seguramente ya trabajas con Firebase, o lo tienes en la cabeza para tu prÃ³xima app. Estas son tecnologÃ­as excelentes, con un Ãºnico inconveniente : lo que sucede cuando nuestra experiencia es en Bases de Datos Relacionales ( o â€œSQLâ€). Si eres como yo, y gateaste con tablas y queries y Primary Keys, es muy probable que esta manera de organizar los datos estÃ© arraigada con tu concepto mental de quÃ© es una base de datos. Una vez que les agarramos el truco, el evitar la redundancia, normalizar y demÃ¡s tareas relacionales, nos salen tan intuitivamente que nos espantamos al ver nuestros diagramas de cuando Ã©ramos principiantes. Pero cuando se trata de Bases de Datos No Relacionales ( o â€œNoSQLâ€), efectivamente somos principiantes de nuevo . Nada de lo que aprendimos sobre el modelo relacional es vÃ¡lido. Si venimos de un trasfondo â€œ100% relacionalâ€, nuestro primer instinto es tratar de adaptar lo que sabemos a este nuevo modelo, pero asÃ­ no solo nos perdemos de sus mejores virtudes, sino que podemos perjudicar el producto en el que trabajamos al elegir un modelo de datos incorrecto. Â¿Quieres saber cuÃ¡ndo hace falta NoSQL y cuando es mejor quedarse con una clÃ¡sica relacional ? En el resto de este post veremos quÃ© diferencias hay entre ambos modelos, y ejemplos prÃ¡cticos de cuando elegir uno sobre otro. (Usaremos â€œSQLâ€ para referirnos a las bases de datos relacionales, â€œNoSQLâ€ para las no relacionales, â€œBDâ€ para Base de Datos, y â€œentidadesâ€ para hablar de tablas, colecciones, diccionarios y demÃ¡s estructuras que estas bases de datos usan). 1. Integridad deÂ datos La integridad de datos es la garantÃ­a de que los datos almacenados mantendrÃ¡n su exactitud y consistencia a travÃ©s del tiempo. Tu cÃ³digo siempre deberÃ¡ servir mientras tÃº mismo no modifiques su estructura. SQL: Las tablas tienen estructuras rÃ­gidas, donde cada dato tiene un tipo definido, no podemos almacenar datos de otro tipo diferente, y no se vale mÃ¡s de un dato en un mismo campo. Puesto que todos los registros cumplen las mismas reglas, si tu cÃ³digo funciona con un solo registro, servirÃ¡ con todos los demÃ¡s . NoSQL: Hay varios tipos de base de datos NoSQL, pero en general, ninguna te exige que definas el tipo de datos que vas a almacenar. Un dÃ­a un campo puede ser un nÃºmero y al otro dÃ­a un String o Array o hasta un JSON. MÃ¡s que saber quÃ© es la data, NoSQL pone mayor prioridad en cÃ³mo acceder dicha data . Â¿QuÃ© significa esto? Que si necesitas que tus datos se mantengan exactos y consistentes a travÃ©s del tiempo, una base de datos SQL te lo garantiza . Esto es lo ideal en muchos sistemas intolerantes a las fallas, donde mientras menos aberturas dejes, mejor (por ejemplo la mayorÃ­a, quizÃ¡ totalidad, del software bancario y empresarial). AquÃ­ SQL te cuida las espaldas. Pero tambiÃ©n, que si tus estructuras de datos son propensas a cambiar, el SQL te puede perjudicar al imponer una estructura rÃ­gida (por ejemplo, si estas en las fases de prototipo o lanzamiento temprano de una app, donde los datos que guardas son mÃ¡s maleables). Mientras que aÃ±adir llaves nuevas a un documento NoSQL suele ser muy fÃ¡cil , modificar tablas SQL puede traer muchos inconvenientes si ya el sistema funciona con cierta estructura, y mÃ¡s aÃºn si hablamos de introducir cosas como llaves primarias. Conste, esto Ãºltimo no es necesariamente malo, pues te obliga a pensar dos veces antes de cambiar las estructuras de datos, ahorrando bugs y modificaciones innecesarias en toda la app. Foto por Negative Space enÂ Unsplash 2. Operaciones atÃ³micas Una operaciÃ³n atÃ³mica es cuando haces un cambio que afecta a mÃºltiples entidades de la base de datos al mismo tiempo . Esto suele acompaÃ±arse con el concepto de â€œtransaccionesâ€: decirle a la BD que, o cambian todas las tablas que queremos al mismo tiempo, o no cambia nada y la base de datos queda intacta (el famoso â€œrollbackâ€, todo o nada). SQL: Las bases de datos relacionales tienen atomicidad gracias a que sus tablas estÃ¡n conectadas y pueden â€œponerse de acuerdoâ€ para no aceptar cambios nuevos hasta que termine una transacciÃ³n. Si tu sistema posee operaciones donde necesitas cambiar datos de varias entidades al mismo tiempo, ya es una alerta roja para usar SQL, pues estÃ¡s reconociendo que hay relaciones entre los datos, y que Ã©stas son importantes. Si ademÃ¡s hablamos de operaciones delicadas (como procesar una factura, donde se suelen actualizar mÃ¡s cosas, por ejemplo el stock de un producto), es casi seguro que la atomicidad te salvarÃ¡ el pellejo de situaciones como que dos personas traten de pagar por el Ãºltimo de un producto al mismo tiempo. NoSQL: Datos no relacionales = no hay relaciones sobre las que hacer una transacciÃ³n atÃ³mica. Simplemente, cuando quieres hacer cambios en 5 entidades diferentes, de frente o detrÃ¡s de cÃ¡maras habrÃ¡ 5 llamadas diferentes a la base de datos una detrÃ¡s de otra. Como te podrÃ¡s imaginar, es posible que entre tantos viajes de la data, algÃºn otro cliente haga una solicitud a la base de datos que modifique lo mismo que tÃº y se produzca una â€œrace conditionâ€: 2 clientes queriendo tener una versiÃ³n diferente del mismo dato, y esto termina muy mal cuando hablamos de compras, reservaciones y cosas asÃ­. Â¿QuÃ© significa esto? NoSQL no cuenta con atomicidad, y Ã©sta es vital para ciertos sistemas . Â¿La desventaja? La atomicidad no es barata para la mÃ¡quina , consume capacidad de procesamiento y afecta el rendimiento de la base de datos, pues Ã©sta hace el trabajo sucio para garantizar que nadie mÃ¡s se entrometa en una transacciÃ³n. Â¿CuÃ¡ndo elegir NoSQL? La atomicidad no siempre es crucial. Comparado con una inconsistencia en un estado de cuenta bancaria, Â¿quÃ© tan crÃ­tico es si dos usuarios difieren en la cantidad de likes de un post? A veces la velocidad de respuesta es mÃ¡s importante que la consistencia de datos (muchas app mÃ³viles caen en esto), y aquÃ­ brilla NoSQL. 3. Escalabilidad O, Â¿quÃ© tanto podemos crecer con la base de datos? Este suele ser un punto controversial cuando hablamos de cantidad de registros que podemos almacenar antes que la BD empiece a dar problemas. Â¿La realidad? Depende totalmente de la base de datos especÃ­fica que usemos . Para empezar, cuando pensamos en escalabilidad es muy probable que realmente pensemos en escalabilidad vertical : aumentar el poder de una mÃ¡quina para que pueda aguantar una mayor cantidad de datos. Soluciones SQL como MySQL, Microsoft SQL Server y Postgre han probado su poder de escalar verticalmente a travÃ©s de los aÃ±os, pero NoSQL tambiÃ©n tiene sus jugadores como Hadoop o Riak que, en sus respectivos campos (Big Data y soluciones distribuidas) aguantan datos como una montaÃ±a aguantando gotas de lluvia. Â¿Entonces, donde hay mayor diferencia? En la escalabilidad horizontal , es decir, en cuÃ¡ntas mÃ¡quinas diferentes podemos dividir la BD para repartir la carga. SQL: La verdad es que la mayorÃ­a de soluciones SQL tienen buen soporte para escalar verticalmente. Pero cuando tratas de que la informaciÃ³n en tu base de datos se mantenga consistente para todos los usuarios, los problemas llegan al hablar de miles y millones de registros. Aun con una mÃ¡quina muy potente, puedes verte obligado a dividir tu base de datos entre diferentes procesadores y hasta servidores. Ahora, las bases de datos distribuidas SQL no son un concepto nuevo y compaÃ±Ã­as como Microsoft llevan aÃ±os trabajando en ello, pero no es algo barato (para el bolsillo ni para el procesamiento). Siempre hay cierto riesgo de presentar inconsistencias , pues la BD ahora debe revisar que todo este en orden a travÃ©s de diferentes mÃ¡quinas. NoSQL: Cuando no tienes la consistencia de datos como prioridad, distribuir y replicar tu base de datos en mÃºltiples mÃ¡quinas es trivial , y por eso se considera que el NoSQL es excelente para bases de datos necesitan escalar horizontalmente (por ejemplo, en Big Data, donde una sola mÃ¡quina se queda corta sumamente rÃ¡pido). Â¿QuÃ© significa esto? Las bases de datos relacionales ya vienen equipadas para crecer verticalmente, lo cual es mÃ¡s que suficiente para empresas pequeÃ±as a grandes, proyectos personales, blogs y demÃ¡sâ€¦ hasta cierto punto, y mientras tengas una buena mÃ¡quina con la capacidad requerida . NoSQL, por el contrario, la tiene mÃ¡s fÃ¡cil residiendo en muchas mÃ¡quinas menos potentes . Al empezar un nuevo proyecto, decidirte por distribuir la BD no es algo que se tome a la ligera, pues es uno de esos problemas que se te pueden presentar ya con productos exitosos y en expansiÃ³n. No te partas la cabeza si vas empezando: para cuando en serio tengas que considerar bases de datos distribuidas, serÃ¡s mÃ¡s que capaz de decidir quÃ© modelo es el apropiado para tu caso de uso especÃ­fico. Foto por Joe Neric enÂ Unsplash 4. Velocidad Esto es que tan rÃ¡pidas son las lecturas y escrituras a la BD. Una necesidad bÃ¡sica, pero tan importante que puede definir por sÃ­ sola con quÃ© modelo nos quedamos â€Šâ€”â€Šsolo piensa, que se resalta en las publicidades de servicios en la nube como la Realtime Database de Firebase? â€œ Sincroniza datos en milisegundos. â€ SQL: Las garantÃ­as que te dan las relaciones conllevan un precio. Esto es mÃ¡s evidente cuando empezamos a hacer consultas con â€œjoinsâ€ (que involucran mÃºltiples entidades) y de repente una bÃºsqueda puede tardar minutos y hasta horas debido a la gran cantidad de datos que estÃ¡ revisando. Es un problema que se suele aliviar con buen diseÃ±o de la BD, pero estÃ¡ ahÃ­ y te morderÃ¡ tarde o temprano. NoSQL: Mientras que un buen diseÃ±o en SQL sirve para amortiguar un golpe, en NoSQL determinarÃ¡ que tanto jugo le saques a la velocidad con que viene. Asumiendo que buscas tus datos de una sola entidad, las bases de datos no relacionales suelen contar con mecanismos de bÃºsqueda sumamente rÃ¡pida para conseguir un dato especÃ­fico entre millones. Â¿QuÃ© significa esto? Que si sabes cÃ³mo diseÃ±ar tu base de datos, es casi seguro que una NoSQL bien diseÃ±ada gane por mucho en velocidad a una SQL, haciÃ©ndolas sumamente atractivas para aplicaciones modernas donde los usuarios viven de su plan de datos, y donde si tu app no carga en un par de segundos ya piensan en desinstalar / volver a Google. Siempre puedes optimizar ambos modelos hasta obtener un rendimiento aceptable, pero en NoSQL puedes diseÃ±ar tu base de datos en funciÃ³n a las consultas que harÃ¡s , dÃ¡ndole una ventaja descomunal. Es aquÃ­ cuando entra en juego un factor que suele ser una barrera cuando vienes de SQL. Y esâ€¦ 5. Consistencia vs Redundancia Probablemente la diferencia mÃ¡s marcada entre ambos modelos, y donde mÃ¡s fÃ¡cil nos es dejarnos llevar por nuestros conocimientos de SQL. SQL : La consistencia de datos es asegurarse de que un Ãºnico dato este una Ãºnica vez en toda la base de datos ; y se suele lograr con el proceso de â€œNormalizaciÃ³nâ€ (reducir la cantidad de datos â€œrepetidosâ€ en la BD). Esto garantiza que por ejemplo, si buscas el nombre de alguien, el nombre que verÃ¡s es exactamente el mismo que podrÃ­an ver tu vecino o alguien en PekÃ­n, si estÃ¡n conectados a la misma base de datos. Igual de importante, significa que mientras vayas navegando en tu app, si 10 pantallas diferentes cargan un dato, las 10 veces serÃ¡ el mismo dato. NoSQL: La redundancia es repetir adrede los datos a conveniencia en varias partes de la BD (datos â€œde-normalizadosâ€). Por ejemplo, si almacenamos datos de una reservaciÃ³n hotelera, guardamos todos los datos de una persona en la entidad â€œPersonaâ€. Pero ademÃ¡s, guardamos una copia del nombre, telÃ©fono y demÃ¡s informaciÃ³n personal en cada â€œReservaciÃ³nâ€ y posiblemente en cada â€œFacturaâ€ de esta persona. Si cambian los datos de una persona en â€œPersonaâ€, no necesariamente se reflejarÃ¡ este cambio en las otras entidades (ya esto queda a mano y decisiÃ³n tuya); pero tambiÃ©n hace que al buscar facturas o reservaciones, no tenemos que dar vueltas extra para obtener los datos de la persona. Â¿QuÃ© significa esto? Algunas aplicaciones necesitan consistencia de datos, pero otras prefieren el incremento en velocidad . Recuerda que el espacio de almacenamiento es barato y solo se abarata mÃ¡s cada aÃ±o, pero el procesamiento y los datos mÃ³viles aÃºn son oro para los usuarios finales. TambiÃ©n, al diseÃ±ar bases de datos NoSQL, debes tener siempre en mente que la redundancia estÃ¡ de tu lado . Muchas veces nos quejamos al utilizar servicios como la Realtime Database de Firebase pues restringen nuestra capacidad para consultar diferentes colecciones (entidades) al mismo tiempo. En realidad, estÃ¡n diseÃ±ados asÃ­ para optimizar las consultas rÃ¡pida, y el problema mÃ¡s comÃºn es que no aprovechamos al mÃ¡ximo la redundancia para poner la informaciÃ³n que necesitamos en un Ãºnico lugar. Â¿Haces una app como YouTube y necesitas mostrar junto con cada video el nombre del usuario que lo subiÃ³? GuÃ¡rdalo en un campo de â€œAutorâ€ junto a la â€œidâ€ del dato completo. Â¿Quieres que se vea el Ãºltimo mensaje enviado en el â€œpreviewâ€ de una sala de chat? GuÃ¡rdalo como un campo entre la informaciÃ³n de la sala de chat y actualiza Ã©ste cada vez que se envÃ­e un mensaje nuevo (si sentiste una comezÃ³n al leer eso, es muy probable que sea tu â€œmodelista relacionalâ€ sufriendo por dentro). Usar la redundancia de datos a tu favor es quizÃ¡ lo mÃ¡s contra intuitivo para quienes venimos de un trasfondo relacional , pero piensa: que tan seguido suele cambiar una persona datos como su nombre de usuario o telÃ©fono? â€œMÃ¡s de una vezâ€, es posible, pero compara eso con cuantas veces al dÃ­a esperas que esta informaciÃ³n sea consultada por tu aplicaciÃ³n. De nuevo, hay aplicaciones donde simplemente no te puedes dar el lujo de perder la consistencia de datos (hola de nuevo, dinero). Pero si no es tu caso y prefieres el aumento de velocidad (muchas app mÃ³viles son buenas candidatas), piensa en cuÃ¡les datos necesitas mostrarle al usuario mÃ¡s frecuentemente y planea tus estructuras de datos y redundancias acordemente . Foto por Auskteez Tran enÂ Unsplash 6. Comodidad para el desarrollador Este serÃ¡ el Ãºltimo punto que tocaremos hoy, pero tambiÃ©n puede definir el â€œsÃ­ o noâ€ al momento de decidir. Con comodidad podemos referirnos a muchas cosas, asÃ­ que irÃ© directo al grano: SQL: La comunidad SQL lleva dÃ©cadas madurando , y esto se traduce no solo en mejores herramientas administrativas, sino en estÃ¡ndares mejores definidos, mayor documentaciÃ³n, y hasta comunidades mÃ¡s grandes de desarrolladores listos para ayudarte con tus problemas o unirse a tu equipo de trabajo. NoSQL: Lo pondrÃ© asÃ­, buena suerte consiguiendo herramientas administrativas como phpMyAdmin y de manera gratuita. AquÃ­ el punto fuerte es la conveniencia: factores como que los datos no necesiten tipos o que puedas aprovechar la redundancia, hacen mÃ¡s flexible el desarrollar con NoSQL. Si estÃ¡s prototipando, los cambios son mÃ¡s rÃ¡pidos y tienen menos consecuencias . Si sabes quÃ© quieres mostrar a tus usuarios, es fÃ¡cil diseÃ±ar bases de datos especializadas en servir exacta y rÃ¡pidamente la informaciÃ³n que quieres. Â¿QuÃ© significa esto? Que las base de datos NoSQL te suelen dar mÃ¡s libertad para experimentar y equivocarte , haciendo cambios a diestra y siniestraâ€¦ pero Ã©stas son necesidades que no tendrÃ¡s siempre. Cuando tienes un sistema mejor definido , te harÃ¡ falta contar con buenas herramientas administrativas o saber que hay mÃ¡s gente ahÃ­ afuera lista para apoyarte o unirse a tu equipo rÃ¡pidamente, y en esto SQL brilla . En resumen, se puede decir que NoSQL te da mÃ¡s facilidades como desarrollador y ventajas a corto plazo, mientras que los beneficios de SQL los sueles ver cuando va pasando el tiempo y te toca mantener el sistema. Palabras finales Como podrÃ¡s ver, SQL en general es mÃ¡s rÃ­gido y por ello puede darte garantÃ­as sobre tus datos, mientras que NoSQL te da mÃ¡s libertades y comodidades sacrificando estas mismas garantÃ­as. Si tÃº: Necesitas que tus datos se mantengan consistentes y tus transacciones atÃ³micas, disminuyendo los errores al mÃ¡ximo. Tienes datos relacionado s, y buscarÃ¡s muchos datos en base a estas relaciones. Necesitas poder introducir gente al equipo de trabajo rÃ¡pidamente. Prefieres algo ya probado y con abundantes herramientas y comunidades detrÃ¡s. EstÃ¡s pensando en una Base de Datos Relaciona l. Mientras que sÃ­: La velocidad de lectura y escritura es mÃ¡s importante que mantener la consistencia. No sabes cÃ³mo se verÃ¡ la estructura de tus datos al final, y probablemente cambie mucho . Te es mÃ¡s fÃ¡cil adquirir varias mÃ¡quinas modestas a traves del tiempo que invertir en una sola muy potente. Prefieres algo fÃ¡cil de usar como programador , que no te exige compromisos y te deje almacenar casi cualquier cosa donde quieras. NoSQL puede ser tu soluciÃ³n. Cada modelo es una herramienta, y como toda herramienta, son buenos para ciertas cosas y para otras no tanto. Un Ãºltimo factor que debes tomar en cuenta es que ambos modelos pueden coexistir en un mismo sistema : te sorprenderÃ­a cuÃ¡ntas aplicaciones dejan sus datos mÃ¡s consultados en un almacenamiento NoSQL (para que las consultas sean rÃ¡pidas), pero al momento de operaciones crÃ­ticas como procesar pagos, llaman a una BD relacional para asegurarse de que nadie salga herido. Esto lo podemos ver desde usar Redis como â€œcachÃ©â€ para tu app, hasta lo que podemos hacer combinando servicios en la nube como Firebase con un backend usando MySQL. Este es mi primer post en Medium; y se lo dedico a mis alumnos en la materia de â€œBase de Datosâ€ del diplomado de Webmaster en la Universidad Rafael Belloso ChacÃ­n. Espero haya resuelto sus dudas con respecto a las bases de datos NoSQL! Si hay suficiente interÃ©s de parte del pÃºblico, en el futuro vendrÃ¡n mÃ¡s posts sobre desarrollo web, bases de datos y demÃ¡s. PrÃ³ximamente podrÃ¡n ver casos de uso y consejos prÃ¡cticos para diseÃ±ar bases de datos NoSQL. Si te gustÃ³ este post y lo consideras Ãºtil, deja unos aplausos para ayudar a otras personas a conseguirlo tambiÃ©n (Â¡y para saber si valiÃ³ la pena!). Y tÃº, Â¿para quÃ© estas usando NoSQL actualmente? No dudes en dejar tus dudas y comentarios mÃ¡s abajo. Â¡Hasta la prÃ³xima! Fuentes: NoSQL vs SQL: Principales diferencias y cuÃ¡ndo elegir cada una de ellas El post estÃ¡ disponible tambiÃ©n enÂ : InglÃ©s Hoy en dÃ­a empieza a haber una tendencia alcista por la utilizaciÃ³n deâ€¦ blog.pandorafms.org SQL vs NoSQL Â¿CuÃ¡l debo usar? - Tech blog for developers | Facilcloud SQL es un sistema de gestiÃ³n de bases de datos relacional, multihilo y multiusuario con mÃ¡s de seis millones deâ€¦ www.facilcloud.com La integridad de datos (Data Integrity), una preocupaciÃ³n creciente Cada vez son mÃ¡s las observaciones, deficiencias, Warning Letters o alertas de importaciÃ³n reportadas durante lasâ€¦ www.fernandotazon.com.es NoSQL Database Sql Web Development Desarrollo Web Like what you read? Give Eugenio Mendoza a round of applause. From a quick cheer to a standing ovation, clap to show how much you enjoyed this story. 362 7 Blocked Unblock Follow Following Eugenio Mendoza Teacher, Web Developer, Writer and game lover. 362 Never miss a story from Eugenio Mendoza , when you sign up for Medium. Learn more Never miss a story from Eugenio Mendoza Blocked Unblock Follow Get updates