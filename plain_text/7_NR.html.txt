                     Forums PandoraFMS.com Community Wiki Library EspaÃ±ol English            main   Comunidad  Bases de datos NoSQL : GuÃ­a definitiva abril 20, 2017 — by Sara MartÃ­n — 11     ( 10 votes, average: 4,90 )  Cargandoâ€¦ El post estÃ¡ disponible tambiÃ©n en : InglÃ©s  No cabe duda de que la forma en que las aplicaciones web tratan los datos, ha cambiado de forma significativa durante la Ãºltima dÃ©cada. Cada vez se recopilan mÃ¡s datos y cada vez son mÃ¡s los usuarios que acceden a estos datos al mismo tiempo. Esto significa que la escalabilidad y el rendimiento se han convertido en autÃ©nticos retos para las bases de datos relacionales basadas en esquemas.  La evoluciÃ³n de NoSQL  El problema de la escalabilidad de SQL fue reconocido por empresas Web 2.0, con grandes necesidades de datos e infraestructura, como Google, Amazon y Facebook. Ellos solos tuvieron que buscar soluciones propias a este problema, con tecnologÃ­as como BigTable , DynamoDB , y Cassandra .  Este interÃ©s creciente dio lugar a una serie de sistemas de gestiÃ³n de base de datos NoSQL (DBMS), con un enfoque en el rendimiento, la fiabilidad y la coherencia. Se reutilizaron y mejoraron varias estructuras de indexaciÃ³n existentes con el propÃ³sito de mejorar la bÃºsqueda y el rendimiento de lectura.  En primer lugar, habÃ­a tipos de bases de datos NoSQL (de origen cerrado), desarrolladas por grandes empresas para satisfacer sus necesidades especÃ­ficas, como BigTable de Google, que se cree es el primer sistema NoSQL y DynamoDB de Amazon.  El Ã©xito de estos sistemas patentados, iniciÃ³ el desarrollo de varios sistemas de bases de datos de cÃ³digo abierto y de propietarios similiares siendo los mÃ¡s populares Hypertable, Cassandra, MongoDB, DynamoDB, HBase y Redis.  Â¿QuÃ© hace a NoSQL diferente?  Una diferencia clave entre las bases de datos de NoSQL y las bases de datos relacionales tradicionales, es el hecho de que NoSQL es una forma de almacenamiento no estructurado.   Esto significa que NoSQL no tiene una estructura de tabla fija como las que se encuentran en las bases de datos relacionales.  Ventajas y desventajas de las bases de datos NoSQL  Ventajas  Las bases de datos de NoSQL presentan muchas ventajas en comparaciÃ³n con las bases de datos tradicionales.   A diferencia de las bases de datos relacionales, las bases de datos NoSQL estÃ¡n basadas en key-value pairs  Algunos tipos de almacÃ©n de bases de datos NoSQL incluyen diferentes tipos de almacenes como por ejemplo el almacÃ©n de columnas, de documentos, de key value store, de grÃ¡ficos, de objetos, de XML y otros modos de almacÃ©n de datos.  Algunos tipos de almacÃ©n de bases de datos NoSQL incluyen almacenes de columnas, de documentos, de valores de claves, de grÃ¡ficos, de objetos, de XML y otros modos de almacÃ©n de datos.  PodrÃ­a decirse que las bases de datos NoSQL de cÃ³digo abierto tienen una implementaciÃ³n rentable. Ya que no requieren las tarifas de licencia y pueden ejecutarse en hardware de precio bajo.  Cuando trabajamos con bases de datos NoSQL, ya sean de cÃ³digo abierto o tengan un propietario, la expansiÃ³n es mÃ¡s fÃ¡cil y mÃ¡s barata que cuando se trabaja con bases de datos relacionales. Esto se debe a que se realiza un escalado horizontal y se distribuye la carga por todos los nodos. En lugar de realizarse una escala vertical, mÃ¡s tÃ­pica en los sistemas de bases de datos relacionales.   Desventajas  Por supuesto, las bases de datos NoSQL no son perfectas, y no siempre van a ser la elecciÃ³n ideal.   La mayorÃ­a de las bases de datos NoSQL no admiten funciones de fiabilidad, que son soportadas por sistemas de bases de datos relacionales. Estas caracterÃ­sticas de fiabilidad pueden resumirse en: â€œatomicidad, consistencia, aislamiento y durabilidad.â€ Esto tambiÃ©n significa que las bases de datos NoSQL, que no soportan esas caracterÃ­sticas, ofrecen consistencia para el rendimiento y la escalabilidad.  Con el fin de apoyar las caracterÃ­sticas de fiabilidad y coherencia, los desarrolladores deben implementar su propio cÃ³digo, lo que agrega mÃ¡s complejidad al sistema.  Esto podrÃ­a limitar el nÃºmero de aplicaciones en las que podemos confiar para realizar transacciones seguras y confiables, como por ejemplo los sistemas bancarios.  Otras formas de complejidad encontradas en la mayorÃ­a de las bases de datos NoSQL, incluyen la incompatibilidad con consultas SQL. Esto significa que se necesita un lenguaje de consulta manual, haciendo los procesos mucho mÃ¡s lentos y complejos.   NoSQL vs. Bases de datos relacionales  Esta tabla ofrece una breve comparaciÃ³n entre las funcionalidades de NoSQL y las bases de datos relacionales:   Cabe seÃ±alar que esta tabla muestra una comparaciÃ³n a nivel de la base de datos, no sobre los diversos sistemas de gestiÃ³n de bases de datos que implementan ambos modelos. Estos sistemas proporcionan sus propias tÃ©cnicas patentadas para superar los problemas y deficiencias encontradas en el sistema, ademÃ¡s de intentar mejorar significativamente el rendimiento y la fiabilidad.  Tipos de almacenamiento de datos NoSQL  Key Value Store  En el tipo de almacÃ©n Key Value, se utiliza una tabla hash en la que una clave Ãºnica apunta a un elemento.  Las claves pueden ser organizadas por grupos clave lÃ³gicos, requiriendo solamente estas claves para ser Ãºnicas dentro de su propio grupo. Esto permite tener claves idÃ©nticas en diferentes grupos lÃ³gicos. La siguiente tabla muestra un ejemplo de un almacÃ©n de valores clave, en el que la clave es el nombre de la ciudad y el valor es la direcciÃ³n de Ulster University en esa ciudad.   Algunas implementaciones del almacÃ©n de valores clave proporcionan mecanismos de almacenamiento en el cachÃ©, lo que mejora en gran medida su rendimiento.  Todo lo que se necesita para hacer frente a los elementos almacenados en la base de datos: es la clave. Los datos se almacenan en una forma de una cadena, JSON o BLOB (objeto grande binario).  Uno de los mayores defectos en esta forma de base de datos es la falta de consistencia a nivel de la base de datos. Esto puede ser aÃ±adido por los desarrolladores con su propio cÃ³digo, aunque esto suponga mÃ¡s esfuerzo y tiempo.  La base de datos NoSQL mÃ¡s famosa que se construye en un almacÃ©n de valores clave Key Value es DynamoDB de Amazon.  AlmacÃ©n de documentos  Los almacenes de documentos son similares a los almacenes de valores clave, porque no tienen un esquema y se basan en un modelo de valor clave. Ambos carecen de coherencia en el nivel de base de datos, lo que hace posible que las aplicaciones proporcionen mÃ¡s fiabilidad.  Las diferencias mÃ¡s significativas son:  – En el almacÃ©n de documentos, los valores (documentos) proporcionan codificaciÃ³n XML, JSON o BSON (JSON codificado binario) para los datos almacenados.  La aplicaciÃ³n de base de datos mÃ¡s popular, que se basa en un almacÃ©n de documentos es MongoDB.  Almacenamiento en columnas  Los datos se almacenan en columnas, en lugar de almacenarse en filas, (como se hace en la mayorÃ­a de los sistemas de gestiÃ³n de bases de datos relacionales).  Un almacÃ©n de columnas estÃ¡ compuesto por una o mÃ¡s familias de columnas que se agrupan de forma lÃ³gica en determinadas columnas en la base de datos. Una clave se utiliza para identificar y seÃ±alar a un nÃºmero de columnas en la base de datos. Cada columna contiene filas de nombres o tuplas, y valores, ordenados y separados por comas.  Los almacenes de columnas tienen acceso rÃ¡pido de lectura y escritura a los datos almacenados. En un almacÃ©n de columnas, las filas que corresponden a una sola columna se almacenan como una sola entrada de disco, lo cual facilita el acceso durante las operaciones de lectura y escritura.  Las bases de datos mÃ¡s populares que usan el almacÃ©n de columnas incluyen Google BigTable, HBase y Cassandra.  Base grÃ¡fica  En una grÃ¡fica de una base de datos NoSQL, se utiliza una â€œestructura de grÃ¡fica dirigidaâ€ para representar los datos. El grÃ¡fico estÃ¡ compuesto por bordes y nodos.  Formalmente, un grÃ¡fico, es una representaciÃ³n de un conjunto de objetos, donde algunos pares de objetos estÃ¡n conectados por enlaces. Los objetos interconectados estÃ¡n representados por abstracciones matemÃ¡ticas, llamadas vÃ©rtices, y los enlaces que conectan algunos pares de vÃ©rtices se llaman bordes. Un grÃ¡fico serÃ­a un tipo de representaciÃ³n de datos compuesto por un conjunto de vÃ©rtices y de bordes que conectan entre sÃ­, mostrando visualmente su relaciÃ³n matemÃ¡tica.   Esto ilustra la estructura de una base de datos de manera grÃ¡fica, donde se usan bordes y nodos para representar y almacenar los datos. Estos nodos estÃ¡n organizados entre sÃ­, y queda representado por los bordes entre los nodos. Tanto los nodos como las relaciones tienen propiedades definidas.  Las bases de datos de grÃ¡ficos, suelen utilizarse en aplicaciones de redes sociales. Estas permiten a los desarrolladores centrarse mÃ¡s en las relaciones entre los objetos que en los propios objetos. En este contexto, de hecho permiten un entorno escalable y fÃ¡cil de usar.  Actualmente, InfoGrid y InfiniteGraph son las bases de datos grÃ¡ficas mÃ¡s populares.  Sistemas de gestiÃ³n de Bases de datos NoSQL  Por una breve comparaciÃ³n de las bases de datos, la tabla siguiente, proporciona una breve comparaciÃ³n entre los diferentes sistemas de gestiÃ³n de bases de datos NoSQL.   MongoDB tiene un sistema flexible de almacenamiento de esquemas. Lo que significa que los objetos almacenados no tienen que tener la misma estructura o los mismos campos. MongoDB tambiÃ©n tiene algunas caracterÃ­sticas de optimizaciÃ³n, que distribuye las colecciones de datos, mejorando el rendimiento y consiguiendo un sistema mÃ¡s equilibrado.  Otros sistemas de base de datos NoSQL, como Apache CouchDB, tambiÃ©n se consideran bases de datos de tipo almacÃ©n de documentos. Por ello comparten muchas caracterÃ­sticas con MongoDB, a excepciÃ³n de que es posible acceder a la base de datos usando APIs RESTful.  REST es un estilo arquitectÃ³nico que consiste en un conjunto coordinado de restricciones arquitectÃ³nicas aplicadas a componentes, conectores y elementos de datos, todo esto dentro de la World Wide Web. EstÃ¡ basado en un protocolo de comunicaciones apilables, cliente-servidor, protocolo cacheable de comunicaciones, (por ejemplo, el protocolo HTTP).  Las aplicaciones RESTful utilizan peticiones HTTP para publicar, leer y eliminar datos.  En cuanto a bases de datos de bases de columnas, Hypertable es una base de datos NoSQL escrita en C ++ y basada en BigTable de Google. Hypertable soporta la distribuciÃ³n de almacenes de datos entre nodos para maximizar la escalabilidad, al igual que MongoDB y CouchDB.  Una de las bases de datos NoSQL mÃ¡s utilizadas es Cassandra , desarrollada por Facebook. Se trata de una base de datos de almacenes de columnas que incluye muchas caracterÃ­sticas dirigidas a la fiabilidad y tolerancia de fallos.  Cassandra  Cassandra es un sistema de gestiÃ³n de bases de datos desarrollado por Facebook, cuyo objetivo era crear un DBMS sin fallos y que proporcione la mÃ¡xima disponibilidad.  Cassandra es principalmente una base de datos de almacenes de columnas. Algunos estudios se refieren a Cassandra como un sistema hÃ­brido, inspirado en BigTable de Google, (base de datos de almacÃ©n de columnas), y en DynamoDB de Amazon, (base de datos de valor clave).  Esto se consigue proporcionando un sistema de valor clave. Pero las claves de Cassandra apuntan a un conjunto de familias de columnas, dependiendo del sistema de archivos distribuido â€œBigTableâ€ de Google y de las caracterÃ­sticas de disponibilidad de Dynamo (tabla hash distribuida).  Cassandra estÃ¡ diseÃ±ado para almacenar enormes cantidades de datos distribuidos a travÃ©s de diferentes nodos. Cassandra es un DBMS diseÃ±ado para manejar cantidades masivas de datos, repartidos entre muchos servidores, mientras que proporciona un servicio altamente disponible sin un solo punto de fallo, lo cual es esencial para un gran servicio como Facebook.  Las principales caracterÃ­sticas de Cassandra incluyen:   No hay ni un solo punto de fallo. Para que esto se consiga, Cassandra debe funcionar como un racimo de nodos. Eso no significa que los datos de cada clÃºster sean los mismos, sin embargo si debe serlo el software de gestiÃ³n. Cuando ocurre un fallo en uno de los nodos, los datos en ese nodo serÃ¡n inaccesibles. Sin embargo, otros nodos (y datos) seguirÃ¡n siendo accesibles.  Un Hashing distribuido es un esquema que proporciona la funcionalidad de tabla hash, de manera que la adiciÃ³n o supresiÃ³n de una ranura no cambia significativamente la asignaciÃ³n de claves a dichas ranuras. Esto proporciona la capacidad de distribuir la carga a los servidores o nodos segÃºn su capacidad y, a su vez, minimizar el tiempo de inactividad.  Interfaz de cliente relativamente fÃ¡cil de usar. Cassandra utiliza Apache Thrift para su interfaz de cliente. Apache Thrift ofrece un cliente RPC en varios idiomas, pero la mayorÃ­a de los desarrolladores prefieren alternativas de cÃ³digo abierto construidas sobre Apple Thrift, como Hector.  Otras caracterÃ­sticas de disponibilidad. Una de las caracterÃ­sticas de Cassandra es la replicaciÃ³n de datos. BÃ¡sicamente, refleja datos a otros nodos del clÃºster. La replicaciÃ³n puede ser aleatoria o especÃ­fica para maximizar la protecciÃ³n de datos, colocÃ¡ndola por ejemplo en un nodo en un centro de datos diferente. Otra caracterÃ­stica que se encuentra en Cassandra es la polÃ­tica de particiÃ³n. La directiva de particiÃ³n, decide en quÃ© nodo se va a colocar la clave. Esto tambiÃ©n puede ser aleatorio u ordenado. Al utilizar ambos tipos de polÃ­ticas de particiÃ³n, Cassandra puede lograr un equilibrio entre el equilibrio de carga y la optimizaciÃ³n del rendimiento de las consultas.  Consistencia. Funciones como la replicaciÃ³n, hacen que la consistencia sea un desafÃ­o. Esto se debe al hecho de que todos los nodos deben estar actualizados en cualquier punto en el tiempo con los valores mÃ¡s recientes. Sin embargo, Cassandra intenta mantener un equilibrio entre las acciones de replicaciÃ³n y las acciones de lectura/escritura proporcionando esta personalizaciÃ³n al desarrollador.  Acciones de lectura / escritura. El cliente envÃ­a una solicitud a un Ãºnico nodo de Cassandra. El nodo, de acuerdo con la polÃ­tica de replicaciÃ³n, almacena los datos en el clÃºster. Cada nodo realiza primero el cambio de datos en el registro de confirmaciÃ³n y, a continuaciÃ³n, actualiza la estructura de la tabla con el cambio, ambos realizados de forma sincrÃ³nica. La operaciÃ³n de lectura es tambiÃ©n muy similar, una peticiÃ³n de lectura se envÃ­a a un solo nodo y ese Ãºnico nodo es el que determina quÃ© nodo contiene los datos, de acuerdo con la polÃ­tica de particiÃ³n/ ubicaciÃ³n.   MongoDB  MongoDB es una base de datos libre de esquemas, orientada a documentos, escrita en C ++. La base de datos estÃ¡ basada en el almacÃ©n de documentos, lo que significa que almacena valores (denominados documentos) en forma de datos codificados.  La elecciÃ³n del formato codificado en MongoDB es JSON. Es muy potente, porque incluso si los datos estÃ¡n anidados dentro de los documentos JSON, seguirÃ¡ siendo consultable e indexable.  Las subsecciones que siguen, describen algunas de las caracterÃ­sticas clave disponibles en MongoDB.  Shards / Fragmentos  Sharding es la particiÃ³n y distribuciÃ³n de datos a travÃ©s de mÃºltiples mÃ¡quinas (nodos). Un fragmento, es una colecciÃ³n de nodos MongoDB. A diferencia que Cassandra, donde los nodos estaban simÃ©tricamente distribuidos. El uso de fragmentos tambiÃ©n implica la capacidad de escalar horizontalmente a travÃ©s de mÃºltiples nodos. En el caso de que haya una aplicaciÃ³n que utilice un Ãºnico servidor de base de datos, se puede convertir en clÃºster fragmentado, con muy pocos cambios en el cÃ³digo de la aplicaciÃ³n original, por la forma en que Sharding es ejecutada por MongoDB. Oftware estÃ¡ casi desacoplado de las API pÃºblicas.  Lenguaje de consulta Mongo  Como se mencionÃ³ anteriormente, MongoDB utiliza una API RESTful. Para recuperar ciertos documentos de una colecciÃ³n db, se crea un documento de consulta que contiene los campos que deben coincidir con los documentos deseados.  Acciones  En MongoDB, hay un grupo de servidores llamados enrutadores. Cada uno actÃºa como un servidor para uno o mÃ¡s clientes. Del mismo modo, el clÃºster contiene un grupo de servidores denominados servidores de configuraciÃ³n. Cada uno contiene una copia de los metadatos que indican quÃ© fragmento contiene quÃ© datos. Las acciones de lectura o escritura se envÃ­an desde los clientes a uno de los servidores de enrutador del clÃºster y son encaminadas automÃ¡ticamente por ese servidor, a los fragmentos adecuados que contienen los datos con la ayuda de los servidores de configuraciÃ³n.  Un fragmento en MongoDB similar a Cassandra es que ambos tienen un esquema de replicaciÃ³n de datos, que crea un conjunto de rÃ©plicas de cada fragmento que contiene exactamente los mismos datos.  Hay dos tipos de esquemas de rÃ©plica en MongoDB: Master-Slave replication y Replica-Set replication. Replica-Set proporciona mÃ¡s automatizaciÃ³n y mejor manejo para los fallos, mientras que Master-Slave suele requerir la intervenciÃ³n de un administrador. Independientemente del esquema de replicaciÃ³n, en cualquier punto de conjunto de rÃ©plicas, sÃ³lo un fragmento actÃºa como fragmento primario. Todos los fragmentos de rÃ©plica son fragmentos secundarios. Todas las operaciones de escritura y lectura pasan al fragmento primario y luego se distribuyen de forma uniforme, (si fuera necesario), a los otros fragmentos secundarios del conjunto.  En el grÃ¡fico de abajo, vemos la arquitectura de MongoDB explicada anteriormente, mostrando los servidores del enrutador en verde, los servidores de configuraciÃ³n en amarillo y los fragmentos que contienen los nodos MongoDB en azules.   Cabe seÃ±alar que el sharding (o compartir los datos entre fragmentos) en MongoDB es completamente automÃ¡tico, lo que reduce la tasa de fallos y hace MongoDB un sistema de gestiÃ³n de base de datos altamente escalable.  Estructuras de indexaciÃ³n para bases de datos NoSQL  La indexaciÃ³n es el proceso de asociar una clave con la ubicaciÃ³n de un registro de datos correspondiente en un DBMS. Hay muchas estructuras de datos de indizaciÃ³n utilizadas en las bases de datos NoSQL. Las siguientes secciones discutirÃ¡n brevemente algunos de los mÃ©todos mÃ¡s comunes; La indexaciÃ³n de los Ã¡rboles B, la indexaciÃ³n de los Ã¡rboles T y la indexaciÃ³n de los Ã¡rboles O2.  IndexaciÃ³n de Ã¡rboles B  El Ã¡rbol B es una de las estructuras de Ã­ndice mÃ¡s comunes en DBMS.  En los Ã¡rboles B, los nodos internos pueden tener un nÃºmero variable de nodos secundarios dentro de un rango predefinido.  Una diferencia importante de otras estructuras de Ã¡rbol, como AVL, es que el Ã¡rbol B permite que los nodos tengan un nÃºmero variable de nodos secundarios. Lo que va a significar menos equilibrio de Ã¡rbol y mÃ¡s espacio perdido.  El B + -Tree es una de las variantes mÃ¡s populares de B-Trees. El B + -Tree es una mejora sobre B-Tree que requiere todas las claves para residir en las hojas.  IndexaciÃ³n de Ã¡rboles T  La estructura de datos de un Ã¡rbol T fue diseÃ±ada combinando caracterÃ­sticas de AVL-Trees y B-Trees. (AVL-Ã¡rbol y B-Ã¡rbol).  Un Ã¡rbol AVL es un tipo de auto-equilibrio binario de Ã¡rboles de bÃºsqueda, mientras que un Ã¡rbol B es mÃ¡s desequilibrado, y cada nodo puede tener un nÃºmero diferente de hijos.  En un Ã¡rbol T, la estructura es muy similar a los Ã¡rboles B y AVL.  Cada nodo almacena mÃ¡s de una tupla {key-value, pointer}. AdemÃ¡s, la bÃºsqueda binaria se utiliza en combinaciÃ³n con los nodos de mÃºltiples tuplas para producir un mejor almacenamiento y rendimiento.  Un Ã¡rbol T tiene tres tipos de nodos: Un T-Node que tiene un hijo derecho e izquierdo, un nodo de hoja sin hijos, y un nodo de media hoja con un solo hijo.  Se cree que los Ã¡rboles T tienen un mejor rendimiento general que los Ã¡rboles AVL.  IndexaciÃ³n de Ã¡rboles O2  El Ã¡rbol O2 es bÃ¡sicamente una mejora sobre los Ã¡rboles Rojo-Negro (Red-Black), una forma de un Ã¡rbol Binary-Search, en el que los nodos hoja contienen el valor {key value, pointer}  El Ã¡rbol O2, se propuso para mejorar el rendimiento de los actuales mÃ©todos de indexaciÃ³n. Un Ã¡rbol de O2 de orden m (m â‰¥ 2), donde m es el grado mÃ­nimo del Ã¡rbol, satisface las siguientes propiedades:   Cada nodo es rojo o negro. Pero la raÃ­z es siempre negra.  Si un nodo es rojo, entonces sus dos hijos son negros.  Para cada nodo interno, todas las rutas simples desde el nodo hasta los nodos-hoja descendientes contienen el mismo nÃºmero de nodos negros. Cada nodo interno tiene un Ãºnico valor de clave.  Los nodos de hoja son bloques que tienen entre âŒˆm / 2âŒ‰ y m pares “key-value, record-pointer”.  Si un Ã¡rbol tiene un Ãºnico nodo, entonces debe ser una hoja, que es la raÃ­z del Ã¡rbol, y puede tener entre 1 a m elementos de datos clave.  Los nodos de hoja pueden ir hacia adelante y hacia atrÃ¡s.   AquÃ­ vemos una comparaciÃ³n directa de rendimiento entre Ã¡rboles:   El orden del T-Tree, B + -Tree y el O2-Tree utilizado fue m = 512.  El tiempo se registra para las operaciones de bÃºsqueda, inserciÃ³n y supresiÃ³n con relaciones de actualizaciÃ³n que varÃ­an entre 0% -100% para un Ã­ndice de 50M registros, con las operaciones que resultan en la adiciÃ³n de otros 50M registros al Ã­ndice.  EstÃ¡ claro que con una proporciÃ³n de actualizaciÃ³n de 0-10%, B-Tree y T-Tree tienen mejores resultados que O2-Tree. Sin embargo, con la proporciÃ³n de actualizaciÃ³n aumentado, el Ã­ndice de O2-Tree funciona significativamente mejor que otras estructuras de datos.  Â¿CuÃ¡l es el caso para NoSQL?  "Aunque las bases de datos relacionales ofrecen consistencia, no estÃ¡n optimizadas para un alto rendimiento en aplicaciones en las que se almacenan y procesan datos masivos con frecuencia".  Las bases de datos NoSQL ganaron mucha popularidad debido a su alto rendimiento, alta escalabilidad y facilidad de acceso. Sin embargo, todavÃ­a carecen de las caracterÃ­sticas que proporcionan consistencia y confiabilidad. Afortunadamente, una serie de DBMS NoSQL abordan estos retos ofreciendo nuevas caracterÃ­sticas para mejorar la escalabilidad y la fiabilidad.  No todos los sistemas de base de datos NoSQL funcionan mejor que las bases de datos relacionales. MongoDB y Cassandra tienen un rendimiento similar, y en muchos casos mejor, que en las bases de datos relacionales en operaciones de escritura y eliminaciÃ³n.  No hay correlaciÃ³n directa entre el tipo de almacenamiento y rendimiento de un DBMS NoSQL.  Las implementaciones de NoSQL experimentan cambios, por lo que el rendimiento puede variar. Por lo tanto, las mediciones de rendimiento a travÃ©s de tipos de base de datos en diferentes estudios, siempre deben actualizarse con las Ãºltimas versiones del software de la base de datos para que estos nÃºmeros sean exactos.  Aunque no podemos ofrecer un veredicto definitivo sobre su rendimiento, he aquÃ­ algunos puntos a tener en cuenta:   La indexaciÃ³n tradicional de Ã¡rbol B y Ã¡rbol T se utiliza comÃºnmente en bases de datos tradicionales.  Un estudio ofreciÃ³ mejoras mediante la combinaciÃ³n de las caracterÃ­sticas de mÃºltiples estructuras de indexaciÃ³n para llegar al Ãrbol-O2.  El Ãrbol-O2 superÃ³ a otras estructuras en la mayorÃ­a de las pruebas, especialmente con enormes conjuntos de datos y con altas proporciones de actualizaciÃ³n.  La estructura Ãrbol-B presentÃ³ el peor desempeÃ±o de todas las estructuras de indexaciÃ³n cubiertas en este artÃ­culo.   Se puede y se debe hacer mÃ¡s trabajo para mejorar la consistencia de los DBMSs NoSQL. La integraciÃ³n de ambos sistemas, NoSQL y bases de datos relacionales, es un Ã¡rea que deberÃ­a ser explorada.  NoSQL comercializa funciones de confiabilidad y consistencia para un rendimiento y proceso de escalabilidad extremo. Esto lo convierte en una soluciÃ³n especializada, ya que el nÃºmero de aplicaciones que pueden depender de las bases de datos NoSQL sigue siendo limitado. AsÃ­ aunque la especializaciÃ³n puede ser poco flexible, si queremos un trabajo especializado, rÃ¡pido y eficaz lo mÃ¡s indicado va a ser NoSQL.  Fuente: Toptal.Â https://www.toptal.com/database/the-definitive-guide-to-nosql-databases Autor original:Mohamad Altarade             11 comments        Edgar Vargas octubre 4, 2017 at 2:51 pm    Interesante artÃ­culo, sin embargo sÃ³lo hay que corregir la traducciÃ³n de graph al espaÃ±ol por grafo,  en este sentido lo que mencionas por base grÃ¡fica debe ser Base de datos orientada a grafos. El concepto de graph proviene de una de las ramas de MatemÃ¡tica llamada InvestigaciÃ³n Operativa    Reply           Carla Andres octubre 17, 2017 at 1:22 pm    Hola Edgar,  Muchas gracias por tu aportaciÃ³n    Reply             Fernando Aguilar febrero 14, 2018 at 9:18 pm    Al tener la parte del performance se tiene que las bd nosql tienen performance alto mientras que las sql se encuentran en bajo, no en medio… en bajo, serÃ­a correcto decir que el performance de una bd nosql es 3 veces mejor que las sql?.. Saludos    Reply           Carla Andres marzo 7, 2018 at 12:48 pm    Hola Fernando,  hay una diferencia en cuanto al rendimiento entre SQL y no SQL, habrÃ­a que hacer una comparaciÃ³n real en base a tiempos. SÃ­, es verdad que las BBDD no SQL son mÃ¡s rÃ¡pidas, pero tambiÃ©n tienen grandes desventajas, tal y como ves en el artÃ­culo. Supongo que todo es relativo a ojos del usuario. Muchas gracias!    Reply             tomas marzo 5, 2018 at 8:37 pm    Hola, queria hacer una pregunta, tengo un cliente que es una escuela y me pidio un sistema. es recomendable usar nosql?    Reply           AlucinadoMeHayo marzo 9, 2018 at 2:05 pm    Â¿Pero un sistema para quÃ©? Â¿Inventariado? Â¿Asistencia? Â¿GestiÃ³n presupuestaria?    Reply           Carla Andres marzo 9, 2018 at 4:16 pm    Hola TomÃ¡s,  Hola,  Depende un poco de cada casa concreto. Mira las ventajas e inconvenientes y elige la opciÃ³n mÃ¡s acorde a las necesidades de tu cliente. Si quieres velocidad antes que la seguridad usa NoSQL, de lo contrario, un sistema de base de datos relacional.  Espero haberte ayudado,  Muchas gracias!    Reply             Marcelo abril 13, 2018 at 11:43 am    Muy importante. Un almacÃ©n de columnas no es una base NoSql. Pero un modelo de agregaciÃ³n de columnas sÃ­ que lo es. En un almacÃ©n de columnas los datos se almacenan por columnas, mientras que en una base NoSql de columnas, los datos se organizan por filas y columnas. Hay diferencia, cuidado! Un saludo.    Reply           maria junio 12, 2018 at 12:51 pm    Hola Marcelo,  Muchas gracias por tu aportaciÃ³n.  Un saludo,    Reply             Segundo Pantoja mayo 22, 2018 at 4:21 am    Hola buenas noches tengo una duda me piden hacer un programa para manejar la base de datos de los trabajadores de una empresa y representarla como una hoja de vida cuando se consulte un trabajador cual base de datos me recomiendan usar    Reply           maria junio 14, 2018 at 11:00 am    Hola Segundo Pantoja,  Gracias por tu comentario. Respecto a tu duda, depende de tus necesidades: las bases de datos relacionales son mÃ¡s sencillas de gestionar pero no tienen una buena organizaciÃ³n, aunque son buenas para empezar en este mundillo (por ejemplo: MariaDB, MySQL, Oracle, etc.). Si quieres una estructuraciÃ³n mÃ¡s organizada del contenido, es mejor que utilices una base de datos NoSQL, como habrÃ¡s visto en el artÃ­culo, ya sabrÃ¡s sus ventajas e inconvenientes (por ejemplo: MongoDB, Cassandra, CouchDB).  Â¡Esperamos haberte servido de ayuda! Te recomendamos que te suscribas a la newsletter para estar al tanto de las novedades tanto de Pandora FMS como de otros contenidos del blog.  Un saludo,    Reply          Leave a Reply Cancel Reply   Your email address will not be published. Required fields are marked * Comment Name *   Email *   Website        Este sitio usa Akismet para reducir el spam. Aprende cÃ³mo se procesan los datos de tus comentarios .  Previous Post MonitorizaciÃ³n UX PWR: Nuevas funciones de Pandora FMS Next Post Topologia de red y monitorizaciÃ³n distribuida Recent Posts How to fight computer stress agosto 27, 2018 CÃ³mo luchar contra el estrÃ©s informÃ¡tico agosto 27, 2018 Whatâ€™s new in Pandora FMS 7.0 NG 726 agosto 24, 2018 Novedades Pandora FMS 7.0 NG 726 agosto 23, 2018 Several factors that can slow down your computer agosto 20, 2018 Algunas causas por las que un ordenador puede ir lento agosto 20, 2018 Is it possible to prevent software glitch? agosto 17, 2018 Search Newsletter Subscribe to our Pandora FMS newsletter. It will keep you informed about new releases, plugins, features and integrations. We won't ever give your email to anybody else!   Email * :       Please, read our Privacy Policy here .   Tags alternatives  antivirus  Apache Software Foundation  APIs  BAM  chat  chatops  ciberseguridad  cloud  communication  docker swarm  eHorus  EndPoint  funcionalidades  G Data Antivirus  integration  International Data Corporation  malware  mattermost  monitorizaciÃ³n  mysql  nagios  negocio  Open Networking Foundation  pandora  Pandora FMS  Pandora FMS  pandora fms @es  plugin  productivity  ransomware  remote control  remote management  rmm  SDN  slack  Software Defined Network (SDN) Market  SP  SP3  sql  TeamViewer  teamwork  varnish cache  VNC  WannaCry          Comunidad TecnologÃ­a Tutorial  Algunas causas por las que un ordenador puede ir lento agosto 20, 2018 — by Robin Izquierdo         Comunidad Geek  Compuserve y Fidonet. Â¿QuÃ© habÃ­a antes de Internet? agosto 13, 2018 — by Robin Izquierdo         Comunidad Enterprise Funcionalidades TecnologÃ­a  PandoraFMS como alternativa a IBMÂ® TivoliÂ® Netcool Â® agosto 10, 2018 — by Jimmy Olano         Comunidad Geek  Â¿CÃ³mo se lo monta Iron Man para monitorizar sus trajes? agosto 6, 2018 — by Dimas Pardo         Comunidad TecnologÃ­a  Beneficios de la monitorizaciÃ³n para una empresa de Soporte o una MSP julio 23, 2018 — by Robin Izquierdo         Comunidad  Internet history; from ARPANET to the future julio 16, 2018 — by Alberto Dominguez         Comunidad  10 "unwritten" technology laws julio 9, 2018 — by Alberto Dominguez         Comunidad TecnologÃ­a  Â¿Sabes lo quÃ© es la ACS? AquÃ­ una explicaciÃ³n en profundidad julio 4, 2018 — by Jimmy Olano         Comunidad  So what's the future of Internet 10 years from now? julio 2, 2018 — by Alberto Dominguez         Comunidad  18 interesting computing facts junio 29, 2018 — by Alberto Dominguez         Comunidad  How SDN change our vision on networks? junio 28, 2018 — by Alexander La rosa         Comunidad Redes TecnologÃ­a  Â¿CÃ³mo las redes definidas por Software cambian nuestra visiÃ³n sobre las redes? junio 28, 2018 — by Alexander La rosa                                        This website uses cookies to improve your experience. Accept  Read More      Shares                                                    