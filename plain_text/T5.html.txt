       Tenemos servicio premiun:  24x7   Nuestro horario (CET)  Lunes - Jueves 08:30 - 18:00  Viernes 08:00 - 15:00   DirecciÃ³n:  FECRON CONSULTING SERVICES S.L. Ronda de Poniente nÂº 8 28760 - Tres Cantos Madrid (EspaÃ±a)  Â¿Necesitas mÃ¡s informaciÃ³n?  info@fecron.com  administracion@fecron.com  Si quieres podemos hablar:  +34 91 806 25 20   Nuestra inspiraciÃ³n:   "El verdadero progreso es el que pone la tecnologÃ­a al alcance de todos."  --Henry Ford--  "Cualquier tecnologÃ­a suficientemente avanzada es indistinguible de la magia."  --Arthur Clarke--  "La tecnologÃ­a es sÃ³lo una herramienta. La gente usa las herramientas para mejorar sus vidas."  --Tom Clancy--              100% Professional. Quality every time +34 91 806 25 20 +34 91 804 45 80 (fax) info@fecron.com                  Fecron   Sobre nosotros  Calidad y Medio Ambiente  Trabaja con nosotros    Soluciones y Servicios   GestiÃ³n y consultorÃ­a  Traducciones  FormaciÃ³n  User Experience    Sectores  Clientes  Blog      Secondary Menu  SteveTool – Shop   Shopping Cart  SteveTool – Checkout  SteveTool – My Account                  Contactar                 0   Frameworks Front-End 2017 para grandes empresas    Publicado por  David TimÃ³n Morillo-Velarde   a las  mayo 5, 2017     CategorÃ­as   Desarrollo  Front-End    Etiquetas    angular framework front-end ionic                  Primera Parte. Ecosistema y Tendencias    Estos Ãºltimos aÃ±os estÃ¡n siendo muy interesantes por todas las novedades tecnolÃ³gicas que estÃ¡n apareciendo a disposiciÃ³n de los programadores, ya sea en la capa Front- End , en la capa Back-End , Sistemas o en DevOps .  Esquema conceptual Front-End y Back-End  CentrÃ¡ndonos en la capa Front-End, recientemente ha habido gran entusiasmo por los nuevos frameworks que se han ido consolidando o bien que se han ofrecido a la comunidad de programadores en versiÃ³n estable.  Me animo a escribir este artÃ­culo de opiniÃ³n (para gustos los colores, y actualmente existe Â gran variedad a nivel frameworks ) ya que muchos clientes nos preguntÃ¡is muy interesados acerca de estos temas: hoy esta es mi postura, maÃ±ana, viendo la rÃ¡pida evoluciÃ³n de la tecnologÃ­a podrÃ­a ser otra ( Web Assembly  is coming!!) .  Si tras leer este artÃ­culo seguÃ­s con dudas o no estÃ¡is seguros de las alternativas que tenÃ©is (bien porque tenÃ©is incorporada ya una determinada tecnologÃ­a o por cualquier otro motivo), no dudÃ©is en contactar con nosotros y os ayudaremos a encontrar la mejor soluciÃ³n para vuestras necesidades.    En busca del Rayo Verde   El Rayo Verde es un fenÃ³meno Ã³ptico atmosfÃ©rico que ocurre poco despuÃ©s de la puesta del sol o poco antes de su salida, en el que se puede ver un punto verde, normalmente durante uno o dos segundos, sobre la posiciÃ³n del sol.   En la novela de Julio Verne â€œEl Rayo Verdeâ€ cuenta la leyenda que dos personas que vean este fenÃ³meno a la vez quedarÃ¡n automÃ¡ticamente enamoradas la una de la otra: es un momento mÃ¡gico en el que dos descubren el amor a la vez. Yo descubrÃ­ esta curiosidad viendo la pelÃ­cula homÃ³nima de Eric Rhomer y me encanta esta leyenda ya que se podrÃ­a interpretar como que para que surja el amor es necesario que confluyan tanto el instante en el que mires, como la persona con quien lo mires: quizÃ¡s un artÃ­culo pudiera considerarse como un Rayo Verde en el que un cliente, al leerlo en un determinado instante y con un determinado proveedor, pudiera enamorarse de un determinado frameworkâ€¦<3  La presentaciÃ³n de ES2015 / ES6 (y ES7) y la normalizaciÃ³n del uso de transpiladores ( Babel , Typescript o el fallido Dart ) han contribuido a la eclosiÃ³n de algunos frameworks, ya que nos permite normalizar nuestros proyectos y/o prepararlos para las nuevas funcionalidades que ofrecerÃ¡ Javascript en sus versiones mÃ¡s modernas.     Â Â  ( Â¿fallido Dart? ver anuncio de google sobre Fuchsia OS )     Vamos a suponer que, en un contexto empresarial , necesitamos estandarizar de algÃºn modo nuestros desarrollos, por lo que es imprescindible que hagamos uso de frameworks (espero que como lector te parezca bien esta premisa); sin embargo, muchos nos preguntamos cuando iniciamos un proyecto:     Â¿CuÃ¡l es el mejor framework a utilizar en Front-End?  Â¿CuÃ¡l es la madre de todos los frameworks?  Â¿QuÃ© framework me garantiza una larga vida?  Â¿QuÃ© framework me permitirÃ¡ lanzar nuevos servicios en tiempo record, garantizando un determinado rendimiento?  Â¿QuiÃ©n y cÃ³mo me podrÃ¡ desarrollar mejor la aplicaciÃ³n, adaptÃ¡ndose a lo que busco?     A excepciÃ³n de la Ãºltima pregunta cuya respuesta es Fecron Consulting Services Â (:-)), la respuesta al resto de cuestiones parece incierta. Lo que es seguro es que no hay un framework perfecto del mismo modo que no hay un vehÃ­culo perfecto que nos lleve a nuestro destino: todo dependerÃ¡ de nuestra necesidad. En mi pueblo hubo un chico que se comprÃ³ un deportivo para ir al campo a trabajar y la cosa no funcionÃ³ mucho tiempoâ€¦ los extremeÃ±os somos asÃ­â€¦ del mismo modo, tambiÃ©n puede haber un framework mejor que el resto para cubrir una necesidad concreta : tambiÃ©n hay extremeÃ±os que pensamos que hay herramientas especÃ­ficas, para necesidades especÃ­ficas… ðŸ™‚  Entonces, intentemos dar respuesta a la pregunta que realmente nos inquieta:     Â¿QuÃ© framework de Front-End nos conviene mÃ¡s utilizar?          Hay opiniones para todos los gustos: podemos encontrar tanto fuertes crÃ­ticas como grandes alabanzas sobre segÃºn quÃ© decisiones acerca de quÃ© framework es mejor para uno u otro caso. En ocasiones surge gran polÃ©mica interna a nivel de corporaciÃ³n en relaciÃ³n a indecisiones o decisiones precipitadas; no obstante, todas esas decisiones suelen estar marcadas por las necesidades de las empresas de sacar al mercado sus nuevos productos y servicios de la forma mÃ¡s Ã¡gil posible y en los plazos que marcan los equipos de direcciÃ³n. Este aspecto es uno de los que deberÃ­a regir principalmente en nuestra elecciÃ³n, ya sea planteada esta premisa a corto, medio Ã³ largo plazo; sin embargo, tambiÃ©n habrÃ­a que tener en cuenta otros aspectos, como luego expondremos.  Tomemos como ejemplo Polymer . Este framework se vendiÃ³ como una biblioteca de webcomponents que nos facilitarÃ­a lanzar nuevas aplicaciones sin mÃ¡s que incorporar dichos componentes a nuestra web, permitiÃ©ndonos mÃ¡xima reutilizaciÃ³n y ayudando a respetar nuestros Look & Fee l.  Desde la versiÃ³n 0.5, la fugaz 0.8, la primera versiÃ³n estable de Polymer 1.0, hasta la versiÃ³n 2.0 actual, se han ido incorporando y eliminado mejoras y conceptos nuevos incluidos en los RFCs ( custom elements , shadow-dom / shady-dom , imports, templates) que han convertido al framework en una novedad importante hasta el punto de que grandes empresas han normalizado incluso su uso de forma interna. Por un lado, la decisiÃ³n de adoptar Polymer en fases tempranas del proyecto podrÃ­a retrasar la salida de nuestras aplicaciones e incluso que se nos planteen dificultades a la hora de encontrar desarrolladores. Por otra parte, dominar una tecnologÃ­a desde su inicios ofrece una ventaja competitiva basada en la experiencia y desarrollo a largo plazo.     Â¿SerÃ¡ una buena decisiÃ³n para nuestra compaÃ±Ã­a el incorporar Polymer?  Â¿SerÃ¡ precipitada su elecciÃ³n como framework?     El tiempo y sobre todo, el uso que nosotros mismos hagamos de esa tecnologÃ­a nos lo dirÃ¡. De momento observamos un vacÃ­o a la hora de encontrar variedad de proyectos basados en Polymer , aunque sÃ­ hemos visto que su integraciÃ³n con Angular (nuevo framework basado en muchas ideas del ultra-conocido AngularJS 1.X ) es sencilla, a lo cual ayuda el que Google sea el promotor de ambos proyectos. QuizÃ¡s otro framework como Angular ayude a dar valor a Polymer y salve la inversiÃ³n de la elecciÃ³n de Polymer como referencia de framework empresarial (si es que lo podemos considerar como un autÃ©ntico framework ).  Angular , al igual que Polymer , ha sufrido bastantes variaciones desde su publicaciÃ³n inicial en estado beta en diciembre de 2015 hasta su versiÃ³n 4.1.0 actual (lanzada finales de abril de 2017); de hecho, ambas versiones (2 y 4) no son compatibles del todo y ha pasado casi aÃ±o y medio desde lo que parecÃ­a su inminente liberaciÃ³n (considerando su anuncio y fase alpha: casi dos aÃ±os).     Â¿Hubiera sido una buena elecciÃ³n abrazar Angular en diciembre de 2015?     Si los tiempos de negocio hubiesen establecido el lanzamiento de las aplicaciones a producciÃ³n en mayo o junio de 2017 la elecciÃ³n hubiera sido correcta, si los tiempos de la empresa hubiesen sido otros, esta decisiÃ³n habrÃ­a sido un fracaso rotundo debido al retraso y el coste de oportunidad. Sin embargo, una vez salvada la incertidumbre inicial, la empresa ahora dominarÃ­a la tecnologÃ­a y le serÃ­a mÃ¡s fÃ¡cil iniciar proyectos basados en dicha tecnologÃ­a. QuizÃ¡s si hubieras mirado a Angular en diciembre de 2015 buscando el Rayo Verde, quizÃ¡s habrÃ­as encontrado un tormenta de incertidumbres.  Otras polÃ©micas surgieron tambiÃ©n con el framework Angular ya que ha habido bastantes crÃ­ticas hacia Google al tratarse de algo totalmente nuevo e incorporar dicho nombre para denominar al nuevo framework.  Angular estÃ¡ escrito desde cero (inicialmente denominado Angular 2, actualmente en su versiÃ³n 4 y denominado simplemente Angular) y se ha adoptado un nuevo lenguaje transpilador como Typescript (inicialmente AtScript y Dart ) para su programaciÃ³n; no obstante, la estrategia final de Google, ademÃ¡s de innovadora, parece acertada: estÃ¡ evolucionando AngularJS 1.X hacia Angular en lo que parece un intento de convergencia en un sÃ³lo framework para facilitar la migraciÃ³n, de este modo si tenemos una aplicaciÃ³n escrita en AngularJS, podemos ir actualizando las nuevas innovaciones para finalmente dar el salto a Angular. Sin duda son de agradecer tambiÃ©n los esfuerzos de Google en permitir que haya aplicaciones escritas parcialmente en Angular y AngularJS 1.X . El problema de llevar a cabo esta estrategia es que actualmente, por restricciones de compatibilidad de ejecuciÃ³n, siempre serÃ¡ una aplicaciÃ³n AngularJS 1.X , lo cual excluye las verdaderas innovaciones de Angular.  Continuando con la incorporaciÃ³n de frameworks por el mercado, ha sido sorprendente lo rÃ¡pido que la apariciÃ³n o evoluciÃ³n de nuevos frameworks ( React , Angular , Vue ) ha llevado a otros que eran muy populares ( Ember , Backbone ) a un ostracismo preocupante para las empresas , hasta el punto de que algunos desarrolladores huyen de esos proyectos por encontrarse con cÃ³digo mal estructurado, abuso de malas prÃ¡cticas (las cuales aunque no son deseables, es prÃ¡cticamente inevitable que existan en todos los proyectos, ya sea por la impaciencia del cliente o debido a la rotaciÃ³n de personal) o por un escaso recorrido profesional.  Podemos corroborar lo comentado en el pÃ¡rrafo anterior con la informaciÃ³n sobre las bÃºsquedas en Google y los intereses de los desarrolladores que buscan empleo:    Fuente: Datos oficiales de Google  Fuente: Datos oficiales de Indeed  No obstante, cada framework va encontrando poco a poco su hueco , el espacio ocupado anteriormente por AngularJS 1.X lo va ocupando React , el famoso framework de Facebook; pero React es sÃ³lo una biblioteca, por lo que no estÃ¡ a la par con, digamos, Angular, AngularJS o Ember. Para hacer que React se acerque mÃ¡s a la arquitectura MVC, Facebook introdujo un enfoque para construir la arquitectura de aplicaciones y lo llamÃ³ Flux Â¿Ã©xito o fracaso? De momento apunta maneras y la guerra del desconsenso continÃºa.  Fuente: Datos oficiales de Indeed    Si has llegado hasta aquÃ­: Â¡estupendo, el tema te interesa y estÃ¡s en el lugar acertado!… ðŸ™‚  Como hemos visto hasta ahora hay muchos frameworks (sÃ³lo hemos mencionado algunos), pero si estÃ¡s de acuerdo conmigo en que cada framework puede tener su Ã¡mbito de uso, Â aplicaciÃ³n y contexto , sigue leyendo la segunda parte del artÃ­culo donde intentaremos mostrar quÃ© framework nos podrÃ­an ayudar para construir las aplicaciones que nuestra empresa necesita.    Segunda Parte. La elecciÃ³n mÃ¡s empresarial    No debemos perder el foco a la hora de seleccionar un determinado framework a nivel empresarial y es que lo que buscamos es sacar nuestros productos y servicios lo mÃ¡s rÃ¡pido posible, con un nivel de rendimiento mÃ­nimo requerido, con una determinada usabilidad y con cierta facilidad para el mantenimiento y evolucionado . Si somos un banco y queremos modificar el flujo del â€œenrollmentâ€ serÃ­a estupendo que se pudiera realizar en 24h sin despliegue: desde Fecron Consulting Services facilitamos a nuestros clientes el poder hacer Ã©sto a travÃ©s de una interfaz grÃ¡fica de usuario, lo que les permite liderar el mercado desde el Departamento de Negocio (si estÃ¡s interesado en una demo de la magia que hacemos, contacta con nuestro departamento comercial; si buscas rapidez y calidad somos tu equipo ).  Angular (desmarcÃ¡ndose en muchos aspectos de AngularJS 1.X) parece que estÃ¡ centrando sus esfuerzos en construir un framework orientado a grandes corporaciones debido a su adopciÃ³n de Typescript y a la transpilaciÃ³n desde un lenguaje pseudo-tipado. Aunque actualmente cualquier framework puede (y debe * / ** ) ser programado en Typescript , esta decisiÃ³n ha sido fundamental para enmarcarlo dentro de los frameworks ideales para proyectos a largo plazo que pueden recibir una alta rotaciÃ³n de personal ya que, esas malas prÃ¡cticas antes mencionadas, quedan mucho mÃ¡s acotadas en la estructuraciÃ³n del cÃ³digo tipado. AdemÃ¡s, la adopciÃ³n de Java por parte de muchas empresas y la similitud en muchos aspectos con Typescript, permite a los desarrolladores una curva de aprendizaje suave Â desde el perfil Back-End hacia el Front-End (y viceversa) formando, en algunos casos, equipos Scrum con perfiles Fullstack sin tener que conocer en detalle exhaustivo todo un ecosistema.  MÃ¡s informaciÃ³n en debate: Â¿QuÃ© es Typescript y cÃ³mo deberÃ­a usarlo?  * Todos los desarrolladores (incluso los gurÃºs superdotados que nos iluminan con sus nuevas ideas) en algÃºn momento de nuestra carrera profesional hemos generado cÃ³digo que dista del Clean Code : esto sucede principalmente en las primeras fases de nuestro aprendizaje, pero tambiÃ©n cuando estamos iniciÃ¡ndonos en una determinada tecnologÃ­a e incluso cuando estamos aprendiendo la estructura de un proyecto al que nos incorporamos. Muchas veces los desarrolladores somos controladores: eres desarrollador y, como tal, no te gusta usar un transpilador como Typescript ya que introduce un nuevo punto de fallo difÃ­cilmente trazable. Pero quizÃ¡s como desarrolladores opinamos teniendo en cuenta nuestro trabajo y no las circunstancias. Y la realidad es que en proyectos empresariales trabajamos en equipo y somos prescindibles y sustituibles, por lo que prima el orden , la coherencia , la buena estructuraciÃ³n del cÃ³digo, mejorar la mantenibilidad , la facilidad de evoluciÃ³n y muy importante, tambiÃ©n, que los nuevos miembros del equipo no tengan la sensaciÃ³n de incorporarse a un campo de minas: Typescript nos ayuda a todo esto y mucho.  **Â Otra ventaja de usar Typescript (que junto con Visual Studio Code son de las pocas cosas que me entusiasman de Microsoft) Â es que nos permite seleccionar sobre quÃ© versiÃ³n de Javascript Â (ES5, ES6, ES7, experimental y lo que venga) queremos transpilar nuestro cÃ³digo, por lo que podemos aprovechar todas las ventajas que vayan incorporando los navegadores soportados en el proyecto sin tocar apenas nuestro cÃ³digo, aspecto que a futuro nos evitarÃ¡ refactorizaciones y supondrÃ¡ un ahorro de costes importante.    La Ensalada Definitiva  Hace algunos aÃ±os cuando trabajaba para una gran multinacional espaÃ±ola de tecnologÃ­a, me â€œtocabaâ€ viajar mucho para dar soluciones de comunicaciones a grandes bancos. En uno de mi viajes a Andorra me di el capricho (me pagaban muy bien las dietas de desplazamiento al extranjero) y cenÃ© en un restaurante una ensalada que me entusiasmÃ³: tomÃ© nota de los ingredientes y posteriormente la he preparado en varias ocasiones, siempre con gran Ã©xito entre mis invitados. La llamÃ© â€œla ensalada definitivaâ€ (no la llamÃ© â€œla mejor ensalada del mundo mundialâ€): tenÃ­a los ingredientes justos y estaba especialmente buena (si tenÃ©is curiosidad sobre la receta podÃ©is contactar tambiÃ©nâ€¦ eso sÃ­, los ingredientes son gourmet ;-)) En mi opiniÃ³n parece que a Angular le va a ocurrir lo mismo que a mi ensalada favorita, creo que es el mejor posicionado para convertirse en el Framework Definitivo ya que tiene los ingredientes justos y es especialmente bueno.  Aunque con AngularJS 1.X ya era posible incorporar la funcionalidades de lazy load y cacheado en forma de cÃ³digo Javascript (con las templates, por ejemplo) a travÃ©s de ciertos servicios y herramientas ($templateCache, gulp, gulp-angular-template-cachÃ©, junto con gulp-inject, por ejemplo), ahora Angular lo facilita proporcionando â€œde cajaâ€ una importante mejorar en la carga de las aplicaciones que puede impresionar a mÃ¡s de uno.  AsÃ­, una aplicaciÃ³n de Angular consiste en una gran cantidad de componentes y sus respectivas templates en HTML. Antes de que el navegador pueda renderizar la aplicaciÃ³n, los componentes y las plantillas se deben convertir a cÃ³digo Javascript ejecutable. Este proceso lo realiza el propio compilador de Angular en tiempo real , el cual se carga en el navegador ( Just-in-Time ) o previamente en el despliegue , para posteriormente ser ejecutado desde su core en el navegador ( Ahead-of-Time ), es decir, de forma laxa:     En el caso de la compilaciÃ³n Just-in-Time de Angular, la template se recupera y se pasa por el compilador de Angular cargado en el navegador para generar cÃ³digo Javascript, de modo que es ejecutado por el core de Angular, tambiÃ©n descargado y ejecutado en el navegador.  En el caso de la pre-compilaciÃ³n Ahead-of-Time de Angular, se ofrece una herramienta en el angular-cli que permite pre-compilar la aplicaciÃ³n al cÃ³digo Javascript que necesita el core de Angular del navegador, por lo que de esta forma no es necesario pre-compilar a Javascript en el navegador. El cÃ³digo precompilado ocupa menos que el original (en el modo JIT) y ya no es necesario cargar en la aplicaciÃ³n el precompilador de Angular (que en bytes es aproximadamente el 50% de la biblioteca Angular) por lo que la aplicaciÃ³n se carga mÃ¡s rÃ¡pido (archivos mÃ¡s pequeÃ±os) y se ejecuta mÃ¡s rÃ¡pido (se evita el compilado de los componentes en el navegador). Puedes ver un resumen mÃ¡s extendido aquÃ­ sobre diferencias de rendimiento.     Pero ahÃ­ no queda todo, Angular es mÃ¡s que un framework de plataforma para el Front-End en el lado del cliente (bien pensado y con pocas improvisaciones) en sus versiones estables para producciÃ³n; parece mÃ¡s bien que es una idea que va mÃ¡s allÃ¡, intentando universalizar toda la arquitectura con Angular Universal .  Logo oficial de Angular Universal  El proyecto Angular Universal (se incorporÃ³ en www.angular.io, aquÃ­, la documentaciÃ³n del proyecto recientemente) consiste en una API de base y en las herramientas ofrecidas que permiten al desarrollador realizar renderizaciones en el lado del servidor (o pre-renderizado) de aplicaciones escritas en Angular. Esto serÃ­a un gran paso en su intento de universalizar Angular como tecnologÃ­a, tratando de desmonopolizar las aplicaciones de servidor donde Java y .NET mandan en el mundo corporativo .        Â¿SerÃ¡ Angular, junto con Angular Universal, la alternativa de Spring framework?  Â¿Se convertirÃ¡ Angular, junto con todo el ecosistema que estÃ¡ surgiendo a su alrededor en el Framework Definitivo empresarial?     Hasta hace muy poco tiempo, no eran muchos los que se hacÃ­an estas preguntas; si estÃ¡s interesado en el tema una buena opciÃ³n es este link de Michael Prentince.  Si observamos las pruebas de rendimiento que ofrece la pÃ¡gina oficial de Angular, vemos unas diferencias significativas:  Pruebas de rendimiento de Angular en modalidad JIT, AOT y Angular Universal  Las tres soluciones de la grÃ¡fica anterior, marcan unos tiempos aceptables en un entorno normal de trabajo; sin embargo, cuando la capacidad de computaciÃ³n del dispositivo es menor y la red estÃ¡ saturada o hay una mala conexiÃ³n (forzando la simulaciÃ³n a dispositivos 5 veces mÃ¡s lentos y simulando una red mÃ¡s lenta de 3G network:750kb/s) se obtienen los siguientes resultados:  Pruebas de rendimiento de Angular en modalidad JIT, AOT y Angular Universal en dispositivos y redes lentas  Vemos que los resultados asombran en aspectos de rendimiento en la versiÃ³n con Angular Universal . La versiÃ³n Angular Universal carga la pÃ¡gina principal en 0,4s, ya que no tiene que esperar el cÃ³digo Javascript para cargar. La aplicaciÃ³n no estarÃ­a completamente disponible funcionalmente hasta que el bundle de Javascript hubiera cargado, lo cual serÃ­a comparable en tiempo a la versiÃ³n AOT (5,5 seg), pero el usuario podrÃ­a ver la pÃ¡gina principal inmediatamente; asÃ­, si queremos que la aplicaciÃ³n sea usable en redes lentas debemos elegir AOT y Angular Universal deberÃ­a usarse si la primera impresiÃ³n de pÃ¡gina fuese importante.  Vaya rollo os estoy metiendoâ€¦ continuamos que hay algunos ingredientes verdes mÃ¡s a tener en cuenta â€¦ ðŸ™‚    Tercera Parte. Divide y VencerÃ¡s, Repite y PerderÃ¡s    AÃºn no hemos hablado de un aspecto muy importante a la hora de seleccionar el framework y es la reutilizaciÃ³n del cÃ³digo. Cualquier desarrollador con algo de experiencia sabe que repetir cÃ³digo es lo que mata a un proyecto , por lo que se debe cuidar mucho este aspecto tanto en lo escrito para Javascript (o Typescript ), templates y HTML, como en CSS.  Si repetimos tendremos que mantener y testear reiteradamente, algo que a ser posible deberÃ­amos evitar hacer sobre nuestro cÃ³digo. Pero al igual que para nuestro cÃ³digo, idealmente tambiÃ©n deberÃ­amos trasladar esta premisa a nuestra colecciÃ³n de aplicaciones ( evitar repetir partes de cÃ³digo o funcionalidad en otros lenguajes ) asÃ­ como a nuestros componentes.  Ya que tienes una aplicaciÃ³n web, Â¿por quÃ© no mostrarla con pantallas tÃ¡ctiles en tus oficinas? Si hay cola quizÃ¡s obtengas nuevos clientes en el acto. Considerando el caso mÃ¡s tÃ­pico, Â¿por quÃ© no reutilizar el mismo cÃ³digo para dispositivos mÃ³viles? Y ya que estamos, Â¿por quÃ© no tambiÃ©n para televisores? Si es posible (que hoy en dÃ­a lo es) esto lo haremos ejecutando el mismo cÃ³digo sobre cada dispositivo: Â¡maravilloso!  Â¿Y si pudiÃ©ramos generar aplicaciones para dispositivos mÃ³viles que no necesitan descarga del market de turno? EstarÃ­a bien, Â¿verdad? Pero estarÃ­a Â mucho mejor si no tuviÃ©ramos que reescribir la aplicaciÃ³n. Esto es posible de lograr con las PWAs , cuyo acrÃ³nimo se refiere a las Aplicaciones Web Progressivas o Progressive Web Apps en sus siglas en inglÃ©s y segÃºn Google :     Una PWA utiliza las Ãºltimas tecnologÃ­as disponibles en los navegadores para ofrecer una experiencia en mÃ³viles lo mÃ¡s parecida a la de una aplicaciÃ³n nativa.     En la mayorÃ­a de los casos, gracias a la generaciÃ³n de aplicaciones hÃ­bridas con tecnologÃ­as como Cordova (sin tilde: [kor’Ã°oÎ²a] ) o Phonegap es viable gestionar dichas aplicaciones y desplegarlas con cÃ³digo Javascript/HTML/CSSs . AsÃ­, hay frameworks para aplicaciones hÃ­bridas ( Ionic , Intel xdk , framework7 ) que utilizan internamente otros frameworks o paradigmas (Angular, VanillaJS, Vue) para establecer esa r eutilizaciÃ³n de forma optimizada , por lo que es extremadamente interesante tenerlo en cuenta antes de la elecciÃ³n.  Como aspirantes de transpiladores a cÃ³digo nativo compilado y para re-aprovechar nuestro cÃ³digo, tenemos a ReactNative que transpila y compila tu cÃ³digo escrito en React a cÃ³digo nativo para tus aplicaciones mÃ³viles y tambiÃ©n ha surgido NativeScript , que permite reutilizar el cÃ³digo en Angular con algunas modificaciones (tambiÃ©n Typescript o VanillaJS) para hacer lo propio. Aunque estas tecnologÃ­as estÃ¡n en fases tempranas y en ocasiones suponen verdaderos quebraderos de cabeza para los equipos de desarrollado (ademÃ¡s del encorsetamiento a la hora de utilizar determinados componentes), parecen tecnologÃ­as prometedoras , debido, sobre todo, a la mala fama que supusieron ciertas aplicaciones hÃ­bridas en relaciÃ³n a la fluidez.  Ahora bien, gracias a los web-workers , service-workers y a las mejoras que han introducido algunos frameworks a nivel de rendimiento, entre los que destaca (de nuevo) Angular , se ha permitido a frameworks para aplicaciones hÃ­bridas, como Ionic  (actual versiÃ³n 3 de Ionic estÃ¡ basada en la versiÃ³n 4 de Angular), suplir esas carencias y desarrollar aplicaciones para mÃ³viles (y escritorio desde la versiÃ³n 2.2.0 de Ionic) que permiten ejecutar multihilo con desarrollados basados en Javascript (transpilado desde Typescript).  Todo esto puede parecer una opiniÃ³n sesgada, pero Ionic (Angular) nos ofrece:     Aplicaciones hÃ­bridas con rendimiento perceptible similar a las aplicaciones nativas  ReutilizaciÃ³n y flexibilidad de programaciÃ³n con Javascript (TypeScript)/HMTL5/CSS3  Mantenibilidad de un lenguaje tipado (Typescript) como en las aplicaciones Nativas  Posibilidad de generar Progressive Web Aplications (PWA) (cosa que no permiten las aplicaciones nativas)     Por lo anterior, podrÃ­amos concluir que la elecciÃ³n de hacer uso de las tecnologÃ­as que generan aplicaciones hÃ­bridas puede ser una muy buena decisiÃ³n a nivel empresarial y corporativo , ya que sus ventajas superan la mala fama de las aplicaciones hÃ­bridas en sus inicios y de nuevo, el Framework Definitivo de Google, Angular, aparece en escena.  Es quizÃ¡s tambiÃ©n importante recalcar que un equipo de expertos , al igual que un framework , es tambiÃ©n una herramienta para las organizaciones que necesitan desarrollos. Y esta herramienta es clave a la hora de valorar opciones y tomar las decisiones mÃ¡s adecuadas a las necesidades de cada organizaciÃ³nâ€¦ Â¿Lo ves? EstÃ¡ justo aquÃ­… es el Rayo Verde :     Muchas gracias Eduardo Redondo , VerÃ³nica SÃ¡nchez y Juanjo JosÃ© RamÃ­rez por vuestro feedback… ðŸ™‚  REFERENCIAS:    TRANSPILADORES   https://babeljs.io/  https://www.typescriptlang.org/  https://www.dartlang.org/     FRAMEWORKS   https://www.polymer-project.org/  http://aurelia.io/  https://marionettejs.com/  http://knockoutjs.com/  https://www.emberjs.com/  https://facebook.github.io/react/  https://vuejs.org/  https://angular.io/  https://angularjs.org/     OFICIAL:   https://angular.io/docs/ts/latest/guide/ngmodule.html#!#bootstrap  https://angular.io/docs/ts/latest/cookbook/aot-compiler.html  https://universal.angular.io/  https://developers.google.com/web/updates/2016/09/devtools-digest#cpu_throttling_for_a_mobile-first_world  https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling     OTROS:   https://w3c.github.io/webcomponents/spec/custom/  https://w3c.github.io/webcomponents/spec/shadow/  https://www.polymer-project.org/blog/shadydom  https://www.campusmvp.es/recursos/post/Que-son-las-Aplicaciones-Web-Progresivas-o-Progressive-Web-Apps.aspx  https://www.w3schools.com/html/html5_webworkers.asp  https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API  http://blog.ionic.io/ionic-2-2-0-is-out/  http://webassembly.org/  https://www.campusmvp.es/recursos/post/JavaScript-ECMAScript-ES6-Existe-ES7-Aclarando-las-diferentes-versiones-del-lenguaje.aspx     WIKIPEDIA:   https://en.wikipedia.org/wiki/AtScript  https://en.wikipedia.org/wiki/Dart_(programming_language)     ESTADÃSTICAS:   https://trends.google.com/trends/explore?q=backbone.js,vue.js,ember.js,knockout.js,react.js  https://www.indeed.com/jobtrends/q-Angular.JS-q-backbone.js-q-knockout.js-q-ember.js-q-ext.js-q-react.js-q-vue.js-q-Angular2.html  https://www.indeed.com/jobtrends/q-Angular.JS-q-backbone.js-q-knockout.js-q-ember.js-q-ext.js-q-react.js-q-vue.js-q-Angular2.html     DEBATES:   http://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript     APLICACIONESÂ MÃ“VILES/HÃBRIDAS:   https://cordova.apache.org/  http://phonegap.com/  https://ionicframework.com/docs/  https://software.intel.com/es-es/intel-xdk  http://framework7.io/  https://facebook.github.io/react-native/  https://www.nativescript.org/                   Proyectos relacionados noviembre 29, 2017 Segundo nivel en la navegaciÃ³n DXA Leer mÃ¡s abril 5, 2016 SDL XPM y Smart Target: simulaciÃ³n de footprints Leer mÃ¡s enero 21, 2016 Nuevo tarificador de autos y motos MAPFRE Leer mÃ¡s               Fecron hace fÃ¡cil lo difÃ­cil. Contacta con nosotros.      FECRON te permite crear aplicaciones web con gestores de contenido, como SDL Tridion, de forma sencilla y automatizada.  Estamos especializados en el desarrollo personalizado con tecnologÃ­as modernas que nos permiten realizar ciclos de desarrollo mÃ¡s rÃ¡pidos .       Nuestros valores   Creemos en nuestra gente , en la direcciÃ³n de la empresa y los productos que representamos .  Nos ayudamos mutuamente y trabajar juntos.  Principio KISS (Keep It Short and Simple): Hacemos las cosas sencillas y simples.  Servicio de calidad: Certificado  ISO 9001:2008  Compromiso con el medio ambiente.   Categorias   CMS   Customer   Desarrollo   Eventos   Fecron   Front-End   Magia   MetodologÃ­a   SCRUM   SDL   SmartTarget          Â© 2018 Fecron Consulting Services Aviso Legal | PolÃ­tica de Cookies | Calidad y Medio Ambiente                      * Nombre:  * E-mail:  Asunto:  Mensaje:                    Acepto las condiciones de contacto. Pulsa aquÃ­ para revisar las condiciones de contacto.          Cookies Utilizamos cookies para que usted tenga una mejor experiencia de usuario. Si continÃºa navegando estÃ¡ dando su consentimiento explÃ­cito para la aceptaciÃ³n de las mencionadas cookies y la aceptaciÃ³n de nuestra polÃ­tica de cookies , pinche aquÃ­ para mas informaciÃ³n.  Aceptar Privacidad y PolÃ­tica de Cookies                       