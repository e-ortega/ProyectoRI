                   menu     Entrar   Registro          Contacto    FAQs      English       Buscar                        Productos API    BBVA EspaÃ±a  BBVA EE.UU.     Ver todos los productos     CÃ³mo funciona    GuÃ­as  Primeros pasos  Llamadas a una API  Consola  Bot    Otros  FAQs  BBVA Demo   Ver todo     Niveles de Acceso    Recursos    Actualidad  Blog  Ebooks  Eventos                   BBVA API_Market Recursos Actualidad Los frameworks imprescindibles para desarrollar la web del futuro  Powered by: BBVA Open4U               Los frameworks imprescindibles para desarrollar la web del futuro   La web ha evolucionado a un ritmo desenfrenado, es fÃ¡cil perderse entre la cantidad de nuevos frameworks y componentes. Hacemos un recorrido por las opciones que tenemos y hacia dÃ³nde se dirige la web: Polymer, Angular, Reactive.      Desarrolladores  Desarrollo  Desarrollo web            Facebook  Twitter  Linkedin  Google +  Whatsapp  Mail          BBVAOpen4U     | 22 Dic. 2015    El mundo web evoluciona a una velocidad endiablada, aparecen nuevas ideas y frameworks a diario y es fÃ¡cil perderse , tanto en el lado de cliente o frontend, como en el lado de servidor o backend. Sin embargo, hay tendencias claras: hemos pasado en estos Ãºltimos aÃ±os de frameworks de backend que representaban toda la pÃ¡gina en cada peticiÃ³n y una pequeÃ±a capa de JavaScript que dotaba de dinamismo a la aplicaciÃ³n, a backends que presentan una API al cliente y la apariciÃ³n de frameworks complejos de JavaScript que consumen esta API a la par con las aplicaciones mÃ³viles.  En esta tesitura, hemos visto en los Ãºltimos aÃ±os cÃ³mo las grandes empresas del sector invertÃ­an muchÃ­simo esfuerzo y dinero en hacer de JavaScript una plataforma rapidÃ­sima, pasando en poco tiempo de ser un lenguaje denostado del que se hacÃ­a bromas por haber sido escrito en 10 dÃ­as a convertirse en el lenguaje de moda.  Son tiempos interesantes en los que cada nuevo framework intenta aportar su granito de arena. Unos, como Angular, intentan hacer manejable un framework de frontend complejo . Otros, como React Native, buscando ser esa plataforma en la que escribir tanto aplicaciones mÃ³viles como web. TambiÃ©n tenemos opciones como Meteor que intentan solventar la brecha backend/frontend proporcionando un framework Ãºnico para los dos.Â  TambiÃ©n hay ideas de fondo en programaciÃ³n que van cobrando fuerza, tanto en servidor como en cliente, como aplicar patrones de programaciÃ³n funcional en detrimento de la orientaciÃ³n tradicional a objetos, en busca de un cÃ³digo mÃ¡s limpio y las ventajas que aporta a la hora de tratar con concurrencia. En este apartado brillan lenguajes como Scala y Erlang/Elixir . AsÃ­ mismo, JavaScript, en sus distintos usos, busca sacar partido de sus aspectos funcionales.  Teniendo en cuenta estas tendencias generales, hagamos un repaso a los frameworks a tener en cuenta tanto en frontend como en el backend.  Angular   Fuente imagen: WikiMedia Commons  Angular , creado por Google, se convirtiÃ³ rÃ¡pidamente en el framework de cliente mÃ¡s popular, gracias a ideas novedosas en forma de directivas que se asemejan a etiquetas HTML y que son gestionadas por Angular. EstÃ¡ especÃ­ficamente pensado para proyectos complejos, para los que aporta herramientas para la gestiÃ³n de dependencias, modelos, controladores y enrutado.  El equipo de Angular, sin embargo, estÃ¡ preparando una segunda versiÃ³n que supone una reescritura completa del framework , escrita en TypeScript, lenguaje que compila a JavaScript, y aunque Google ha prometido seguir manteniendo esta primera versiÃ³n, quizÃ¡ sea el momento de empezar a mirar hacia la 2.0. Â  React   Fuente imagen: WikiMedia Commons  Publicada en 2013 y respaldada por Facebook, React es un framework que estÃ¡ ganando popularidad a una velocidad asombrosa.Â  Las comparaciones con Angular son inevitables: React, a diferencia de la soluciÃ³n de Google estÃ¡ mÃ¡s centrada en la interfaz de usuario y en representar de forma eficiente los cambios de estado de la aplicaciÃ³n. EstÃ¡ pensada para ser combinada con otras librerÃ­as, como routers o Flex para gestiÃ³n de los modelos.Â  Uno de los puntos fuertes de React es el proyecto React Native , que permite obtener rendimiento nativo en plataformas iOS y Android, transpilando el cÃ³digo JavaScript a componentes nativos. Aunque el sueÃ±o de escribir una sola aplicaciÃ³n y ejecutarla en las tres plataformas queda lejos, y aÃºn tendremos que escribir una versiÃ³n para cada sistema, sÃ­ que permite aprender una sola tecnologÃ­a y reaprovecharla en web, iOS y Android. Y, si nos organizamos bien, reutilizar buena parte del cÃ³digo .  Polymer  Polymer , publicada en 2013 tambiÃ©n por Google, es una librerÃ­a orientada a componentes. La idea es crear webs a partir de elementos reutilizables, de modo que podamos componer aplicaciones a partir de bloques sin necesidad de conocer el funcionamiento interno de cada uno, de modo que se extiende HTML de forma natural.  Mientras que Angular estÃ¡ mÃ¡s pensado para un desarrollo integral, Polymer estÃ¡ mÃ¡s centrado en la capa de presentaciÃ³n y es integrable con otros frameworks como Angular2.  Meteor  TambiÃ©n del ecosistema JavaScript, Meteor es un framework de backend y cliente centrado en desarrollar aplicaciones rÃ¡pidamente y reducir al mÃ¡ximo el tiempo en sacar una primera versiÃ³n a producciÃ³n. Es decir, lleva en la sangre la cultura del fail fast, por lo que puede ser una muy buena opciÃ³n para start-ups que quieran probar su idea en el mercado sin embarcarse en largos y costosos desarrollos de una primera versiÃ³n. Tiene ideas muy interesantes, como la presencia de una base de datos en el cliente, MiniMongo, que se sincroniza con el servidor en tiempo real usando WebSockets.  Phoenix  CentrÃ¡ndonos en el backed , aunque Erlang, el lenguaje de Ericsson, celebrarÃ¡ su 30 aniversario el aÃ±o que viene, su extraordinaria mÃ¡quina virtual especializada en escalabilidad masiva y tolerancia a fallos de sistema estÃ¡ viviendo una segunda juventud en backends web. Miembros de la comunidad Ruby han creado Elixir , un lenguaje con una sintaxis mÃ¡s amable que Erlang que suaviza la curva de aprendizaje sin renunciar a sacar el mÃ¡ximo provecho de la plataforma.  El framework web mÃ¡s prometedor de Elixir se llama Phoenix . Se publicÃ³ la versiÃ³n 1.0.0 hace tres meses y ha presentado resultados de rendimiento espectaculares . Una propuesta muy prometedora para backends de proyectos que esperan crecer.  El mundo de Scala  En los Ãºltimos aÃ±os el mundo Java ha visto nacer lenguajes muy prometedores, que corren en su mÃ¡quina virtual y pueden reaprovechar librerÃ­as hechas en Java . Por un lado estÃ¡ Clojure , un Lisp que solo con ver las excelentes conferencias de su creador ya vale la pena, y por otro, con mucha tracciÃ³n, estÃ¡ Scala . Scala, siendo un lenguaje funcional, permite tambiÃ©n programar de la tradicional forma imperativa, lo que puede reducir la curva de aprendizaje, y estÃ¡ sacando partido a la gran cantidad de desarrolladores Java que buscan un lenguaje mÃ¡s expresivo .Â  Aunque Scala no se restringe a la web tiene frameworks de backend muy potentes como Play o Akka .  Haskell y su entorno  Aunque pocos pueden presumir de usarlo en su dÃ­a a dÃ­a, el caso del lenguaje Haskell es digno de tener en cuenta. Es un lenguaje funcional, puro, muy fuertemente tipado , que quizÃ¡ pocos usen directamente, con una curva de aprendizaje dura, pero cuyas solidÃ­simas ideas de fondo van permeando otras plataformas. No es raro oÃ­r que los creadores de los lenguajes y frameworks que nos resultan mÃ¡s novedosos tienen familiaridad con Haskell, de modo que muchas veces estamos empleando estas ideas sin saberlo. Â¿Scala y Clojure? Siempre habrÃ¡ alguien en sus listas de correo hablando de cÃ³mo se comparan con Haskell. Â¿Aparecen las promises en JavaScript? No falta quien las entiende como mÃ³nadas de Haskell .  AsÃ­ que quizÃ¡ la web del futuro no estÃ© hecha con Haskell, pero seguramente estarÃ¡ hecha por alguien que sepa Haskell. Para los fuertes de corazÃ³n que deseen beber directamente de la fuente, Learn You a Haskell es la introducciÃ³n obligada. En web, dos frameworks a tener en cuenta son Yesod para aplicaciones complejas o, para proyectos mÃ¡s pequeÃ±os, quizÃ¡ de una API, Scotty .  Y, por supuesto, los sospechosos habituales  Â   Fuente imagen: iStock Photo  A los desarrolladores nos encanta dejarnos llevar por el optimismo y hablar del nuevo lenguaje o framework que, segÃºn la profecÃ­a, va a resolver todos nuestros problemas , pero no hay que olvidar que en muchos casos la mejor opciÃ³n para construir la web del futuro es aprovechar el trabajo ya hecho y las lecciones aprendidas en el pasado.  Frameworks de backend ya maduros como Ruby on Rails , Django para Python o Symfony Â  en PHP (que publicÃ³ su versiÃ³n 3.0 esta semana) han demostrado ser lo suficientemente sÃ³lidos y flexibles como para crear proyectos de Ã©xito. Sus ventajas han sido explotadas, se han templado a fuego sus puntos dÃ©biles, y hay comunidades numerosas en las que podemos encontrar colaboradores con mucha experiencia.  En este caso es importante aprovechar los componentes de cada Framework que permitan construir APIs REST, como Django REST Framework o FOSRestBundle de Symfony, que sirvan de punto de entrada de frameworks de cliente en JavaScript y aplicaciones mÃ³viles.  SÃ­guenos en @BBVAAPIMarket  Fuente imagen portada: iStock Photo  Â                  Te puede interesar     Desarrolladores  Recursos para programadores         APIs  CÃ³mo Slack se ha hecho imprescindible en las empresas gracias a las APIs  La plataforma de comunicaciÃ³n para empresas Slack integra diferentes servicios en una sola aplicaciÃ³n de mensajerÃ­a, y todo gracias a su API. Cualquier desarrollador puede utilizarla para crear un bot que responda a las peticiones de los usuarios a travÃ©s del chat.Â         Desarrollo  Lean UX: quÃ© es y cÃ³mo ayuda a los usuarios         APIs  Las APIs estÃ¡n en todas partes, pero... Â¿y su documentaciÃ³n?          Entrevistas  Diego Blanco: â€œPara crear un catÃ¡logo de APIs es importante ir paso a paso"  Diego Blanco es el responsable de la DirecciÃ³n tÃ©cnica corporativa de la Plataforma de API abiertas y PaaS en el Grupo Bancario BBVA Compass. Hablamos con Ã©l para que detalle los pasos necesarios para crear un catÃ¡logo de API segÃºn su experiencia en BBVA.           Tendencias 2016: el reto del mercado de las APIs         Productos API    BBVA EspaÃ±a    BBVA EE.UU.      CÃ³mo funciona   Primeros pasos  Llamadas a una API  Consola  Bot  BBVA Demo     Â¿Necesitas ayuda?    Contacto    FAQs      Recursos   Actualidad  Blog  Ebooks  Eventos                 Aviso Legal    Contacto    PolÃ­tica de cookies    PolÃ­tica de ProtecciÃ³n de Datos Personales     Twitter                       