                            Home  ProgramaciÃ³n  Tutoriales  Mis charlas  iPlayas.es  Contacto            Desarrollo de aplicaciones mÃ³viles multiplataforma parte 1/3: web vs nativas vs multiplataforma   En ProgramaciÃ³n   18 comentarios     Tweet   Aug 1   Escribiendo un post en el que pretendÃ­a analizar en profundidad las alternativas y herramientas al desarrollo de aplicaciones multiplataforma para mÃ³viles, me di cuenta de que estaba quedando demasiado largo y que nadie en su sano juicio lo leerÃ­a. AsÃ­ que he decidido dividirlo en tres partes con el fin de que se digerible. Esta es la primera, las otras maÃ±ana y pasado. Post relacionados:   Parte 1: Aplicaciones mÃ³viles: web vs nativas vs multiplataforma  Parte 2: Desarrollo de apps. mÃ³viles multiplataforma: Phonegap y Titanium Appcelerator  Parte 3: Desarrollo de apps. mÃ³viles multiplataforma: Corona y Adobe Air mobile y conclusiones  Bola extra: Nuevas conclusiones   IntroducciÃ³n  Hace ya algÃºn tiempo que llevo queriendo meterme en profundidad en el desarrollo mÃ³vil. Pero hacer esto no significa tirar por la borda todos los aÃ±os o experiencia que tengo en desarrollar aplicaciones web, sino ampliar el alcance de los nuevos proyectos haciendo que funcionen tambiÃ©n en dispositivos mÃ³viles. Al fin y al cabo, muchas de estas aplicaciones usan servicios web y/o tienen un site en internet donde continuar usando la aplicaciÃ³n o servicio, asÃ­ que programar para mÃ³viles no es dejar la programaciÃ³n web, ni mucho menos, sino hacer que Ã©sta sea accesible por mÃ¡s usuarios. Puede incluso ser visto al revÃ©s: el desarrollo web complementa al desarrollo mÃ³vil, permitiendo que el usuario continÃºe usando su aplicaciÃ³n tambiÃ©n en internet y no solo en su dispositivo.  Aplicaciones web vs aplicaciones nativas  Una de las principales ventajas de los smartphone es que todos tienen un navegador HTML5, por lo que podemos, simplemente, crear una aplicaciÃ³n web y usarla desde el navegador de uno de estos mÃ³viles. Esto tiene sus pros y sus contras:  Ventajas:   FÃ¡cil diseÃ±o : no hay que pensar en desarrollar una aplicaciÃ³n para mÃ³viles si no queremos. Basta con hacer un diseÃ±o adaptado a una pantalla y resoluciÃ³n mÃ¡s pequeÃ±as -que puede ser simplemente adaptando un CSS por cada dispositivo- o podemos rediseÃ±ar la navegaciÃ³n al completo. AdemÃ¡s, las aplicaciones web se pueden “tunear” para que parezcan aplicaciones nativas: icono de aplicaciÃ³n, pantalla completa, splash screen, barra de estado, etc. mÃ¡s info en este tutorial .  FÃ¡cil implementaciÃ³n : las aplicaciones web pueden ser desarrolladas en cualquier tecnologÃ­a de servidor, asÃ­ que podemos usar nuestro lenguaje favorito (Java, Grails, Php, Ruby, Python,…) conÂ la seguridad de que la aplicaciÃ³n se verÃ¡ igual en todos los terminales.  Seguridad : tu controlas el acceso a la aplicaciÃ³n y la puedes actualizar sin tener que pedir permiso. Nadie te va a “piratear” la versiÃ³n premium de tu site, ni nadie ta va a vetar la entrada al App Store porque no cumple los requisitos .   Desventajas:   Apis nativas : no hay acceso completo a todas las Apis nativas del mÃ³vil. Aunque la cÃ¡mara y el micro son accesibles con Flash, todos sabemos que esa tecnologÃ­a estÃ¡ vetada en IOS . Desde HTML5 y Javascript, es posible acceder a las coordenadas del GPS , pero no en tiempo real ni de la misma manera que si pudiÃ©ramos acceder a la Api del mÃ³vil directamente. Y olvÃ­date de usar el acelerÃ³metro, la agenda, la brÃºjula, etc.  DifÃ­cil de usar, fÃ¡cil de olvidar : para usar una aplicaciÃ³n web en un mÃ³vil, es necesario que el usuario abra el navegador y teclee la direcciÃ³n, ya sea porque la sepa, la haya encontrado en Google o la haya recibido por correo o chat. Una vez abierta la aplicaciÃ³n, debe aÃ±adirla a favoritos o, mejor todavÃ­a, crear un icono de acceso directo en el mÃ³vil para acceder a ella mÃ¡s tarde. Confiar en que nuestros posibles usuarios acaben haciendo todo esto para poder acceder cÃ³modamente a nuestra aplicaciÃ³n en futuras ocasiones es pecar de ingenuo. Es mucho mÃ¡s fÃ¡cil descargar una aplicaciÃ³n y que aparezca directamente como un icono en nuestro mÃ³vil.  Lenta : sin contar que renderizar HTML e interpretar Javascript es sin duda mÃ¡s costoso que ejecutar una aplicaciÃ³n nativa, cada peticiÃ³n que hagamos en nuestra aplicaciÃ³n implicarÃ¡ una recarga de la pÃ¡gina o un acceso, en mayor o menor medida, contra nuestro servidor. Cualquier espera por pequeÃ±a que sea impacta en la experiencia de usuario. Una aplicaciÃ³n nativa tiene todos los recursos y procesos guardados en local, y solo accede al servidor para obtener o enviar datos si es que los necesita. Por tanto, una aplicaciÃ³n web no tiene la fluidez y velocidad de manejo que una aplicaciÃ³n nativa, ni nunca la tendrÃ¡.  Peor monetizaciÃ³n : es mÃ¡s fÃ¡cil que un usuario pague por nuestros servicios si simplemente cobramos X por nuestra aplicaciÃ³n al descargarla del App Store, que no hacer que el usuario se tenga que registrar y efectuar el pago en nuestra web, introduciendo manualmente todos sus datos como el nÃºmero tarjeta, direcciÃ³n, etc. Si el usuario ya tiene sus datos guardados en el App Store, para comprarla solo tiene que poner su password y confirmar la compra. MÃ¡s fÃ¡cil imposible.   Y no soy el Ãºnico que piensa asÃ­, tenemos que ser conscientes de que los mercados de aplicaciones son una realidad: Apple tiene suÂ App Store para IOS y MacOS, Google suÂ Chrome Web Store ,Â Google Apps Marketplace y elÂ Android Market , Amazon suÂ Amazon Appstore , incluso hay markets alternativos comoÂ OpenAppMkt . Cada vez mÃ¡s empresas invierten en crear un entorno fÃ¡cil y cÃ³modo para que el usuario pueda descargar, probar y comprar aplicaciones, repartiÃ©ndose los beneficios. Pensar que podemos competir con todo esto con una aplicaciÃ³n web para mÃ³viles, que simplemente se puede acceder desde una direcciÃ³n en un navegador, es una ilusiÃ³n.  Desarrollando aplicaciones mÃ³viles  Cada plataforma tiene su propio lenguaje, herramientas de desarrollo y Apis con los que crear aplicaciones. Para el post, vamos a comentar solo las mÃ¡s importantes: IOS y Android. Demos un breve repaso a cada uno de ellas.  IOS  El lenguaje oficial para IOS es Objective-C , y con este lenguaje podemos crear aplicaciones para Iphone, Ipad y Ipod touch. Hay distintas versiones de IOS pero todas ellas se programan usando el mismo lenguaje, Objective-C, y la misma herramienta,Â Xcode .  Xcode es el entorno de desarrollo oficial de Apple. Con Ã©l, podemos crear aplicaciones de escritorio para Mac y para IOS. Aunque podemos compilar las aplicaciones “a mano”, es una tarea casi imposible y siempre se recomienda Xcode para, por lo menos, empaquetar y subir la aplicaciÃ³n al App Store. La mayorÃ­a de alternativas para crear aplicaciones en Iphone (Appcelerator, Phonegap, Corona) se apoyan siempre en esta herramienta para hacer el build final, aunque no todas (Flex no lo necesita).  El Ãºnico “problema” que tiene es que solo existe para Mac, por lo que para crear aplicaciones IOS te hace falta un ordenador marca Apple. Y esto no siempre es posible, claro (aunque se puede remediar con virtualizaciÃ³n).Â Sobre el precio, ahora es gratis pero hasta hace poco costaba 5â‚¬ en la App Store. No es caro y tampoco es un drama tener que comprarlo.  Requisito importante: para distribuir aplicaciones en el App Store y para poder probar las aplicaciones desarrolladas en nuestro propio Iphone/Ipad, es necesario adquirir una licencia de desarrollador que cuesta 79â‚¬ al aÃ±o.  Android  Para Android todo es mucho mÃ¡s fÃ¡cil. Primero tenemos el lenguaje Java para programar aplicaciones y unÂ SDK multiplataforma que funciona en Windows, Linux y Mac. Que Java es mÃ¡s fÃ¡cil de aprender y programar que Objective-C -y que C en general- debido a su simplicidad es un hecho (sobre si es mejor o peor, ahÃ­ no voy a entrar a discutir, cada uno tendrÃ¡ su propia opiniÃ³n). Si queremos un entorno de desarrollo, podemos usar un plugin ADT para Eclipse que incluye un simulador, que tambiÃ©n es multiplataforma, libre y gratuito, aunque me consta que hay mÃ¡s. Y no tenemos que pagar ninguna licencia anual.  Desarrollo mÃ³vil multiplataforma  En resumen: para hacer aplicaciones IOS nos hace falta un Mac con Xcode, una licencia de desarrollador y hay un lenguaje Objective-C con una sintaxis un tanto complicada de escribir y de leer. Y para hacer aplicaciones Android, no nos hace falta ningÃºn sistema operativo en particular: usamos Java con Eclipse+plugin ADT o el propio SDK de Android que son multiplataforma y no hay licencias que pagar.  Sobre el hecho de que hay mÃ¡s aplicaciones de pago en el App Store que en el Android Market, o si es mejor publicar tu aplicaciÃ³n en un sitio o en otro, etc, no dirÃ© nada. Ya hay unos cuantos artÃ­culos interesantesÂ sobre ello . Yo lo que ahora me planteo es:   Â¿QuÃ© pasa si no tenemos un Mac y queremos desarrollar aplicaciones para IOS?  Â¿QuÃ© sucede si Objective-C nos parece complicado y no queremos aprenderlo?  O lo contrario Â¿que sucede si sabemos Objective-C y no nos gusta Java?  Y la mÃ¡s importante Â¿quÃ© ocurre si queremos hacer una aplicaciÃ³n para los dos dispositivos y no queremos programarla dos veces?   Personalmente, creo que todas las preguntas tienen fÃ¡cil respuesta: “te compras un Mac o virtualizas un Mac OS con VirtualBox ” o “te aguantas y aprendes Java/Objective-C”. Pero a la Ãºltima pregunta no hay respuesta vÃ¡lida posible: si quieres una aplicaciÃ³n para IOS y Android, tienes que programarla dos veces. Oh, espera un momento, quizÃ¡ haya una alternativa a todas estas preguntas…  La soluciÃ³n es conseguir una herramienta “write once, run everywhere”.Â Un software con el que sea posible programar con un lenguaje determinado y que, ademÃ¡s, permita que tu aplicaciÃ³n funcione en varios dispositivos. Tras una inspecciÃ³n exhaustiva en internet, esto es lo que he encontrado:   Flex 4 y Adobe Air Mobile, la Ãºnica herramienta que permite construir aplicaciones Android y IOS sin tener un Mac ni Xcode. Y se programa en ActionScript.  PhoneGap, Titanium Appcelerator y Anscana Corona, que nos permiten construir aplicaciones usando otros lenguajes como Javascript y Lua, aunque requieren Mac y Xcode.   Y me he decidido a probarlas. LasÂ he descargado todas, me he hecho una aplicaciÃ³n de ejemplo con cada uno de ellas y la he intentado instalar el Ipad y el Iphone que tengo en casa (no tengo mÃ³vil Android). Y estas han sido mis conclusiones…  Fin de la parte 1/3. ContinÃºa en Desarrollo de aplicaciones mÃ³viles multiplataforma: PhoneGap y Titanium Appcelerator .     Tweet        Logging In...  Comments are closed.     18 Replies  15 Comments  0 Tweets  0 Facebook  3 Pingbacks      Last reply was 219 days ago       Javi      View   234 days ago     Sinceramente creo que no te has tomado el tiempo suficiente de anÃ¡lisis para realizar afirmaciones como: – cada peticiÃ³n que hagamos en nuestra aplicaciÃ³n implicarÃ¡ una recarga de la pÃ¡gina o un acceso Â¿conoces AJAX? – para usar una aplicaciÃ³n web en un mÃ³vil, es necesario que el usuario abra el navegador y teclee la direcciÃ³n Â¿sabes lo que es instalar una web-app en el movil? Â¿sabes que tienes METAs para ello? – Peor monetizaciÃ³n Â¿sabes que se puede meter una web-app en cualquier store? – Por no decir que la especificaciÃ³n W3C va a llevar todo eso que dices que no tienen las web-apps: acceso a camara, contactos, osciloscopio… etc  Este mensaje es constructivo y nunca destructivo, pero sinceramente creo que no te has metido a “pilon” con el desarrollo de WebApps.            Alberto Vilches      View   234 days ago     Hola Javi, gracias por el comentario. Conozco Ajax, y sigue es una peticiÃ³n al servidor que pasa por internet y asÃ­ que sigue teniendo un coste. Sobre la instalaciÃ³n de webapps, si te lees bien esa parte del post, veras que solo digo que el usuario tiene que acceder usando la direcciÃ³n *la primera vez* y luego tenemos que confiar en el usuario para que la instale como acceso directo o la aÃ±ada a favoritos. Incluso pongo un enlace a un sitio donde explica como hacerlo con un video. Solo digo que, para el usuario, ese sistema es mas enfarragoso que descargar la aplicaciÃ³n desde el App Store. No se como se puede subir una web-app al App Store, de hecho, no entiendo muy bien como es posible Â¿subes un enlace y te lo descargas? Â¿o subes una aplicaciÃ³n con PhoneGap? Supongo que la especificaciÃ³n de W3C traerÃ¡ muchas cosas en el futuro, pero estoy hablando de alternativas y soluciones reales que se pueden hacer hoy en dÃ­a, ahora mismo.  Bueno, cada uno ve las ventajas e inconvenientes segÃºn sus propios criterios, y en este artÃ­culo yo he puesto mi opiniÃ³n. Gracias por la tuya, aunque serÃ­a mÃ¡s interesante si la acompaÃ±aras con enlaces e informaciÃ³n adicional, podrÃ­a aÃ±adidos al post. Un saludo!            Alberto Vilches      View   234 days ago     Javi, supongo que te refieres a esto: http://www.apple.com/webapps/whatarewebapps.html La verdad es que no lo conocÃ­a y me parece una idea muy interesante, aunque no veo como aprovechar el App Store para monetizar las aplicaciones. Â¿Se pueden comprar o hay que usar un formulario de registro dentro de cada web-app para introducir los datos de la tarjeta? He modificado el post y aÃ±adido como ventaja en la parte facil diseÃ±o, el tuneado de webapps para que parezcan aplicaciones nativas con los meta.            David Pombar      View   234 days ago     Un post muy interesante, hacÃ­a falta que alguien se metiera este trabajo y nos lo contase a los demÃ¡s, creo que es una duda que tenemos muchos ;)  Un saludo            Jano      View   234 days ago     iOS tambiÃ©n admite C y C++ pero el interfaz estÃ¡ hecho en Objective-C (UIKit framework). Las aplicaciones con grÃ¡ficos OpenGL y motores en C, C++ se portan rapidamente, pero aprender UIKit no es tarea trivial.  iOS 5 tiene ARC ( http://clang.llvm.org/docs/AutomaticReferenceCounting.html ) y no es necesario gestionar la memoria manualmente. Supongo que pensabas en eso al comparar la dificultad de Java y Objective-C.  Al usar estos frameworks multiplataforma hay que tener en cuenta que tu inversiÃ³n en aprendizaje depende de la suerte de sus respectivos fabricantes, es toda una apuesta.            Alberto Vilches      View   234 days ago     La dificultad de Objective-C frente a Java es la sintaxis principalmente (llamadas de mÃ©todos, punteros) y la cantidad de cÃ³digo que hay que escribir para hacer casi cualquier cosa. Pero es la opiniÃ³n de alguien que lleva con Java mucho tiempo (yo). Para alguien que llevo mucho con C, C++ u Objective-C, serÃ¡ Java lo que le parezca raro y con una sintaxis caprichosa.  Lo de la suerte de los respectivos fabricantes tienes muchÃ­sima razÃ³n, y es una de los factores que hay que tener en cuenta a la hora de decantarse por una herramienta u otra. Al fin y al cabo, es el precio que hay que pagar por no usar las herramientas “oficiales”, pero pasa lo mismo en cualquier tecnologÃ­a (fÃ­jate en Flash por ejemplo: de ser el rey de la web a estar en vÃ­as de extinciÃ³n, aunque sobre esto, tengo mis dudas y opiniÃ³n personal tambien, confÃ­o en Adobe… :)            Juan Quijano      View   234 days ago     Mmmmm,  Interesante artÃ­culo pero me faltan muchas cosas. Y me da que la primera es la experiencia. Lo cual no hace de menos el valor de tus opiniones.  1. Te has dejado fuera los RIM (Blackberry) y los Windows Phone (en EspaÃ±a casi no existe pero se estÃ¡n vendiendo como churros).  2. Son mercados diferentes las WebApp y las nativas. Es como comparar una aplicaciÃ³n Web con una aplicaciÃ³n de escritorio. Tienen objetivos y mercados diferentes.  3. Acabo de terminar una WebApp, que ya es impresionante cÃ³mo va en los smartphone y las Blackberry, y ahora estamos migrando a jQuery Mobile… pruebalo.  En mi opiniÃ³n personal y basada en mi Ãºltima experiencia, las WebApp serÃ¡n para los mÃ³viles lo que la Web ha sido para el escritorio.            asertus      View   234 days ago     Un detalle es que para hacer una aplicaciÃ³n Android competitiva, es bastante complicada hacer la en Java, salvo tema de determinados programas de gestiÃ³n. Cada vez mÃ¡s la punta de velocidad del cÃ³digo nativo C, algo C++ es casi indispensable…  Saludos            asertus      View   234 days ago     Me referÃ­a “hacerla solamente en Java”…            Marcin Gryszko      View   234 days ago     Alberto, los verdaderos machos desarrollan para Android en Scala :) Por lo visto es posible y lo soporta maven-android-plugin.            jneira replied:      View   233 days ago     Sin embargo chuck norris programa para IOS en haskell :-P  http://www.haskell.org/haskellwiki/IPhone  http://projects.haskell.org/ghc-iphone            Marcin Gryszko replied:      View   233 days ago     Ante esta respuesta me quedo perplejo… Scala es para nenazas si lo comparas con Haskell :)               Ethervoid      View   234 days ago     Nosotros en Android el tema de las webapp lo hemos metido dentro de un webcontainer como wrapper y capandolo, para no poder acceder a otra ruta pej, lo hemos subido como aplicaciÃ³n al Android Market           Pingback Desarrollo de aplicaciones mÃ³viles multiplataforma parte 2/3: Phonegap y Titanium Accelerator « Yo, programador      View   233 days ago     [...] Parte 2/3 de una serie de posts sobre desarrollo de aplicaciones mÃ³viles multiplataforma. Post anterior:Â Aplicaciones mÃ³viles: web vs nativas vs multiplataforma [...]           Pingback Desarrollo de aplicaciones mÃ³viles multiplataforma parte 3/3: Corona y Adobe Air mobile y conclusiones « Yo, programador      View   233 days ago     [...] Parte 1: Aplicaciones mÃ³viles: web vs nativas vs multiplataforma [...]           Pingback PhoneGap vs. Flex vs. Appcelerator vs. Corona: nuevas conclusiones « Yo, programador      View   228 days ago     [...] Parte 1: Aplicaciones mÃ³viles: web vs nativas vs multiplataforma [...]           Thibaud      View   219 days ago     Hi, I am discovering those articles thanks to the mistake you did with the RSS feeds … and I’m glad you did ! Nice articles !  Actually, there is another alternative if you come from the .NET/Mono world. You can use “MonoTouch” and “Mono for Android” to develop applications for iDevices and Android devices in C#. (it is not free, though, and I haven’t tried it…). They claim you can reuse most fo your code between the platforms. See http://xamarin.com/            Alberto Vilches replied:      View   219 days ago     Thank you, maybe I will get Rhodes and MomoTouch for the next article! :)           CategorÃ­as   CrÃ³nicas (6)  Groovy (19)  Humor (14)  Internet (48)  Juegos (26)  Noticias (111)  ProgramaciÃ³n (69)  Software (25)  Tutoriales (11)  Yo, programador (39)       Ãšltimos posts   Vitaminas para tu proyecto Java  JSONP, o la inserciÃ³n dinÃ¡mica de scripts que podrÃ­a sustituir a Ajax  Abierto el registro de Greach  Grails, enumerados, combos, i18n y otras historias  Consejos para el freelance de hoy   Ãšltimos comentarios Macluq on Vitaminas para tu proyecto Java albertovilches on JSONP, o la inserciÃ³n dinÃ¡mica de scripts que podrÃ­a sustituir a Ajax albertovilches on JSONP, o la inserciÃ³n dinÃ¡mica de scripts que podrÃ­a sustituir a Ajax jorge on JSONP, o la inserciÃ³n dinÃ¡mica de scripts que podrÃ­a sustituir a Ajax jmarranz on JSONP, o la inserciÃ³n dinÃ¡mica de scripts que podrÃ­a sustituir a Ajax  Social Networking   Twitter http://twitter.com/albertovilches  Facebook http://www.facebook.com/alberto.vilches1  Linkedin http://www.linkedin.com/in/albertovilches  Email      Alberto Vilches, 2006-2011. Todos los contenidos pueden utilizarse bajo licencia Creative Commons .  ProgramaciÃ³n  Groovy  Evangelizar  Tutoriales  CrÃ³nicas  ContrÃ¡tame  iPlayas.es   