         Home Sitemap Contact        Live Chat Careers                      Who we are - Mission and vision      Our History      Our People      Our Values      Our Strengths      Awards and Partnerships      Why Argentina?      Our Quality Policies      Featured Clients      Related Links        What we do - Outsourcing services      Software Development Outsourcing      Software Quality Outsourcing      Remote IT Solutions      Development Outsourcing for the Javaâ„¢ platform      .NET Outsourcing and Software Development      Mobile Solutions Development      Outsourced Graphic Design      Outsourced Language Localization        How we do it - Agile methodology      Methodology      Technology      Quality      Success Stories      Video Gallery        Careers - Work with us      Contact us - Learn more                         Desarrollo Aplicaciones MÃ³viles Sobre Celulares y Smartphones                             Home  Mobile Development R&D (Spanish)                     Mobile Development R&D (Spanish)     DocumentoÂ de InvestigaciÃ³n y AnÃ¡lisis de las CaracterÃ­sticas de los Dispositivos MÃ³viles Inteligentes (Smart Phones) Descargar PDF Â© Copyright Diciembre 2008 por Belatrix Software Factory BSF S.A. www.belatrixsf.com businessdevelopment@belatrixsf.com Phone: +1 (617) 608-1413 Ãndice 1.Â IntroducciÃ³n 1.1Â Acerca de Belatrix Software Factory Â 2.Â Cuotas de Mercado 2.1Â Cuota de mercado respecto a las ventas 2.2Â Comportamiento del mercado de EEUU en el 2008 3.Â Sistemas operativos para dispositivos mÃ³viles 3.1Â Symbian 3.1.1Â Desarrollando en Symbian OS 3.2Â Mac OS (iPhone) 3.2.1Â Desarrollando para iPhone 3.3Â RIM (Research in motion) 3.3.1Â Desarrollando para RIM 3.4Â Windows Mobile 3.4.1Â Desarrollando para Windows Mobile 3.5Â Linux 3.5.1Â Desarrollando para Android 4.Â ConclusiÃ³n 5. Referencias 1. IntroducciÃ³n Â Belatrix Software Factory como empresa lÃ­der en tecnologÃ­as de software viene desarrollando un profundo y extenso conocimiento sobre plataformas mÃ³viles por lo que ha encarado un proceso de investigaciÃ³n y desarrollo sobre estas tecnologÃ­as para ampliar aÃºn mÃ¡s Ã©sta Ã¡rea en la empresa. El presente documento contiene una investigaciÃ³n y un anÃ¡lisis sobre los principales sistemas operativos que se utilizan en los dispositivos mÃ³viles inteligentes (SmartPhones),Â  indicando sus cuotas de mercado correspondientes. TambiÃ©n se incluyen las caracterÃ­sticas tÃ©cnicas requeridas y los conocimientos (skills) para lograr desarrollos de aplicaciones que sean soportadas por los SmartPhones con los distintos SDK (Kits de desarrollo de software) disponibles.Â Â¿QuÃ© es un Smartphone?: Un Smartphone o dispositivo mÃ³vil inteligente, es un telÃ©fono celular con prestaciones superiores a las tÃ­picas, a menudo comparadas con las prestaciones de una PC. Sin embargo no hay un acuerdo entre los fabricantes acerca de esta definiciÃ³n, para algunos se trata de un telÃ©fono que corre un sistema operativo completo e identificable, que provee una interface estÃ¡ndar y una plataforma para desarrollo de aplicaciones. Para otros es simplemente un telÃ©fono mÃ³vil con funcionalidades avanzadas como: e-mail, Internet y/o un teclado integrado. A los efectos de este documento se tendrÃ¡ en cuenta la primera definiciÃ³n, ya que nos interesa conocer los sistemas operativos de cada plataforma y los procesos de desarrollo y publicaciÃ³n de software para cada una. 1.1Â  Acerca de Belatrix Software Factory Belatrix Software Factory es una compaÃ±Ã­a argentina dedicada al outsourcing o tercerizaciÃ³n de servicios de desarrollo de software, fundada en el aÃ±o 1.993 y completamente orientada desde el aÃ±o 2.001 a la provisiÃ³n de servicios de tercerizaciÃ³n internacional a clientes de diversos paÃ­ses tales como Estados Unidos, Canada y varios paÃ­ses de Europa y Escandinavia. Los servicios que presta son: Desarrollo de software a medida. Testing y aseguramiento de la calidad de software . DiseÃ±o grÃ¡fico . Soporte remoto de sistemas. Para contactar a Belatrix Software Factory: Â Â Â Â Â Â Â Â Â Â Â Â  e-mail: businessdevelopment@belatrixsf.com Â TelÃ©fono: +1 (617) 608â€“1413, interno 600 para el Ã¡rea comercial. Â Web: www.belatrixsf.com 2. Cuotas de Mercado 1 El mercado de los sistemas operativos para smartphones mundial es dominado por Symbian que dispone de una cuota de mercado del 57,1%, RIM (BlackBerry) es quien le sigue con una cuota del 17.4% y Windows Mobile es el tercero con el 12% del mercado mundial. Los sistemas basados en Linux tienen el 7.3% de cuota de mercado, aunque este nÃºmero es la suma de una serie bastante numerosa de distintas plataformas con grandes diferencias entre sÃ­, que utilizan mismo sistema operativo para el kernel. El sistema operativo de Apple, Mac OS, dispone a nivel mundial de un 2.8% de cuota de mercado aunque es de destacar que casi todas las ventas de iPhones (unico smartphone con MacOS) se han realizado en Estados Unidos, donde se ubica en el segundo puesto de ventas siendo superado solo por RIM. Open Handset Alliance's Android es un reciente sistema operativo para smartphones desarrollado por Google y T-Mobil, que debuto en el mercado con el HTC G1 el 22 de Octubre de 2008 y ha ganado el 4% del mercado de ventas en Estado Unidos en menos de un cuatrimestre. Es de destacar que el HTC G1 se vende como â€œversiÃ³n para desarrolladoresâ€ lo que denota la falta de madurez del sistema operativo. 2.1Â  Cuota de mercado respecto a las ventas El mercado de mÃ³viles de EEUUÂ  tiene la particularidad de tener una distribuciÃ³n totalmente diferente a la del resto del mundo, lo que puede verse en el siguiente grÃ¡fico (extraÃ­do de una publicaciÃ³n de symbian), otra particularidad es el mercado de JapÃ³n y China donde es importante la cantidad de mÃ³viles con sistemas operativos basados en distribuciones de Linux, sistema operativo que tiene muy poca presencia en el resto del mercado mundial: Â La apariciÃ³n del Iphone 3G, entre el 2do y 3er cuatrimestre del 2007, impulso las ventas de este smartphone en los Estados Unidos en forma sorprendente, en parte debido al respaldo de una fuerte campaÃ±a publicitaria y al uso intensivo de la pantalla Multi Touch. 2.2Â  Comportamiento del mercado de EEUU en el 2008 El dispositivo BlackBerry, que fabrica Research in Motion Ltd, aumentÃ³ su participaciÃ³n en el mercado estadounidense de telÃ©fonos multiuso durante el primer trimestre, mientras que el iPhone de Apple Inc perdiÃ³ terreno, segÃºn un reporte de International Data Corporation (IDC). SegÃºn el informe, la participaciÃ³n de RIM en el mercado estadounidense de telÃ©fonos avanzados (smartphones), creciÃ³ a un 44,5 por ciento en el primer trimestre, desde un 35,1 por ciento del cuarto trimestre aÃ±o pasado. En tanto, la cuota de mercado del iPhone de Apple retrocediÃ³ a un 19,2 por ciento desde un 26,7 por ciento del cuarto trimestre. Motorola Inc, el principal fabricante de telÃ©fonos en Estados Unidos, tambiÃ©n vio disminuir sus ventas a un 2,6 por ciento en el mercado de telÃ©fonos multiuso, desde un 7,5 por ciento en el cuarto trimestre. Palm Inc. vio avanzar su participaciÃ³n a un 13,4 por ciento desde un 7,9 en el cuarto trimestre. Mientras, la de Samsung Electronics Co Ltdâ€™s subiÃ³ a un 8,6 por ciento, desde un 5,1 por ciento, indicÃ³ IDC. La participaciÃ³n de High Tech Computer Corpâ€™s (principal fabricante de mÃ³viles con Windows Mobile) bajÃ³ a un 4,1 por ciento desde un 7,9 por ciento en el trimestre anterior y finalmente Android hizo su apariciÃ³n en el mercado de EEUU con un dispositivo que se vende como â€œVersiÃ³n para desarrolladoresâ€ ganando un 4% de las ventas del Ãºltimo trimestre de este aÃ±o. 3. Sistemas operativos para dispositivos mÃ³viles A continuaciÃ³n,Â  se detallan las caracterÃ­sticas mÃ¡s relevantes de los principales sistemas operativos para mÃ³viles:Â 3.1Â  Symbian Es un sistema operativo propietario diseÃ±ado para telÃ©fonos mÃ³viles, con librerÃ­as asociadas e interface de usuario. Desciende de Psion EPOC y corre exclusivamente en procesadores ARM, es producido por Symbian Ltd, sociedad formada por Nokia (47.9%), Ericsson (15.6%), Sony Ericsson (13.1%), Panasonic (10.5%), Siemens AG (8.4%) y Samsung (4.5%). Es un Sistema Operativo basado en ROM que ha sido diseÃ±ado para ahorrar baterÃ­a. Symbian estÃ¡ basado en un micro kernel, una mÃ­nima porciÃ³n del sistema tiene privilegios de kernel, el resto se ejecuta con privilegios de usuario y es tarea del kernel manejar las interrupciones y prioridades. En Symbian, cada aplicaciÃ³n corre en sus propios procesos y tiene acceso solo a su propio espacio de memoria. Este diseÃ±o hace que las aplicaciones para Symbian sean orientadas a â€œsingle threadsâ€ y no â€œmulti threadsâ€. Algo para destacar es que el sistema posee componentes que permiten el diseÃ±o de aplicaciones multiplataforma, esto es diferentes tamaÃ±os de pantalla, color, resoluciÃ³n, teclados, etc. La mayorÃ­a de estos componentes han sido diseÃ±ados en C++. El diseÃ±o del sistema operativo permite que los aparatos con Symbian puedan estar en funcionamiento constante sin necesidad de ser reseteados, preservando la informaciÃ³n del usuario y funcionando correctamente (probado en laboratorio). Aunque esto Ãºltimo se estÃ¡ comprometiendo debido a la complejidad de los Ãºltimos equipos con Symbian y a la multitud de programas externos al SO. Si bien no es un software Open Source, las APIs disponen de documentaciÃ³n pÃºblica y hasta la versiÃ³n 8.1 cualquiera podÃ­a desarrollar software para Symbian, desde la version 9.1 se introducen el Framework de Seguridad y algunas funcionalidades que exigen a los desarrolladores firmar digitalmente sus aplicaciones. Si bien funcionalidades bÃ¡sicas (Como la escritura de archivos) pueden ser habilitadas por el usuario, otras mÃ¡s avanzadas (Como el acceso a los dispositivos multimedia) necesitan certificaciÃ³n y firma mediante el programa de firmas de Symbian (Symbian Signed), que usan empresas independientes o fabricantes de telÃ©fonos para la certificaciÃ³n. El certificado â€œTrustCenter ACS Publisher ID Certificateâ€ es requerido para que los desarrolladores puedan firmar sus aplicaciones con el software â€œTest Houseâ€, proceso que no es gratis (el costo del certificado ronda los u$s200 anuales). Symbian SignedÂ  provee certificaciÃ³n y firmado gratis solo para aplicaciones freeware mediante el software Cellmania. 3.1.1Â  Desarrollando en Symbian OS Symbian cuenta con cinco interfaces de usuario o plataformas para su sistema operativo, las denominadas Serie 60, Serie 80, Serie 90, UIQ y MOAP. La mayorÃ­a de los mÃ³viles utilizan la Serie 60, todos los de Sony Ericsson trabajan bajo UIQ, asÃ­ como Motorola. El lenguaje nativo de Symbian OS es el C++ aunque no en una implementaciÃ³n estÃ¡ndar. Existen mÃºltiples SDKs (Software Development Kit) para el desarrollo de aplicaciones, siendo los principales UIQ y S60. Algunos fabricantes ofrecen SDKs propios o extensiones a los SDK para sus productos o para familias de productos que se pueden bajar de los sitios web. Los SDK oficiales contienen documentaciÃ³n, los headers, las librerias necesarias para compilar un software Symbian, emuladores basados en Windows y un compilador. Hasta la versiÃ³n 8 se incluye como compilador GCC, la versiÃ³n 9 usa una nueva ABI (application binary interface) y requiere un compilador distinto. La programaciÃ³n en C++ para Symbian requiere el uso de tÃ©cnicas especiales como descriptores o CleanupStack, esto puede hacer que programas relativamente simples sean mÃ¡s difÃ­ciles de implementar que en otros entornos. Actualmente las tÃ©cnicas de programaciÃ³n necesarias para desarrollar en Symbian hacen que los programas sean propensos a errores en rutinas de bajo nivel en lugar de errores en las funcionalidades especÃ­ficas de la aplicaciÃ³n. El primer IDE oficial y comercial para Symbian, Codewarrior, fue reemplazado durante el 2006 por Carbide c++ un IDE basado en Eclipse desarrollado por Nokia que se ofrece en tres versiones: Carbide.c++ OEM Edition for device creation users. Carbide.c++ Professional Edition for developers working with preproduction devices. Carbide.c++ Developer Edition for application development on production phones. Todas estas versiones son â€œfree of chargeâ€ segÃºn se informa en la pÃ¡gina web â€œforum.Nokia.comâ€ desde donde se puede descargar tanto el IDE como el SDK s60. Microsoft Visual Studio 2003 y 2005 tambiÃ©n es soportado como IDE de desarrollo a travÃ©s del plug in Carbide.vs. Muchos de los dispositivos con Symbian OS ademas de C++ pueden ser programados en OPL, Python, Visual Basic, Simkin y Perl, asi como en Java ME. El plug in para Visual Studio de AppForge llamado â€œAppForge CrossFireâ€ que permitia programar en un dispositivo Symbian en Visual Basic, VB.NET o C# dejo de estar disponible en el 2007 cuando Oracle compro la propiedad intelectual de AppForge y anuncio que no tiene planeado vender o prestar soporte a los viejos productos de esta empresa. Finalmente tambiÃ©n existe una versiÃ³n del IDE de Borland para Symbian, asÃ­ como herramientas o tÃ©cnicas desarrolladas por la comunidad para programar en Linux o MacOS. 3.2Â  Mac OS (iPhone) El sistema operativo de iPhone/iPod Touch se ha basado, como no podÃ­a ser de otra manera, en su hermano mayor Mac, conformado por la siguiente arquitectura de capas: Core OS, Core Services y Media son una copia exacta del cÃ³digo fuente de Mac OSX y la Ãºnica que ha sufrido algunas variaciones ha sido Cocoa, ya que en Mac OSX, Cocoa se limitaba al uso del ratÃ³n y teclado y es por ello que para adaptarse al uso de iPhone y su pantalla tÃ¡ctil haya sido modificada, y como resultado se ha llamado ahora Cocoa Touch. CORE OS: Los pilares de este sistema operativo de iPhone residen aquÃ­ y lo forman: el kernel de OSX, sistema de bibliotecas la pila TCP / IP sockets seguridad gestiÃ³n de energÃ­a keychain certificados sistemas de archivos Bonjour CORE SERVICES: Son los servicios bÃ¡sicos del sistema y consta de: colecciones agenda de direcciones redes acceso a archivos sqlite (base de datos) core location net services threading preferencias utilidades de URL MEDIA: Capa de gestiÃ³n multimedia (grÃ¡ficos, audio, videos, etc) se compone de: Core Audio openAL, mezclador de sonido, grabaciÃ³n de audio reproducciÃ³n de video manejo de jpg, png, tiff, pdf quartz (2d) Core Animation OpenGL ES Cocoa Touch, el framework de desarrollo para iPhone/iPod Touch: eventos y controles multi touch soporte del acelerÃ³metro vista jerÃ¡rquica localizaciÃ³n de aplicaciones alertas vista web selector de contactos selector de imÃ¡genes soporte de la cÃ¡mara 3.2.1Â  Desarrollando para iPhone El sistema operativo del iPhone es, en esencia, el mismo que usan las Mac desde hace casi diez aÃ±os, un Unix BSD sÃºper cargado. El sistema operativo fue desarrollado por NeXT, empresa que tambiÃ©n desarrollo un novedosÃ­simo (para entonces) framework de programaciÃ³n orientado a objetos. Ese framework evolucionÃ³ en lo que hoy conocemos como Cocoa, especÃ­ficamente Cocoa Touch en el caso del iPhone, la base sobre la que se construye cualquier aplicaciÃ³n nativa para el iPhone/iPod Touch. Para que el SDK del iPhone compile cÃ³digo ARM que es la arquitectura del sistema real es necesario firmar la aplicaciÃ³n, lo que requiere la certificaciÃ³n de Apple. Una nueva firma es necesaria para distribuir la aplicaciÃ³n y por supuesto, si queremos que esta estÃ© disponible en el appStore (pÃ¡gina oficial de distribuciÃ³n de aplicaciones para el entorno MacOS) deberemos solicitar la aprobaciÃ³n de Apple. El proceso completo para desarrollar, compilar y publicar una aplicaciÃ³n para el iPhone es el siguiente: 2 Inscribirse en el iPhone Dev Center, aceptar todas las condiciones legales, y descargar el SDK. Haciendo esto podemos empezar a escribir nuestras aplicaciones, compilarlas y probarlas en el simulador. Pero todavÃ­a NO podremos instalarlas en nuestro iPhone. Inscribirse en el programa para desarrolladores. DespuÃ©s de completar todos los formularios y leer mÃ¡s legales, podemos enviar la solicitud y esperar la respuesta hasta el siguiente dÃ­a laboral. Esto tiene un costo de U$S99, y con Ã©l obtenemos el derecho a ejecutar nuestras aplicaciones en nuestro propio iPhone. Certificados. Por defecto, un iPhone tan solo puede ejecutar aplicaciones firmadas por Apple y como no es posible estar enviÃ¡ndoles el cÃ³digo cada vez que se quiere probar algo, es necesario crear un perfil con el identificador de nuestro telÃ©fono (accesible mediante las Xcode) e introducirlo en un formulario de la web de Apple. Luego para generar el certificado con el que firmar nuestras aplicaciones vamos a â€œKeychain Accessâ€ y en â€œAsistente para Certificadosâ€ generaremos uno nuevo. Si todo ha ido bien ya podremos experimentar nuestras aplicaciones en el iPhone. Â¡Desarrollar! Hasta no hace mucho, se prohibÃ­a a los desarrolladores hablar sobre el SDK, lo que dificultaba enormemente el desarrollo en sÃ­. Trabajar con cualquier plataforma nueva conlleva dificultades que habitualmente se resuelven en foros y grupos para desarrolladores. Por suerte, Apple ha abandonado esta polÃ­tica tan cerrada y ahora se puede intercambiar cÃ³digos, conocimientos, etc. Â¡Distribuir! Para distribuir es necesario otro certificado especial de distribuciÃ³n que hay que solicitar siguiendo el mismo proceso de antes. Acceder a Keychain Access, solicitar, aprobar, descargar e instalar. Al igual que en el punto 3, tambiÃ©n necesitamos hacer funcionar un nuevo perfil de distribuciÃ³n en Xcode; proceso sobre el que Apple facilita muchas pÃ¡ginas de informaciÃ³n con toda clase de capturas en las que se detalla el modo de reconfigurar el proyecto de Xcode para que utilice este certificado de distribuciÃ³n. Enviar la aplicaciÃ³n a Apple a travÃ©s de un nuevo formulario web con informaciÃ³n sobre esta (nombre, descripciÃ³n, versiÃ³nâ€¦), su icono y algunas capturas de pantalla.Â Esperarâ€¦ Una vez enviada, la aplicaciÃ³n pasa a la cola de revisiÃ³n, sin que sepamos en ningÃºn momento lo que se estÃ¡ haciendo, el estado de la solicitud, o cuanto queda para que termine el proceso. Si la aplicaciÃ³n no es aceptada por el motivo que sea, no habrÃ¡ ayuda al respecto, solo se puede hacer los arreglos necesarios y volverla a enviar a travÃ©s de un enlace con el que enviamos nuevas versiones de una misma aplicaciÃ³n. Si los problemas continÃºan, habrÃ¡ que esperar una semana para saberlo y ver si la soluciÃ³n que has dado resuelve satisfactoriamente el problema. Â¡Â¡Aceptada!! Ahora queda esperar que dÃ© frutos la aplicaciÃ³n frente de los 10 millones de clientes potenciales que la podrÃ¡n comprar. Desarrolando en Cocoa Touch, la plataforma de desarrollo para el iPhone. 3 Cocoa es una API escrita en un dialecto especial de C llamado Objective-C. En particular, cuando desarrollamos para el iPhone/iPod Touch, usamos Cocoa Touch. La diferencia bÃ¡sica entre Cocoa y Cocoa Touch es la forma en la que el usuario invoca comandos. En Cocoa tenemos un teclado fÃ­sico y un mouse o trackpad, en Cocoa Touch usamos un teclado virtual y nuestros dedos directamente sobre la pantalla. Por encima de la API en sÃ­ nos encontramos con las herramientas que forman parte del entorno de desarrollo de la plataforma: Xcode: Xcode es la pieza esencial del entorno. Es un IDE muy completo, en el que podemos editar cÃ³digo fuente, acceder a un vasto volumen de documentaciÃ³n, y hasta un debugger grÃ¡fico. Xcode estÃ¡ construido por numerosos mÃ³dulos Open Source (como el compilador gcc y el debugger gdb). Instruments: Instruments sirve para monitorear la aplicaciÃ³n en desarrollo y sintonizar finamente su performance, en un maravilloso entorno grÃ¡fico. Instruments estÃ¡ basado en DTrace, una herramienta Open Source desarrollada por Sun Microsystems. Es esencial a la hora de identificar pÃ©rdidas de memoria y otros bugs difÃ­ciles de rastrear. Dashcode: Dashcode fue diseÃ±ada para desarrollar widgets para el Dashboard de Mac OS X. La versiÃ³n del SDK de iPhone/iPod Touch es bÃ¡sicamente la misma que la de Mac OS X, y fue incluida para facilitar el desarrollo de aplicaciones Web para el iPhone. Simulator: el simulador de iPhone permite probar las funcionalidades bÃ¡sicas de la aplicaciÃ³n en desarrollo. El simulador corre un sistema operativo parecido al real. Cuando se trabaja con el simulador, Xcode compila para x86, en lugar de ARM (que es la arquitectura del sistema real). Para compilar cÃ³digo ARM es necesario firmar la aplicaciÃ³n, lo que requiere la certificaciÃ³n de Apple. Interface Builder: Su uso elemental es el desarrollo de la Interface Humana (GUI), sin embargo es mucho mÃ¡s que eso. IB es donde los diferentes mÃ³dulos se conectan, y es tambiÃ©n donde se le da vida a muchos de los mÃ³dulos precompilados que se verÃ¡n en la pantalla. XCODE: Xcode es el motor que le brinda poder al ambiente integrado de desarrollo de Apple para Mac OS X y para iPhone OS.Â  TambiÃ©n es una aplicaciÃ³n que se encarga de la mayorÃ­a de los detalles del proyecto desde el inicio hasta el despliegue que permite: Crear y manejar proyectos, incluyendo plataformas de especificaciÃ³n, requerimientos de objetivo, dependencias, y configuraciones de la estructura. Escribir cÃ³digo fuente en editores con caracterÃ­sticas tales como coloreo de sintaxis e identaciÃ³n automÃ¡tica. Navegar y buscar a travÃ©s de los componentes de un proyecto, incluyendo los archivos de encabezado y de documentaciÃ³n. Construir el proyecto. Depurar el proyecto de forma local, en el simulador iPhone OS, o remotamente, en un depurador grÃ¡fico a nivel de fuente. Xcode construye proyectos desde cÃ³digo fuente escrito en C, C++, Objective-C, y Objective-C++.Â  Este genera ejecutables de todos los tipos soportados en Mac OS X, incluyendo herramientas de lÃ­nea de comando, marcos de trabajo, plug-ins, extensiones kernel, colecciones (bundles), y aplicaciones.Â  (Para iPhone OS, sÃ³lo son posibles aplicaciones ejecutables.)Â  Xcode permite una personalizaciÃ³n casi ilimitada de herramientas de construcciÃ³n y de depuraciÃ³n, paquetes ejecutables (incluyendo lista de informaciÃ³n de propiedades y colecciones localizadas), construir procesos (incluyendo archivos copiar, archivos script, y otras fases de construcciÃ³n), y la interfaz de usuario (incluyendo editores de cÃ³digo separados y multi-vistas).Â  TambiÃ©n soporta varios sistemas de manejo de cÃ³digo fuente como CVS, Subversion, y Perforce-permitiÃ©ndole aÃ±adir archivos a repositorios, efectuar cambios, obtener versiones actualizadas, y comparar versiones. Xcode estÃ¡ diseÃ±ado especialmente para desarrollo en Cocoa.Â  Cuando creamos un proyecto, Xcode configura su ambiente de desarrollo inicial usando plantillas de proyectos correspondientes a tipos de proyectos Cocoa: aplicaciÃ³n, aplicaciÃ³n basada en documentos, aplicaciÃ³n Core Data, herramienta, colecciÃ³n, marco de trabajo, y otros.Â  Para compilar software Cocoa para Mac OS X, Xcode usa el compilador GNU (gcc), y para depurar ese software, usa el depurador de nivel fuente GNU.Â  Ambos gcc y gdb han sido usados en el desarrollo Cocoa desde que Cocoa era NeXTSTEP, y a lo largo de los aÃ±os ha sido refinado, extendido, y afinado para soportar la compilaciÃ³n y la depuraciÃ³n de binarios Cocoa. 3.3Â  RIM (Research in motion) BlackBerry RIM SDK (BlackBerry Research In Motion Software Development Kit) es el entorno para construir aplicaciones para los dispositivos inalÃ¡mbricos BlackBerry. El lenguaje de programaciÃ³n utilizado es J2ME, esta es la plataforma de java para dispositivos mÃ³viles. El uso de los dispositivos Blackberries es popular en el segmento de negocios y no tanto en el segmento de hogares o publico general, por ello el SDK estÃ¡ orientado fuertemente al desarrollo de este tipo de aplicaciones. AdemÃ¡s de las librerÃ­as estÃ¡ndar CLDC y MIDP, RIM provee algunas librerÃ­as muy Ãºtiles como: net.rim.device.api que provee acceso a funcionalidades especificas para el hardware RIM. Dentro de este paquete hay clases para monitorear los puertos COM, la radio, el teclado o el â€œthumb wheelâ€. EL paquete net.rim.device.api.util incluye construcciones muy Ãºtiles como vectores ordenados, vectores clonables, buffers de datos y otros. La librerÃ­a net.rim.device.api.system.mobitex es usada para obtener informaciÃ³n de la red Mobitex (red usada por los dispositivos BlackBerry). El SDK tambiÃ©n incluye un IDE que soporta debugging y el emulador necesario para esto. 3.3.1Â  Desarrollando para RIM RIM provee un sistema operativo propietario, multitarea para los dispositivos BlackBerrys que hace uso intensivo de los dispositivos de entrada como el teclado y el trackball. El sistema operativo provee soporte para MIDP 1.0 y 2.0 (a partir de la versiÃ³n 4) asÃ­ como para WAP 1.2. Cualquier desarrollador puede escribir software usando las APIs propietarias de BlackBerry, pero para que una aplicaciÃ³n pueda acceder a ciertas funcionalidades restringidas debe estar firmado digitalmente con un certificado asociado a una cuenta de desarrollador en RIM, este proceso garantiza la procedencia de las aplicaciones, no asÃ­ la calidad del cÃ³digo. 3.4Â  Windows Mobile 4 Windows Mobile es el sistema operativo de Microsoft destinado a dispositivos mÃ³viles. La evoluciÃ³n de Windows Mobile, que se puede encontrar en Wikipedia, refleja la evoluciÃ³n de los dispositivos de bolsillo durante los Ãºltimos aÃ±os. BÃ¡sicamente se originÃ³ en una versiÃ³n del kernel de Windows para sistemas embebidos que fue creciendo hasta ser un sistema operativo para ordenadores de bolsillo Pocket PCs (PPC) y smartphones. PocketPC es un estÃ¡ndar de Microsoft que impone varios requisitos al hardware y al software de dispositivos mÃ³viles. Cualquier dispositivo que sea clasificado como un PocketPC debe: Ejecutar el sistema operativo Microsoft Windows CE o Windows Mobile (versiÃ³n PocketPC) Tener un conjunto de aplicaciones en ROM Incluir una pantalla sensible al tacto Incluir un dispositivo apuntador, llamado stylus o estilete Incluir un conjunto de botones de hardware para activar aplicaciones Estar basado en un procesador compatible con el STRONGARM Algunas de las aplicaciones que se incluyen con estos dispositivos son versiones reducidas de: Outlook, Internet Explorer, Word, Excel, Windows Media Player, etc.. Pocket PC Phone Edition ademÃ¡s de los requisitos anteriores incluye radio/s para telefonÃ­a celular. Un SmartPhone para Microsoft es un Pocket PC Phone Edition generalmente sin â€œtouch screenâ€. 3.4.1Â  Desarrollando para Windows Mobile Microsoft provee en forma gratuita el â€œWindows Mobile 6 Professional and Standard Software Development Kits Refreshâ€ SDK que incluye todo lo necesario para el desarrollo de aplicaciones en la plataforma Windows Mobile, pero para instalarlo necesitaremos, como se indica en la secciÃ³n de requisitos de la pÃ¡gina de descargas, el Microsoft Visual Studio 2005 Standard Edition o superior (No estÃ¡ soportado el Visual Estudio Express Editions), esto implica que para desarrollar en WM sea necesario adquirir una licencia de Visual Studio 2005 o superior. Una vez descargado e instalado el SDK tendremos todo lo necesario para realizar aplicaciones para WM6 incluyendo emuladores (imÃ¡genes ROM) para los distintos tamaÃ±os de pantalla de los dispositivos en mercado. Se pueden desarrollar dos tipos de aplicaciones para Windows Mobile: con cÃ³digo nativo o con cÃ³digo administrado (managed code). Llamamos cÃ³digo nativo al cÃ³digo C++ que utiliza directamente la API de Windows Mobile, y cÃ³digo administrado al que utiliza las clases del .NET Compact Framework con C# o VB.Net. (Windows Mobile es la Ãºnica plataforma mÃ³vil importante que no soporta J2ME). Â¿Las diferencias entre ambas? El cÃ³digo nativo es mÃ¡s rÃ¡pido y ocupa menos, ademÃ¡s de proporcionar acceso a algunas caracterÃ­sticas del hardware que son inaccesibles desde el Compact Framework. Sin embargo, en la mayor parte de los casos desarrollar cÃ³digo administrado es la mejor opciÃ³n. El tamaÃ±o del ejecutable es cada vez menos importante, y si la velocidad es un factor crÃ­tico siempre se puede optar por programar en cÃ³digo nativo las partes de la aplicaciÃ³n que supongan un cuello de botella. Por lo demÃ¡s, el desarrollo en .NET resulta mucho mÃ¡s fÃ¡cil y cÃ³modo. El desarrollo de aplicaciones para Windows Mobile presenta como inconvenientes la falta de alternativas al Visual Studio y el consiguiente desembolso econÃ³mico necesario para adquirir una licencia. Por otra parte, el lado positivo se encuentra tanto en la calidad de las herramientas disponibles (el propio Visual Studio, los emuladores, la SDK y su documentaciÃ³nâ€¦) como en la activa comunidad de desarrolladores existente y agrupada en torno al portal de desarrollo de Microsoft, la MSDN. 3.5Â  Linux En los Ãºltimos aÃ±os, muchas compaÃ±Ã­as relacionadas con el mundo de la movilidad, fabricantes y desarrolladores de software y aplicaciones han optado por utilizar Linux como base para sus sistemas operativos. JapÃ³n y China son los paÃ­ses donde Linux mÃ³vil estÃ¡ mÃ¡s implantado, llegando a conseguir una cuota del 40% del mercado. En la actualidad, hay un buen nÃºmero de iniciativas de adaptaciÃ³n de Linux a terminales mÃ³viles y a continuaciÃ³n, se revisaran brevemente las plataformas Linux mÃ¡s populares: LiMo (Linux Mobile) Foundation: Es una alianza fundada por Motorola, NEC, NTT DoCoMo, Panasonic Mobile Communications, Samsung Electronics, y Vodafone en enero de 2007 para desarrollar la plataforma LiMo, una plataforma basada en Linux para dispositivos mÃ³viles. Desde entonces, nuevos miembros se han unido a la fundaciÃ³n, entre los que se encuentran Infineon Technologies, Mozilla, SFR y Verizon Wireless. LiMo anunciÃ³ a finales de marzo de 2008 el lanzamiento de LiMo Release 1 (sistema operativo bÃ¡sico y sin aplicaciones que ya estÃ¡ disponible en dos telÃ©fonos comerciales, el Razr 2 y el Rokr E8 de Motorola).Â  A principios de 2009 se espera el lanzamiento de la Release 2, que mejorarÃ¡ la portabilidad, y sus capacidades multimedia. Â OpenMoko: Es un proyecto para crear una plataforma para smartphones usando software libre. Utiliza el nÃºcleo de Linux, junto con un entorno grÃ¡fico de usuario construido con el servidor X.Org, el toolkit GTK+ y el gestor de ventanas Matchbox. EstÃ¡ basado en el framework de OpenEmbedded y el sistema de paquetes ipkg. OpenMoko se anunciÃ³ en 2006 por sus fundadores: First International Computer (FIC). El primer smartphone en el que funciona OpenMoko es el Neo1973, fabricado por FIC. MOTOMAGX: Es un sistema operativo para mÃ³viles desarrollado por Motorola. Este sistema es una combinaciÃ³n de Linux y Java. La plataforma MOTOMAGX tiene una arquitectura modular que incluye los siguientes componentes: â€¢Â  Sistema operativo Linux. Este sistema operativo incorpora paquetes de la comunidad de cÃ³digo abierto y componentes adicionales para satisfacer los requerimientos de los dispositivos mÃ³viles. Los primeros productos basados en MOTOMAGX son el MOTOROKRTM Z6, MOTORAZR2 V8, MOTOTM U9 y el recientemente anunciado MOTOROKR E8. â€¢Â  Plataforma de librerÃ­as y servicios middleware. Proporciona servicios a la plataforma y gestiona el ciclo de vida de la aplicaciÃ³n, las interacciones de las aplicaciones y la seguridad de la plataforma. â€¢Â  Entorno de aplicaciÃ³n (Java ME, WebUI, native Linux). Los entornos de aplicaciÃ³n incluyen las APIs y servicios necesarios. â€¢Â  Aplicaciones. Las aplicaciones proporcionan al usuario experiencia a travÃ©s de interacciones con el resto de componentes. Access Linux Platform (ALP): Es un sistema operativo basado en Linux para smartphones capaces de ejecutar aplicaciones PALM OS. Esta plataforma es de la empresa Access, que adquiriÃ³ en 2005 los derechos de Palm OS. En verano de 2008, el operador mÃ³vil Orange habÃ­a anunciado el lanzamiento del primer dispositivo comercial, el Samsung i800, proyecto que finalmente fue suspendido. Â ARM Linux Mobile Platform: ARM y seis empresas mÃ¡s, entre las se encuentran Texas Instruments, Samsung, Marvell o Mozilla estÃ¡n creando una plataforma software estÃ¡ndar basada en cÃ³digo abierto de Linux especialmente diseÃ±ada para dispositivos mÃ³viles. La previsiÃ³n es poder presentar los primeros dispositivos Linux durante el 2009. Qtopia: Es una plataforma de aplicaciones para dispositivos mÃ³viles que utilizan Linux como sistema operativo, desarrollada por la empresa Trolltech. Existen dos categorÃ­as de QtopÃ­a, una libre, bajo licencia GPL (Opie), y otra comercial; asÃ­ como dos ediciones, una para telÃ©fonos mÃ³viles y otra para PDAs. Qtopia se instala en numerosos dispositivos mÃ³viles de Sharp Corporation de la lÃ­nea de productos Zaurus, que incluye mÃ¡s de diez modelos. TambiÃ©n la empresa Archos lo incluye en el PMA430, un dispositivo multimedia. La ediciÃ³n para telÃ©fonos mÃ³viles se espera que estÃ© pronto disponible en numerosos aparatos. Android: Es una plataforma software basada en Linux para dispositivos mÃ³viles que incluye un sistema operativo, middleware y aplicaciones clave. Esta plataforma estÃ¡ siendo desarrollada por Google y el Open Handset Alliance. Permite a los desarrolladores escribir cÃ³digo en Java usando librerÃ­as de software desarrolladas por Google, pero no soporta programas en cÃ³digo nativo. La plataforma Android fue anunciada en noviembre 2007 con el Open Handset Alliance, un consorcio de 34 compaÃ±Ã­as de hardware, software y tele comunicaciones dedicadas al avance de estÃ¡ndares abiertos para dispositivos mÃ³viles. Android proporciona un paquete completo de software a todos los niveles: â€¢Â  Un kernel linux que sirve como base de la pila de software y se encarga de las funciones mÃ¡s bÃ¡sicas del sistema: gestiÃ³n de drivers, seguridad, comunicaciones, etc. â€¢Â  Una capa de librerÃ­as de bajo nivel en C y C++. â€¢Â  Un framework para el desarrollo de aplicaciones, dividido en subsistemas para gestiÃ³n del sistema como el "package manager"; gestion del hardware del telÃ©fono anfitriÃ³n ("telephony manager") o acceso a APIs sofisticadas de geolocalizaciÃ³n o mensajerÃ­a XMPP. TambiÃ©n incluye un sistema de vistas para manejar el interfaz de usuario de las aplicaciones, que incluyen posibilidad de visualizaciÃ³n de mapas o renderizado html directamente en el interfaz grÃ¡fico de la aplicaciÃ³n. â€¢Â  Una suite de aplicaciones (navegador, agenda, gestiÃ³n del telÃ©fono). Las aplicaciones Android estÃ¡n programadas en Java, pero no corriendo sobre Java ME, sino sobre Dalvik, una mÃ¡quina virtual Java desarrollada ex profeso por Google y optimizada para dispositivos embebidos. Android permite a los desarrolladores escribir cÃ³digo manejado en un lenguaje similar a Java que utiliza librerÃ­as java desarrolladas por Google, pero que no soporta desarrollos en cÃ³digo nativo. Casi toda la plataforma Android fue liberada en 2008 bajo la licencia â€œApache free-software and open-sourceâ€. El primer telÃ©fono que usa Android es el HTC G1 Dream y se vende como â€œVersiÃ³n para desarrolladoresâ€. En resumen, aparte de las plataformas Linux mencionadas anteriormente se encuentran otras como el proyecto Ubuntu Mobile and Embedded que tambiÃ©n intenta ser una versiÃ³n del sistema operativo Ubuntu Linux adaptado para funcionar en dispositivos mÃ³viles. Si bien muchas marcas participan en los proyectos de desarrollo de sistemas operativos para mÃ³viles basados en Linux la cuota de mercado de este sistema operativo es solo significativa en JapÃ³n y China (utilizado por algunos dispositivos Motorola muy populares en estos paÃ­ses) donde es la competencia directa de Symbian con un market share de aproximadamente 40% si se suman los mÃ³viles de las distintas arquitecturas basadas en Linux. Ahora mismo hay una gran expectativa ante la plataforma de Google, Android. Lo que se espera es que, con Android, exista un estÃ¡ndar abierto de plataforma mÃ³vil que evite la fragmentaciÃ³n de los sistemas operativos y dispositivos. La pregunta que surge es: Â¿PodrÃ¡ Google, con su potente plataforma, Android, acabar con la fragmentaciÃ³n e imponerse ante los grandes gigantes de los dispositivos mÃ³viles? 3.5.1Â  Desarrollando para Android Se puede desarrollar una aplicaciÃ³n Android con las mismas herramientas utilizadas para desarrollar en Java. Las "Android core libraries" proveen las funcionalidades necesarias para construir impresionantes y poderosas aplicaciones para dispositivos mÃ³viles. El "Android SDK" soporta Windows XP, Windows Vista, Linux y Mac OS y utiliza como IDE de desarrollo a Eclipse mediante el plug in "Android Development Tools (ADT)â€ aunque es posible utilizar Apache Ant para entornos Mac o Linux AnatomÃ­a de una aplicaciÃ³n Android 5: Las aplicaciones Android estÃ¡n constituidas a partir de la combinaciÃ³n de los siguientes bloques: â€¢ Activity: Una "actividad" es el bloque mÃ¡s usado en las aplicaciones "Android". Generalmente,Â  una "actividad" es una pantalla individual en tu aplicaciÃ³n. Cada "actividad" se implementa como una clase que hereda de "Activity", lo que harÃ¡ que la clase despliegue una UI compuesta de "Viewsâ€ y responda a eventos. Lo comÃºn es que una aplicaciÃ³n consista en mÃºltiples pantallas. Por ejemplo, una aplicaciÃ³n de mensajerÃ­a podrÃ­a usar una pantalla para mostrar el listado de contactos y en una segunda pantalla para escribir el mensaje al contacto seleccionado; y otras pantallas para ver y/o cambiar la configuraciÃ³n. Cada una de estas pantallas debe ser implementada como una "Activity". La navegaciÃ³n entre las pantallas se hace iniciando una nueva "Activity". En algunos casos, una "Activity" podrÃ­a devolver un valor a la "Activity" anterior, por ejemplo la "Actividad#1" podrÃ­a permitir seleccionar una foto y esta foto serÃ­a devuelta a la "Activity" que hizo el llamado a "Actividad#1". Cuando una pantalla es abierta, la previa es puesta en pausa y agregada al "History Stack". Posteriormente, el usuario puede navegar hacia pantallas previas invocando las pantallas almacenadas en el "History Stack". Las pantallas tambiÃ©n pueden ser removidas del "History Stack" cuando resulta inapropiado su almacenamiento. Android mantiene un "History Stack" por cada una de las aplicaciones que son activadas desde la "Home Screen". â€¢ Intent y IntentFilter: Android usa una clase especial llamada "Intent" para moverse de una pantalla a otra. Un "Intent" describe lo que una aplicaciÃ³n desea hacer. Las dos partes mÃ¡s importantes de la estructura de datos de un "Intent" son la acciÃ³n y los datos sobre los cuales se actuarÃ¡. Los valores tÃ­picos para la acciÃ³n son "MAIN", "VIEW", "PICK", "EDIT", etc. Los datos son expresados como una URI. Por ejemplo, para ver la informaciÃ³n de contacto de una persona podrÃ­a ser necesario crear un "Intent" con la acciÃ³n "VIEW" y los datos definidos como una URI que representa a esa persona. Una clase relacionada con "Intent" es "IntentFilter". Si bien un "Intent" es una solicitud para realizar algo, un "IntentFilter" es una descripciÃ³n de lo que intenta hacer una "Activity" (o de lo que intenta recibir). Una "Activity" que es capaz de desplegar la informaciÃ³n de contacto de una persona podrÃ­a declarar que sabe cÃ³mo tratar la acciÃ³n "VIEW" cuando es aplicada a los datos que representan a la persona. Una "Activity" declara sus "IntentFilter"s en el archivo "AndroidManifest.xml". La navegaciÃ³n de pantalla a pantalla es ejecutada a travÃ©s de la resoluciÃ³n de intentos. Para navegar hacia adelante, una "Activity" llama "startActivity(myIntent)". Entonces, el sistema examina todos los "IntentFilter"s que existen para las aplicaciones instaladas y toma aquellas "Activity" cuyos "IntentFilter" mejor se acercan a "myIntent". La nueva "Activity" es informada del "Intent", lo que causa que sea activada. El proceso de resoluciÃ³n de "Intent" ocurre en tiempo de ejecuciÃ³n cuando "startActivity" es llamado, lo cual tiene dos beneficios claves: Una "Activity" puede reutilizar funcionalidades de otras componentes con sÃ³lo hacer un una solicitud en la forma de "Intent". Una "Activity" puede ser reemplazada en cualquier momento por una nueva "Activity" que tenga un "IntentFilter" equivalente. â€¢ IntentReceiver: Se puede utilizar un "IntentReceiver" cuando queramos programar una aplicaciÃ³n para que se ejecute como respuesta a un evento. Por ejemplo, cuando recibes una llamada, cuando la red de datos estÃ¡ disponible o cuando es media noche. Los "IntentReceiver"s no despliegan UI, sin embargo ellos podrÃ­an utilizar el "NotificationManager" para avisar al usuario que algo interesante estÃ¡ pasando. Los "IntentReceiver"s son registrados en el archivo "AndroidManifest.xml", pero tambiÃ©n pueden ser registrados programÃ¡ticamente con el uso de "Context.registerReceiver()". LaÂ  aplicaciÃ³n no requiere estar corriendo para que sus "IntentReceiver"s puedan ser llamados. Si la aplicaciÃ³n no estuviera corriendo, el sistema la puede activar cuando uno de sus "IntentReceiver"s sea gatillado. Las aplicaciones tambiÃ©n pueden transmitir sus propios "Intent" a otras aplicaciones a travÃ©s de "Context.broadcastIntent()". â€¢ Service: Un "Service" es una aplicaciÃ³n que se mantiene activada por un largo tiempo y no despliega una UI. Un ejemplo es un programa que reproduce archivos mp3 desde una lista de mÃºsica, mientras el usuario realiza otras actividades. En este caso, el programa podrÃ­a iniciar un servicio con "Context.startService()" y de esa forma reproducir la mÃºsica sin necesidad de usar la pantalla. El sistema mantendrÃ¡ el servicio de reproducciÃ³n de mÃºsica corriendo hasta que finalice.Â  Es posible conectarse a un "Service" haciendo uso del mÃ©todo "Context.bindService()". Una vez que la aplicaciÃ³n estÃ¡ conectada al servicio, la comunicaciÃ³n entre la aplicaciÃ³n y el servicio se realiza a travÃ©s de la interfaz que el "servicio" expone. Para el ejemplo del reproductor mp3, estÃ¡ interfaz podrÃ­a permitir hacer pausa o saltar a una nueva canciÃ³n. â€¢ Content Provider: Las aplicaciones pueden almacenar sus datos en archivos, una base de datos "SQLite" o cualquier otro mecanismo. Sin embargo, un "Content Provider" es de utilidad cuando los datos de tu aplicaciÃ³n deben ser compartidos con otras aplicaciones. Un "Content Provider" es una clase que implementa un conjunto estÃ¡ndar de mÃ©todos para que otras aplicaciones almacenen o recuperen el tipo de datos que el "Content Provider" manipula. 4. ConclusiÃ³n Si bien no hay acuerdo entre los fabricantes acerca de la definiciÃ³n o nombre de los dispositivos mÃ³viles, es necesario diferenciar los smartphones con pantalla sensible al tacto (Touch screen) y los que no disponen de ella. Esta divisiÃ³n se hace necesaria debido a las diferencias que supone el manejo de un dispositivo mÃ³vil adaptado para usar una sola mano y generalmente 2 botones personalizables y un control de desplazamiento (puede ser una rueda un track ball o un botÃ³n de 5 direcciones) y el manejar un dispositivo construido para usar las dos manos y seleccionar las acciones desde cualquier Ã¡rea de pantalla ya sea con los dedos o un puntero especial tipo lÃ¡piz. Lo que sÃ­ es un hecho, es que un Smartphone, posee un sistema operativo identificable y kits de desarrollo disponibles ya sean estos comerciales o sin cargo. Con respecto a las Cuotas de Mercado, el mercado norteamericano de dispositivos mÃ³viles, tiene una distribuciÃ³n muy diferente al resto del mundo y con algunas particularidades a tener en cuenta: En el resto del mundo el lÃ­der indiscutido (con cuotas de mercado siempre superiores al 50%) es Symbian, mientras que en los EEUU este tiene una escasa participaciÃ³n. El principal sistema operativo en el mercado de EEUU es RIM, un sistema que estÃ¡ pensado para aplicaciones de negocios y que gano su cuota de mercado gracias a la tecnologÃ­a de pus e-mail, la cual ya estÃ¡ disponible en los dispositivos que corren Windows Mobile 6 y en el iPhone, sus principales competidores. El mercado de mÃ³viles de EEUU continuo en crecimiento durante el 2008 (casi 10 puntos) mientras que los mercados japoneses, europeos y chinos tuvieron retrocesos. Existe una gran expectativa en torno a Android, que respaldado por Google y con solo un equipo en el mercado (en versiÃ³n para desarrolladores) logro ventas equivalentes al 4% del mercado de EEUU en un trimestre. En la comunidad de Linux se espera que este sistema sirva para unificar el fragmentado mercado de mÃ³viles basados en Linux (con arquitecturas escasamente compatibles entre sÃ­) ya que es de uso libre. Al respecto recientemente Motorola (el mayor fabricante de mÃ³viles de EEUU) anuncio que abandonaba Symbian (consorcio dominado por Nokia desde el Q4 de 2008) y planeaba construir mÃ³viles basados en Android para el aÃ±o 2009. Recordemos que la cuota de mercado de esto mÃ³viles (basados en Linux) en los mercados asiÃ¡ticos es de aproximadamente 40%. El sistema operativo para dispositivos Palm denominado Access que solo tiene presencia de mercado en los EEUU fue reemplazado durante el presente aÃ±o por Windows Mobile segÃºn lo anunciara la empresa luego de sacar al mercado sus primeros mÃ³viles con este sistema operativo. Los costos de los entornos de desarrollo y de los SDK: Tanto iPhone como RIM y Symbian son gratuitos, no asÃ­ para Microsoft que requiere una licencia de Visual Studio 2005 para la instalaciÃ³n de su SDK. Todas las aplicaciones que requieran hacer uso de los recursos considerados â€œno bÃ¡sicosâ€ (acceso a recursos multimedia y de geo-localizaciÃ³n) deben ser firmadas con certificados cuyo costo oscila en u$s200 por aÃ±o. Una excepciÃ³n son las aplicaciones para iPhone que requieren de un certificado para poder ser instaladas en el telÃ©fono de pruebas y un segundo certificado para distribuirlas y que se puedan instalar en cualquier iPhone, estos certificados son otorgados por Apple y tiene un costo de u$s 99 cada uno. Finalmente, para el 2009, con respecto a los sistemas operativos, se espera el lanzamiento de Windows Mobile 7, que segÃºn lo anunciado por Microsoft harÃ¡ un uso mucho mÃ¡s intensivo de las pantallas tÃ¡ctiles y los sistemas de posicionamiento global (GPS) e incluirÃ¡ algunas caracterÃ­sticas del iPhone y Android como el renderizado directamente en pantalla. Google ya anunciÃ³ la salida al mercado global de su mÃ³vil en versiÃ³n final y sin restricciones de operadores para el primer semestre de 2009. SÃ­ntesis General: DispositivoÂ SDK Sistema OperativoÂ NavegadorÂ Costo en Argentina Â Blackberry Plugin para VS .Net C# Â  (gratis) Java (gratis) RIM Opera Mini Minuet Sin Touch: $1.100 Con Touch: $2.400 HTC Visual Studio .NET Â  (desde US 240) Android (gratis) Sin touch screen: Â  Win Mobile Smartphone Con touch screen: Â  Win Mobile ProfessionalÂ o Android Int. Explorer Opera Mini Android Sin Touch: $900 Con Touch: $1.700Â iPhone Cocoa Touch (gratis) Max OS XÂ Â Safari ConÂ Touch: $2.000Â Â Â 5. Referencias 1 Datos a noviembre de 2008. Principales Fuentes: Wikipedia. ( www.wikipedia.com ) Reuters ( http://www.reuters.com/article/technologyNews/idUSTRE4A58OK20081106 ). 2 Fuente: http://www.mikeash.com/?page=pyblog/the-iphone-development-story.html 3 Fuente: http://www.iphonegurues.com/la-plataforma-de-desarrollo-cocoa-touch/ 4 Fuentes: http://javiercancela.com/2007/10/19/introduccion-al-desarrollo-de-aplicaciones-para-telefonos-moviles-windows-mobile 5 Fuente: http://celutron.blogspot.com/2007/11/manos-la-obra-anatoma-de-una-aplicacin.html Â Descargar PDF                    Contact Us to learn more                     Why South America?    Simpler Outsourcing  Cutting edge talent and training  World-class quality assurance  Dependable team with low turnover            Case Studies  VoiceXML IDE Automated Testing Custom Commissions System Stress Testing Desktop Application Stress Testing of Web Application Automated Testing of Desktop Application Performance Metrics Mobile Development R&D (Spanish) Mobile Development R&D (English) Robust .NET Architecture Java Development for MLM Java SOA TelCo Solution Video Case Study "From Waterfall to Agile" Outsourcing Case Studies Whitepaper - Mobile Testing Best Practices Whitepaper - Cloud Testing Best Practices Whitepaper - Functional Testing Best Practices          Quick Contact Form               E-mail us at contactform@belatrixsf.com or give us some info to contact you:      Full Name       Phone Number       E-mail Address       Services Needed   Please select  Development  Quality Assurance  Development+QA  Others                              Powered By ChronoForms - ChronoEngine.com             Featured Clients   Verecloud - cutting edge cloud-based start-up.  Verecloud leverages Belatrixâ€™s Argentina outsourcing, software development and quality assurance services to further advance its innovative cloud brokering platform...  Read more    Top Insurance Software Vendor  When this leading insurance software vendor for the financial services industry needed to leverage nearshore outsourcing services from South America, it chose Belatrix for its experience in agile software development as well as its java and testing capabilities...  Read more    Fortune 500 Entertainment Company  We provide software quality assurance services to a Fortune 500 entertainment and multi-media company. During year 2009 this company chose Belatrix after reviewing dozens of vendors globally and the relationship is still going strong...  Read more                           Awards and Partnerships       Belatrix is assessed at CMMi Level 2 Maturity - Sep. 2010                Contact Us   US Phone & Address: 617-608-1413 Naples, Florida 34110  Argentina Phone & Address: +54(261)496-3355 Darragueira 7097 Chacras de Coria. Lujan de Cuyo. M5528BEU. Mendoza Argentina               Follow Us   Twitter  Facebook   YouTube  Open Positions                Receive Job Updates        Name:   Email Address:                                    Who we are - Mission and vision Our History Our People Our Values Our Strengths Awards and Partnerships Why Argentina? Our Quality Policies Featured Clients Related Links What we do - Outsourcing services Software Development Outsourcing Software Quality Outsourcing Remote IT Solutions Development Outsourcing for the Javaâ„¢ platform .NET Outsourcing and Software Development Mobile Solutions Development Outsourced Graphic Design Outsourced Language Localization How we do it - Agile methodology Methodology Technology Quality Success Stories Video Gallery Careers - Work with us Contact us - Learn more                 Copyright © 2012 Belatrix Software Factory. All rights reserved.         Home Sitemap Contact                           