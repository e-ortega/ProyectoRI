       Linux Hispano   Sign up with your email address to be the first to know about new products, VIP offers, blog features & more.                                     Linux Hispano   Noticias, tira, podcast, juegos, Linux y software libre              Linux Hispano   Noticias, tira, podcast, juegos, Linux y software libre            Inicio   Tira   Podcast   Tutoriales   Cursos   Curso C# con Mono   Curso Java   Aprende Octave con ejemplos   Curso ADO.NET con Mono y MySQL   Curso programación de videojuegos con SDL   Curso PHP orientado a objetos     Colabora                  Punteros inteligentes en C++11   By Manuel Ignacio López Quintero   Posted on julio 1, 2014  In Tutoriales   1   cpp11 , inteligentes   0        Como se ha dicho otras veces, las mejores de C++11 son evidentes. Tres ejemplos son la facilidad de convertir un entero a cadena en C++ , utilizar bucles for basados en rangos o usar expresiones regulares .  Aquí os muestro, mediante un ejemplo, la facilidad con la que en C++11 se manejan los punteros, olvidándote de tener que liberar memoria:        <span style="color: #BC7A00">#include &lt;memory&gt;</span>

<span style="color: #B00040">void</span> <span style="color: #0000FF">funcion</span>()
{
    <span style="color: #B00040">int</span> <span style="color: #666666">*</span> p1 <span style="color: #666666">=</span> <span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">int</span>; <span style="color: #408080; font-style: italic">// Método tradicional para asignar memoria</span>
    
    <span style="color: #408080; font-style: italic">/* Código donde se usa el puntero &#39;p1&#39; */</span>
    
    <span style="color: #008000; font-weight: bold">delete</span> p1; <span style="color: #408080; font-style: italic">// ¡Recuerda liberar la memoria!</span>

    std<span style="color: #666666">::</span>shared_ptr<span style="color: #666666">&lt;</span><span style="color: #B00040">int</span><span style="color: #666666">&gt;</span> p2(<span style="color: #008000; font-weight: bold">new</span> <span style="color: #B00040">int</span>); <span style="color: #408080; font-style: italic">// Nuevo método para asignar memoria</span>

    <span style="color: #408080; font-style: italic">/* Código donde se usa el puntero &#39;p2&#39; */</span>
    
    <span style="color: #408080; font-style: italic">// ¡Y olvídate de liberar memoria!</span>
}

<span style="color: #B00040">int</span> <span style="color: #0000FF">main</span>()
{
    funcion();
   
    <span style="color: #008000; font-weight: bold">return</span> <span style="color: #666666">0</span>;
}      1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23   < span style = "color: #BC7A00" > #include &lt;memory&gt;</span>  < span style = "color: #B00040" > void < / span >  < span style = "color: #0000FF" > funcion < / span > ( ) {  < span style = "color: #B00040" > int < / span >  < span style = "color: #666666" > * < / span >  p1  < span style = "color: #666666" >= < / span >  < span style = "color: #008000; font-weight: bold" > new < / span >  < span style = "color: #B00040" > int < / span > ;  < span style = "color: #408080; font-style: italic" > // Método tradicional para asignar memoria</span>   < span style = "color: #408080; font-style: italic" > /* Código donde se usa el puntero &#39;p1&#39; */ < / span >   < span style = "color: #008000; font-weight: bold" > delete < / span >  p1 ;  < span style = "color: #408080; font-style: italic" > // ¡Recuerda liberar la memoria!</span>   std < span style = "color: #666666" > :: < / span > shared_ptr < span style = "color: #666666" > & lt ; < / span > < span style = "color: #B00040" > int < / span > < span style = "color: #666666" > & gt ; < / span >  p2 ( < span style = "color: #008000; font-weight: bold" > new < / span >  < span style = "color: #B00040" > int < / span > ) ;  < span style = "color: #408080; font-style: italic" > // Nuevo método para asignar memoria</span>   < span style = "color: #408080; font-style: italic" > /* Código donde se usa el puntero &#39;p2&#39; */ < / span >   < span style = "color: #408080; font-style: italic" > // ¡Y olvídate de liberar memoria!</span> }  < span style = "color: #B00040" > int < / span >  < span style = "color: #0000FF" > main < / span > ( ) {  funcion ( ) ;   < span style = "color: #008000; font-weight: bold" > return < / span >  < span style = "color: #666666" > 0 < / span > ; }        El ejemplo se ha mostrado mediante el puntero inteligente shared_ptr que permite compartir el puntero, si estás seguro que el puntero es único usa unique_ptr .   Entradas relacionadas:  ¿Cómo cambiar la fecha y la hora desde la consola?  Curso C# con Mono – Tratamiento de excepciones  Incluir Google Analytics en WordPress  Pasar un CD de audio a OGG o a MP3 en Ubuntu Linux  Instalar Chromeless                           Manuel Ignacio López Quintero  Doctor en Ingeniería Informática especializado en Sistemas Inteligentes y Visión Artificial. Profesor y coadministrador de Linux Hispano. Para más información o para contactar con él visita su página oficial: Manuel Ignacio López Quintero    previously Aumentar memoria en WordPress para evitar Fatal error: Allowed memory size of N bytes exhausted    up next Aligerar el peso de phpMyAdmin       Publicidad     Hosting WordPress   ¿Quieres ahorrar un 20%? Haz clic y usa este cupón linuxhispano20  Con la colaboración de Wadobo   Contacta     Síguenos en    Suscríbete al blog por correo electrónico   Introduce tu correo electrónico para suscribirte a este blog y recibir notificaciones de nuevas entradas.  Únete a otros 6.954 suscriptores   Dirección de correo electrónico             Últimos comentarios Blogroll    AlexZelder  Asociación Linux Español  AndroCode  Asociación Linux Español  Casidiablo  Dasubipar  Dejo Windows  El blog de Marvin y familia  Espacio Linux  FoTux  Geeks & Linux Atelier!  humanOS  Juanlu Pérez  KDE Blog  Manuel Ignacio López Quintero  Linux CD  Linuxiso  Lopst  No solo Unix  Obux  OmeyasWeb  Píllateunlinux  Pingüinos y Cía  Rincón informático  Twago Blog  Ubunlog  Ubuntips  Ubuntizando el planeta  Usemos Linux            Linux Hispano   Noticias, tira, podcast, juegos, Linux y software libre            Copyrights © 2016 BUZZBLOG. All Rights Reserved.           Leer entrada anterior Aumentar memoria en WordPress para evitar Fatal error: Allowed memory size of N bytes exhausted Si manejáis WordPress a diario seguro que alguna vez habréis sufrido un error de falta de memoria RAM, que se... Cerrar