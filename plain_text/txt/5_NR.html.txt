Homepage Become a member Sign in Get started Homepage Eugenio Mendoza Blocked Unblock Follow Following Teacher, Web Developer, Writer and game lover. Sep 16, 2017 ¿Cómo saber si necesitas una Base de Datos NoSQL? Foto por Martin Reisch en Unsplash Si has pasado tiempo con Nodejs, estarás familiarizado con MongoDB; y si lo tuyo es React Native, Kotlin o hasta Angular y Vue, seguramente ya trabajas con Firebase, o lo tienes en la cabeza para tu próxima app. Estas son tecnologías excelentes, con un único inconveniente : lo que sucede cuando nuestra experiencia es en Bases de Datos Relacionales ( o “SQL”). Si eres como yo, y gateaste con tablas y queries y Primary Keys, es muy probable que esta manera de organizar los datos esté arraigada con tu concepto mental de qué es una base de datos. Una vez que les agarramos el truco, el evitar la redundancia, normalizar y demás tareas relacionales, nos salen tan intuitivamente que nos espantamos al ver nuestros diagramas de cuando éramos principiantes. Pero cuando se trata de Bases de Datos No Relacionales ( o “NoSQL”), efectivamente somos principiantes de nuevo . Nada de lo que aprendimos sobre el modelo relacional es válido. Si venimos de un trasfondo “100% relacional”, nuestro primer instinto es tratar de adaptar lo que sabemos a este nuevo modelo, pero así no solo nos perdemos de sus mejores virtudes, sino que podemos perjudicar el producto en el que trabajamos al elegir un modelo de datos incorrecto. ¿Quieres saber cuándo hace falta NoSQL y cuando es mejor quedarse con una clásica relacional ? En el resto de este post veremos qué diferencias hay entre ambos modelos, y ejemplos prácticos de cuando elegir uno sobre otro. (Usaremos “SQL” para referirnos a las bases de datos relacionales, “NoSQL” para las no relacionales, “BD” para Base de Datos, y “entidades” para hablar de tablas, colecciones, diccionarios y demás estructuras que estas bases de datos usan). 1. Integridad de datos La integridad de datos es la garantía de que los datos almacenados mantendrán su exactitud y consistencia a través del tiempo. Tu código siempre deberá servir mientras tú mismo no modifiques su estructura. SQL: Las tablas tienen estructuras rígidas, donde cada dato tiene un tipo definido, no podemos almacenar datos de otro tipo diferente, y no se vale más de un dato en un mismo campo. Puesto que todos los registros cumplen las mismas reglas, si tu código funciona con un solo registro, servirá con todos los demás . NoSQL: Hay varios tipos de base de datos NoSQL, pero en general, ninguna te exige que definas el tipo de datos que vas a almacenar. Un día un campo puede ser un número y al otro día un String o Array o hasta un JSON. Más que saber qué es la data, NoSQL pone mayor prioridad en cómo acceder dicha data . ¿Qué significa esto? Que si necesitas que tus datos se mantengan exactos y consistentes a través del tiempo, una base de datos SQL te lo garantiza . Esto es lo ideal en muchos sistemas intolerantes a las fallas, donde mientras menos aberturas dejes, mejor (por ejemplo la mayoría, quizá totalidad, del software bancario y empresarial). Aquí SQL te cuida las espaldas. Pero también, que si tus estructuras de datos son propensas a cambiar, el SQL te puede perjudicar al imponer una estructura rígida (por ejemplo, si estas en las fases de prototipo o lanzamiento temprano de una app, donde los datos que guardas son más maleables). Mientras que añadir llaves nuevas a un documento NoSQL suele ser muy fácil , modificar tablas SQL puede traer muchos inconvenientes si ya el sistema funciona con cierta estructura, y más aún si hablamos de introducir cosas como llaves primarias. Conste, esto último no es necesariamente malo, pues te obliga a pensar dos veces antes de cambiar las estructuras de datos, ahorrando bugs y modificaciones innecesarias en toda la app. Foto por Negative Space en Unsplash 2. Operaciones atómicas Una operación atómica es cuando haces un cambio que afecta a múltiples entidades de la base de datos al mismo tiempo . Esto suele acompañarse con el concepto de “transacciones”: decirle a la BD que, o cambian todas las tablas que queremos al mismo tiempo, o no cambia nada y la base de datos queda intacta (el famoso “rollback”, todo o nada). SQL: Las bases de datos relacionales tienen atomicidad gracias a que sus tablas están conectadas y pueden “ponerse de acuerdo” para no aceptar cambios nuevos hasta que termine una transacción. Si tu sistema posee operaciones donde necesitas cambiar datos de varias entidades al mismo tiempo, ya es una alerta roja para usar SQL, pues estás reconociendo que hay relaciones entre los datos, y que éstas son importantes. Si además hablamos de operaciones delicadas (como procesar una factura, donde se suelen actualizar más cosas, por ejemplo el stock de un producto), es casi seguro que la atomicidad te salvará el pellejo de situaciones como que dos personas traten de pagar por el último de un producto al mismo tiempo. NoSQL: Datos no relacionales = no hay relaciones sobre las que hacer una transacción atómica. Simplemente, cuando quieres hacer cambios en 5 entidades diferentes, de frente o detrás de cámaras habrá 5 llamadas diferentes a la base de datos una detrás de otra. Como te podrás imaginar, es posible que entre tantos viajes de la data, algún otro cliente haga una solicitud a la base de datos que modifique lo mismo que tú y se produzca una “race condition”: 2 clientes queriendo tener una versión diferente del mismo dato, y esto termina muy mal cuando hablamos de compras, reservaciones y cosas así. ¿Qué significa esto? NoSQL no cuenta con atomicidad, y ésta es vital para ciertos sistemas . ¿La desventaja? La atomicidad no es barata para la máquina , consume capacidad de procesamiento y afecta el rendimiento de la base de datos, pues ésta hace el trabajo sucio para garantizar que nadie más se entrometa en una transacción. ¿Cuándo elegir NoSQL? La atomicidad no siempre es crucial. Comparado con una inconsistencia en un estado de cuenta bancaria, ¿qué tan crítico es si dos usuarios difieren en la cantidad de likes de un post? A veces la velocidad de respuesta es más importante que la consistencia de datos (muchas app móviles caen en esto), y aquí brilla NoSQL. 3. Escalabilidad O, ¿qué tanto podemos crecer con la base de datos? Este suele ser un punto controversial cuando hablamos de cantidad de registros que podemos almacenar antes que la BD empiece a dar problemas. ¿La realidad? Depende totalmente de la base de datos específica que usemos . Para empezar, cuando pensamos en escalabilidad es muy probable que realmente pensemos en escalabilidad vertical : aumentar el poder de una máquina para que pueda aguantar una mayor cantidad de datos. Soluciones SQL como MySQL, Microsoft SQL Server y Postgre han probado su poder de escalar verticalmente a través de los años, pero NoSQL también tiene sus jugadores como Hadoop o Riak que, en sus respectivos campos (Big Data y soluciones distribuidas) aguantan datos como una montaña aguantando gotas de lluvia. ¿Entonces, donde hay mayor diferencia? En la escalabilidad horizontal , es decir, en cuántas máquinas diferentes podemos dividir la BD para repartir la carga. SQL: La verdad es que la mayoría de soluciones SQL tienen buen soporte para escalar verticalmente. Pero cuando tratas de que la información en tu base de datos se mantenga consistente para todos los usuarios, los problemas llegan al hablar de miles y millones de registros. Aun con una máquina muy potente, puedes verte obligado a dividir tu base de datos entre diferentes procesadores y hasta servidores. Ahora, las bases de datos distribuidas SQL no son un concepto nuevo y compañías como Microsoft llevan años trabajando en ello, pero no es algo barato (para el bolsillo ni para el procesamiento). Siempre hay cierto riesgo de presentar inconsistencias , pues la BD ahora debe revisar que todo este en orden a través de diferentes máquinas. NoSQL: Cuando no tienes la consistencia de datos como prioridad, distribuir y replicar tu base de datos en múltiples máquinas es trivial , y por eso se considera que el NoSQL es excelente para bases de datos necesitan escalar horizontalmente (por ejemplo, en Big Data, donde una sola máquina se queda corta sumamente rápido). ¿Qué significa esto? Las bases de datos relacionales ya vienen equipadas para crecer verticalmente, lo cual es más que suficiente para empresas pequeñas a grandes, proyectos personales, blogs y demás… hasta cierto punto, y mientras tengas una buena máquina con la capacidad requerida . NoSQL, por el contrario, la tiene más fácil residiendo en muchas máquinas menos potentes . Al empezar un nuevo proyecto, decidirte por distribuir la BD no es algo que se tome a la ligera, pues es uno de esos problemas que se te pueden presentar ya con productos exitosos y en expansión. No te partas la cabeza si vas empezando: para cuando en serio tengas que considerar bases de datos distribuidas, serás más que capaz de decidir qué modelo es el apropiado para tu caso de uso específico. Foto por Joe Neric en Unsplash 4. Velocidad Esto es que tan rápidas son las lecturas y escrituras a la BD. Una necesidad básica, pero tan importante que puede definir por sí sola con qué modelo nos quedamos — solo piensa, que se resalta en las publicidades de servicios en la nube como la Realtime Database de Firebase? “ Sincroniza datos en milisegundos. ” SQL: Las garantías que te dan las relaciones conllevan un precio. Esto es más evidente cuando empezamos a hacer consultas con “joins” (que involucran múltiples entidades) y de repente una búsqueda puede tardar minutos y hasta horas debido a la gran cantidad de datos que está revisando. Es un problema que se suele aliviar con buen diseño de la BD, pero está ahí y te morderá tarde o temprano. NoSQL: Mientras que un buen diseño en SQL sirve para amortiguar un golpe, en NoSQL determinará que tanto jugo le saques a la velocidad con que viene. Asumiendo que buscas tus datos de una sola entidad, las bases de datos no relacionales suelen contar con mecanismos de búsqueda sumamente rápida para conseguir un dato específico entre millones. ¿Qué significa esto? Que si sabes cómo diseñar tu base de datos, es casi seguro que una NoSQL bien diseñada gane por mucho en velocidad a una SQL, haciéndolas sumamente atractivas para aplicaciones modernas donde los usuarios viven de su plan de datos, y donde si tu app no carga en un par de segundos ya piensan en desinstalar / volver a Google. Siempre puedes optimizar ambos modelos hasta obtener un rendimiento aceptable, pero en NoSQL puedes diseñar tu base de datos en función a las consultas que harás , dándole una ventaja descomunal. Es aquí cuando entra en juego un factor que suele ser una barrera cuando vienes de SQL. Y es… 5. Consistencia vs Redundancia Probablemente la diferencia más marcada entre ambos modelos, y donde más fácil nos es dejarnos llevar por nuestros conocimientos de SQL. SQL : La consistencia de datos es asegurarse de que un único dato este una única vez en toda la base de datos ; y se suele lograr con el proceso de “Normalización” (reducir la cantidad de datos “repetidos” en la BD). Esto garantiza que por ejemplo, si buscas el nombre de alguien, el nombre que verás es exactamente el mismo que podrían ver tu vecino o alguien en Pekín, si están conectados a la misma base de datos. Igual de importante, significa que mientras vayas navegando en tu app, si 10 pantallas diferentes cargan un dato, las 10 veces será el mismo dato. NoSQL: La redundancia es repetir adrede los datos a conveniencia en varias partes de la BD (datos “de-normalizados”). Por ejemplo, si almacenamos datos de una reservación hotelera, guardamos todos los datos de una persona en la entidad “Persona”. Pero además, guardamos una copia del nombre, teléfono y demás información personal en cada “Reservación” y posiblemente en cada “Factura” de esta persona. Si cambian los datos de una persona en “Persona”, no necesariamente se reflejará este cambio en las otras entidades (ya esto queda a mano y decisión tuya); pero también hace que al buscar facturas o reservaciones, no tenemos que dar vueltas extra para obtener los datos de la persona. ¿Qué significa esto? Algunas aplicaciones necesitan consistencia de datos, pero otras prefieren el incremento en velocidad . Recuerda que el espacio de almacenamiento es barato y solo se abarata más cada año, pero el procesamiento y los datos móviles aún son oro para los usuarios finales. También, al diseñar bases de datos NoSQL, debes tener siempre en mente que la redundancia está de tu lado . Muchas veces nos quejamos al utilizar servicios como la Realtime Database de Firebase pues restringen nuestra capacidad para consultar diferentes colecciones (entidades) al mismo tiempo. En realidad, están diseñados así para optimizar las consultas rápida, y el problema más común es que no aprovechamos al máximo la redundancia para poner la información que necesitamos en un único lugar. ¿Haces una app como YouTube y necesitas mostrar junto con cada video el nombre del usuario que lo subió? Guárdalo en un campo de “Autor” junto a la “id” del dato completo. ¿Quieres que se vea el último mensaje enviado en el “preview” de una sala de chat? Guárdalo como un campo entre la información de la sala de chat y actualiza éste cada vez que se envíe un mensaje nuevo (si sentiste una comezón al leer eso, es muy probable que sea tu “modelista relacional” sufriendo por dentro). Usar la redundancia de datos a tu favor es quizá lo más contra intuitivo para quienes venimos de un trasfondo relacional , pero piensa: que tan seguido suele cambiar una persona datos como su nombre de usuario o teléfono? “Más de una vez”, es posible, pero compara eso con cuantas veces al día esperas que esta información sea consultada por tu aplicación. De nuevo, hay aplicaciones donde simplemente no te puedes dar el lujo de perder la consistencia de datos (hola de nuevo, dinero). Pero si no es tu caso y prefieres el aumento de velocidad (muchas app móviles son buenas candidatas), piensa en cuáles datos necesitas mostrarle al usuario más frecuentemente y planea tus estructuras de datos y redundancias acordemente . Foto por Auskteez Tran en Unsplash 6. Comodidad para el desarrollador Este será el último punto que tocaremos hoy, pero también puede definir el “sí o no” al momento de decidir. Con comodidad podemos referirnos a muchas cosas, así que iré directo al grano: SQL: La comunidad SQL lleva décadas madurando , y esto se traduce no solo en mejores herramientas administrativas, sino en estándares mejores definidos, mayor documentación, y hasta comunidades más grandes de desarrolladores listos para ayudarte con tus problemas o unirse a tu equipo de trabajo. NoSQL: Lo pondré así, buena suerte consiguiendo herramientas administrativas como phpMyAdmin y de manera gratuita. Aquí el punto fuerte es la conveniencia: factores como que los datos no necesiten tipos o que puedas aprovechar la redundancia, hacen más flexible el desarrollar con NoSQL. Si estás prototipando, los cambios son más rápidos y tienen menos consecuencias . Si sabes qué quieres mostrar a tus usuarios, es fácil diseñar bases de datos especializadas en servir exacta y rápidamente la información que quieres. ¿Qué significa esto? Que las base de datos NoSQL te suelen dar más libertad para experimentar y equivocarte , haciendo cambios a diestra y siniestra… pero éstas son necesidades que no tendrás siempre. Cuando tienes un sistema mejor definido , te hará falta contar con buenas herramientas administrativas o saber que hay más gente ahí afuera lista para apoyarte o unirse a tu equipo rápidamente, y en esto SQL brilla . En resumen, se puede decir que NoSQL te da más facilidades como desarrollador y ventajas a corto plazo, mientras que los beneficios de SQL los sueles ver cuando va pasando el tiempo y te toca mantener el sistema. Palabras finales Como podrás ver, SQL en general es más rígido y por ello puede darte garantías sobre tus datos, mientras que NoSQL te da más libertades y comodidades sacrificando estas mismas garantías. Si tú: Necesitas que tus datos se mantengan consistentes y tus transacciones atómicas, disminuyendo los errores al máximo. Tienes datos relacionado s, y buscarás muchos datos en base a estas relaciones. Necesitas poder introducir gente al equipo de trabajo rápidamente. Prefieres algo ya probado y con abundantes herramientas y comunidades detrás. Estás pensando en una Base de Datos Relaciona l. Mientras que sí: La velocidad de lectura y escritura es más importante que mantener la consistencia. No sabes cómo se verá la estructura de tus datos al final, y probablemente cambie mucho . Te es más fácil adquirir varias máquinas modestas a traves del tiempo que invertir en una sola muy potente. Prefieres algo fácil de usar como programador , que no te exige compromisos y te deje almacenar casi cualquier cosa donde quieras. NoSQL puede ser tu solución. Cada modelo es una herramienta, y como toda herramienta, son buenos para ciertas cosas y para otras no tanto. Un último factor que debes tomar en cuenta es que ambos modelos pueden coexistir en un mismo sistema : te sorprendería cuántas aplicaciones dejan sus datos más consultados en un almacenamiento NoSQL (para que las consultas sean rápidas), pero al momento de operaciones críticas como procesar pagos, llaman a una BD relacional para asegurarse de que nadie salga herido. Esto lo podemos ver desde usar Redis como “caché” para tu app, hasta lo que podemos hacer combinando servicios en la nube como Firebase con un backend usando MySQL. Este es mi primer post en Medium; y se lo dedico a mis alumnos en la materia de “Base de Datos” del diplomado de Webmaster en la Universidad Rafael Belloso Chacín. Espero haya resuelto sus dudas con respecto a las bases de datos NoSQL! Si hay suficiente interés de parte del público, en el futuro vendrán más posts sobre desarrollo web, bases de datos y demás. Próximamente podrán ver casos de uso y consejos prácticos para diseñar bases de datos NoSQL. Si te gustó este post y lo consideras útil, deja unos aplausos para ayudar a otras personas a conseguirlo también (¡y para saber si valió la pena!). Y tú, ¿para qué estas usando NoSQL actualmente? No dudes en dejar tus dudas y comentarios más abajo. ¡Hasta la próxima! Fuentes: NoSQL vs SQL: Principales diferencias y cuándo elegir cada una de ellas El post está disponible también en : Inglés Hoy en día empieza a haber una tendencia alcista por la utilización de… blog.pandorafms.org SQL vs NoSQL ¿Cuál debo usar? - Tech blog for developers | Facilcloud SQL es un sistema de gestión de bases de datos relacional, multihilo y multiusuario con más de seis millones de… www.facilcloud.com La integridad de datos (Data Integrity), una preocupación creciente Cada vez son más las observaciones, deficiencias, Warning Letters o alertas de importación reportadas durante las… www.fernandotazon.com.es NoSQL Database Sql Web Development Desarrollo Web 372 8 Blocked Unblock Follow Following Eugenio Mendoza Teacher, Web Developer, Writer and game lover. 372 Never miss a story from Eugenio Mendoza , when you sign up for Medium. Learn more Never miss a story from Eugenio Mendoza Blocked Unblock Follow Get updates