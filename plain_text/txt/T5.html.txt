       Tenemos servicio premiun:  24x7   Nuestro horario (CET)  Lunes - Jueves 08:30 - 18:00  Viernes 08:00 - 15:00   Direcci√≥n:  FECRON CONSULTING SERVICES S.L. Ronda de Poniente n¬∫ 8 28760 - Tres Cantos Madrid (Espa√±a)  ¬øNecesitas m√°s informaci√≥n?  info@fecron.com  administracion@fecron.com  Si quieres podemos hablar:  +34 91 806 25 20   Nuestra inspiraci√≥n:   "El verdadero progreso es el que pone la tecnolog√≠a al alcance de todos."  --Henry Ford--  "Cualquier tecnolog√≠a suficientemente avanzada es indistinguible de la magia."  --Arthur Clarke--  "La tecnolog√≠a es s√≥lo una herramienta. La gente usa las herramientas para mejorar sus vidas."  --Tom Clancy--              100% Professional. Quality every time +34 91 806 25 20 +34 91 804 45 80 (fax) info@fecron.com                  Fecron   Sobre nosotros  Calidad y Medio Ambiente  Trabaja con nosotros    Soluciones y Servicios   Gesti√≥n y consultor√≠a  Traducciones  Formaci√≥n  User Experience    Sectores  Clientes  Blog      Secondary Menu  SteveTool ‚Äì Shop   Shopping Cart  SteveTool ‚Äì Checkout  SteveTool ‚Äì My Account                  Contactar                 0   Frameworks Front-End 2017 para grandes empresas    Publicado por  David Tim√≥n Morillo-Velarde   a las  mayo 5, 2017     Categor√≠as   Desarrollo  Front-End    Etiquetas    angular framework front-end ionic                  Primera Parte. Ecosistema y Tendencias    Estos √∫ltimos a√±os est√°n siendo muy interesantes por todas las novedades tecnol√≥gicas que est√°n apareciendo a disposici√≥n de los programadores, ya sea en la capa Front- End , en la capa Back-End , Sistemas o en DevOps .  Esquema conceptual Front-End y Back-End  Centr√°ndonos en la capa Front-End, recientemente ha habido gran entusiasmo por los nuevos frameworks que se han ido consolidando o bien que se han ofrecido a la comunidad de programadores en versi√≥n estable.  Me animo a escribir este art√≠culo de opini√≥n (para gustos los colores, y actualmente existe gran variedad a nivel frameworks ) ya que muchos clientes nos pregunt√°is muy interesados acerca de estos temas: hoy esta es mi postura, ma√±ana, viendo la r√°pida evoluci√≥n de la tecnolog√≠a podr√≠a ser otra ( Web Assembly  is coming!!) .  Si tras leer este art√≠culo segu√≠s con dudas o no est√°is seguros de las alternativas que ten√©is (bien porque ten√©is incorporada ya una determinada tecnolog√≠a o por cualquier otro motivo), no dud√©is en contactar con nosotros y os ayudaremos a encontrar la mejor soluci√≥n para vuestras necesidades.    En busca del Rayo Verde   El Rayo Verde es un fen√≥meno √≥ptico atmosf√©rico que ocurre poco despu√©s de la puesta del sol o poco antes de su salida, en el que se puede ver un punto verde, normalmente durante uno o dos segundos, sobre la posici√≥n del sol.   En la novela de Julio Verne ‚ÄúEl Rayo Verde‚Äù cuenta la leyenda que dos personas que vean este fen√≥meno a la vez quedar√°n autom√°ticamente enamoradas la una de la otra: es un momento m√°gico en el que dos descubren el amor a la vez. Yo descubr√≠ esta curiosidad viendo la pel√≠cula hom√≥nima de Eric Rhomer y me encanta esta leyenda ya que se podr√≠a interpretar como que para que surja el amor es necesario que confluyan tanto el instante en el que mires, como la persona con quien lo mires: quiz√°s un art√≠culo pudiera considerarse como un Rayo Verde en el que un cliente, al leerlo en un determinado instante y con un determinado proveedor, pudiera enamorarse de un determinado framework‚Ä¶<3  La presentaci√≥n de ES2015 / ES6 (y ES7) y la normalizaci√≥n del uso de transpiladores ( Babel , Typescript o el fallido Dart ) han contribuido a la eclosi√≥n de algunos frameworks, ya que nos permite normalizar nuestros proyectos y/o prepararlos para las nuevas funcionalidades que ofrecer√° Javascript en sus versiones m√°s modernas.       ( ¬øfallido Dart? ver anuncio de google sobre Fuchsia OS )     Vamos a suponer que, en un contexto empresarial , necesitamos estandarizar de alg√∫n modo nuestros desarrollos, por lo que es imprescindible que hagamos uso de frameworks (espero que como lector te parezca bien esta premisa); sin embargo, muchos nos preguntamos cuando iniciamos un proyecto:     ¬øCu√°l es el mejor framework a utilizar en Front-End?  ¬øCu√°l es la madre de todos los frameworks?  ¬øQu√© framework me garantiza una larga vida?  ¬øQu√© framework me permitir√° lanzar nuevos servicios en tiempo record, garantizando un determinado rendimiento?  ¬øQui√©n y c√≥mo me podr√° desarrollar mejor la aplicaci√≥n, adapt√°ndose a lo que busco?     A excepci√≥n de la √∫ltima pregunta cuya respuesta es Fecron Consulting Services (:-)), la respuesta al resto de cuestiones parece incierta. Lo que es seguro es que no hay un framework perfecto del mismo modo que no hay un veh√≠culo perfecto que nos lleve a nuestro destino: todo depender√° de nuestra necesidad. En mi pueblo hubo un chico que se compr√≥ un deportivo para ir al campo a trabajar y la cosa no funcion√≥ mucho tiempo‚Ä¶ los extreme√±os somos as√≠‚Ä¶ del mismo modo, tambi√©n puede haber un framework mejor que el resto para cubrir una necesidad concreta : tambi√©n hay extreme√±os que pensamos que hay herramientas espec√≠ficas, para necesidades espec√≠ficas‚Ä¶ üôÇ  Entonces, intentemos dar respuesta a la pregunta que realmente nos inquieta:     ¬øQu√© framework de Front-End nos conviene m√°s utilizar?          Hay opiniones para todos los gustos: podemos encontrar tanto fuertes cr√≠ticas como grandes alabanzas sobre seg√∫n qu√© decisiones acerca de qu√© framework es mejor para uno u otro caso. En ocasiones surge gran pol√©mica interna a nivel de corporaci√≥n en relaci√≥n a indecisiones o decisiones precipitadas; no obstante, todas esas decisiones suelen estar marcadas por las necesidades de las empresas de sacar al mercado sus nuevos productos y servicios de la forma m√°s √°gil posible y en los plazos que marcan los equipos de direcci√≥n. Este aspecto es uno de los que deber√≠a regir principalmente en nuestra elecci√≥n, ya sea planteada esta premisa a corto, medio √≥ largo plazo; sin embargo, tambi√©n habr√≠a que tener en cuenta otros aspectos, como luego expondremos.  Tomemos como ejemplo Polymer . Este framework se vendi√≥ como una biblioteca de webcomponents que nos facilitar√≠a lanzar nuevas aplicaciones sin m√°s que incorporar dichos componentes a nuestra web, permiti√©ndonos m√°xima reutilizaci√≥n y ayudando a respetar nuestros Look & Fee l.  Desde la versi√≥n 0.5, la fugaz 0.8, la primera versi√≥n estable de Polymer 1.0, hasta la versi√≥n 2.0 actual, se han ido incorporando y eliminado mejoras y conceptos nuevos incluidos en los RFCs ( custom elements , shadow-dom / shady-dom , imports, templates) que han convertido al framework en una novedad importante hasta el punto de que grandes empresas han normalizado incluso su uso de forma interna. Por un lado, la decisi√≥n de adoptar Polymer en fases tempranas del proyecto podr√≠a retrasar la salida de nuestras aplicaciones e incluso que se nos planteen dificultades a la hora de encontrar desarrolladores. Por otra parte, dominar una tecnolog√≠a desde su inicios ofrece una ventaja competitiva basada en la experiencia y desarrollo a largo plazo.     ¬øSer√° una buena decisi√≥n para nuestra compa√±√≠a el incorporar Polymer?  ¬øSer√° precipitada su elecci√≥n como framework?     El tiempo y sobre todo, el uso que nosotros mismos hagamos de esa tecnolog√≠a nos lo dir√°. De momento observamos un vac√≠o a la hora de encontrar variedad de proyectos basados en Polymer , aunque s√≠ hemos visto que su integraci√≥n con Angular (nuevo framework basado en muchas ideas del ultra-conocido AngularJS 1.X ) es sencilla, a lo cual ayuda el que Google sea el promotor de ambos proyectos. Quiz√°s otro framework como Angular ayude a dar valor a Polymer y salve la inversi√≥n de la elecci√≥n de Polymer como referencia de framework empresarial (si es que lo podemos considerar como un aut√©ntico framework ).  Angular , al igual que Polymer , ha sufrido bastantes variaciones desde su publicaci√≥n inicial en estado beta en diciembre de 2015 hasta su versi√≥n 4.1.0 actual (lanzada finales de abril de 2017); de hecho, ambas versiones (2 y 4) no son compatibles del todo y ha pasado casi a√±o y medio desde lo que parec√≠a su inminente liberaci√≥n (considerando su anuncio y fase alpha: casi dos a√±os).     ¬øHubiera sido una buena elecci√≥n abrazar Angular en diciembre de 2015?     Si los tiempos de negocio hubiesen establecido el lanzamiento de las aplicaciones a producci√≥n en mayo o junio de 2017 la elecci√≥n hubiera sido correcta, si los tiempos de la empresa hubiesen sido otros, esta decisi√≥n habr√≠a sido un fracaso rotundo debido al retraso y el coste de oportunidad. Sin embargo, una vez salvada la incertidumbre inicial, la empresa ahora dominar√≠a la tecnolog√≠a y le ser√≠a m√°s f√°cil iniciar proyectos basados en dicha tecnolog√≠a. Quiz√°s si hubieras mirado a Angular en diciembre de 2015 buscando el Rayo Verde, quiz√°s habr√≠as encontrado un tormenta de incertidumbres.  Otras pol√©micas surgieron tambi√©n con el framework Angular ya que ha habido bastantes cr√≠ticas hacia Google al tratarse de algo totalmente nuevo e incorporar dicho nombre para denominar al nuevo framework.  Angular est√° escrito desde cero (inicialmente denominado Angular 2, actualmente en su versi√≥n 4 y denominado simplemente Angular) y se ha adoptado un nuevo lenguaje transpilador como Typescript (inicialmente AtScript y Dart ) para su programaci√≥n; no obstante, la estrategia final de Google, adem√°s de innovadora, parece acertada: est√° evolucionando AngularJS 1.X hacia Angular en lo que parece un intento de convergencia en un s√≥lo framework para facilitar la migraci√≥n, de este modo si tenemos una aplicaci√≥n escrita en AngularJS, podemos ir actualizando las nuevas innovaciones para finalmente dar el salto a Angular. Sin duda son de agradecer tambi√©n los esfuerzos de Google en permitir que haya aplicaciones escritas parcialmente en Angular y AngularJS 1.X . El problema de llevar a cabo esta estrategia es que actualmente, por restricciones de compatibilidad de ejecuci√≥n, siempre ser√° una aplicaci√≥n AngularJS 1.X , lo cual excluye las verdaderas innovaciones de Angular.  Continuando con la incorporaci√≥n de frameworks por el mercado, ha sido sorprendente lo r√°pido que la aparici√≥n o evoluci√≥n de nuevos frameworks ( React , Angular , Vue ) ha llevado a otros que eran muy populares ( Ember , Backbone ) a un ostracismo preocupante para las empresas , hasta el punto de que algunos desarrolladores huyen de esos proyectos por encontrarse con c√≥digo mal estructurado, abuso de malas pr√°cticas (las cuales aunque no son deseables, es pr√°cticamente inevitable que existan en todos los proyectos, ya sea por la impaciencia del cliente o debido a la rotaci√≥n de personal) o por un escaso recorrido profesional.  Podemos corroborar lo comentado en el p√°rrafo anterior con la informaci√≥n sobre las b√∫squedas en Google y los intereses de los desarrolladores que buscan empleo:    Fuente: Datos oficiales de Google  Fuente: Datos oficiales de Indeed  No obstante, cada framework va encontrando poco a poco su hueco , el espacio ocupado anteriormente por AngularJS 1.X lo va ocupando React , el famoso framework de Facebook; pero React es s√≥lo una biblioteca, por lo que no est√° a la par con, digamos, Angular, AngularJS o Ember. Para hacer que React se acerque m√°s a la arquitectura MVC, Facebook introdujo un enfoque para construir la arquitectura de aplicaciones y lo llam√≥ Flux ¬ø√©xito o fracaso? De momento apunta maneras y la guerra del desconsenso contin√∫a.  Fuente: Datos oficiales de Indeed    Si has llegado hasta aqu√≠: ¬°estupendo, el tema te interesa y est√°s en el lugar acertado!‚Ä¶ üôÇ  Como hemos visto hasta ahora hay muchos frameworks (s√≥lo hemos mencionado algunos), pero si est√°s de acuerdo conmigo en que cada framework puede tener su √°mbito de uso, ¬†aplicaci√≥n y contexto , sigue leyendo la segunda parte del art√≠culo donde intentaremos mostrar qu√© framework nos podr√≠an ayudar para construir las aplicaciones que nuestra empresa necesita.    Segunda Parte. La elecci√≥n m√°s empresarial    No debemos perder el foco a la hora de seleccionar un determinado framework a nivel empresarial y es que lo que buscamos es sacar nuestros productos y servicios lo m√°s r√°pido posible, con un nivel de rendimiento m√≠nimo requerido, con una determinada usabilidad y con cierta facilidad para el mantenimiento y evolucionado . Si somos un banco y queremos modificar el flujo del ‚Äúenrollment‚Äù ser√≠a estupendo que se pudiera realizar en 24h sin despliegue: desde Fecron Consulting Services facilitamos a nuestros clientes el poder hacer √©sto a trav√©s de una interfaz gr√°fica de usuario, lo que les permite liderar el mercado desde el Departamento de Negocio (si est√°s interesado en una demo de la magia que hacemos, contacta con nuestro departamento comercial; si buscas rapidez y calidad somos tu equipo ).  Angular (desmarc√°ndose en muchos aspectos de AngularJS 1.X) parece que est√° centrando sus esfuerzos en construir un framework orientado a grandes corporaciones debido a su adopci√≥n de Typescript y a la transpilaci√≥n desde un lenguaje pseudo-tipado. Aunque actualmente cualquier framework puede (y debe * / ** ) ser programado en Typescript , esta decisi√≥n ha sido fundamental para enmarcarlo dentro de los frameworks ideales para proyectos a largo plazo que pueden recibir una alta rotaci√≥n de personal ya que, esas malas pr√°cticas antes mencionadas, quedan mucho m√°s acotadas en la estructuraci√≥n del c√≥digo tipado. Adem√°s, la adopci√≥n de Java por parte de muchas empresas y la similitud en muchos aspectos con Typescript, permite a los desarrolladores una curva de aprendizaje suave ¬†desde el perfil Back-End hacia el Front-End (y viceversa) formando, en algunos casos, equipos Scrum con perfiles Fullstack sin tener que conocer en detalle exhaustivo todo un ecosistema.  M√°s informaci√≥n en debate: ¬øQu√© es Typescript y c√≥mo deber√≠a usarlo?  * Todos los desarrolladores (incluso los gur√∫s superdotados que nos iluminan con sus nuevas ideas) en alg√∫n momento de nuestra carrera profesional hemos generado c√≥digo que dista del Clean Code : esto sucede principalmente en las primeras fases de nuestro aprendizaje, pero tambi√©n cuando estamos inici√°ndonos en una determinada tecnolog√≠a e incluso cuando estamos aprendiendo la estructura de un proyecto al que nos incorporamos. Muchas veces los desarrolladores somos controladores: eres desarrollador y, como tal, no te gusta usar un transpilador como Typescript ya que introduce un nuevo punto de fallo dif√≠cilmente trazable. Pero quiz√°s como desarrolladores opinamos teniendo en cuenta nuestro trabajo y no las circunstancias. Y la realidad es que en proyectos empresariales trabajamos en equipo y somos prescindibles y sustituibles, por lo que prima el orden , la coherencia , la buena estructuraci√≥n del c√≥digo, mejorar la mantenibilidad , la facilidad de evoluci√≥n y muy importante, tambi√©n, que los nuevos miembros del equipo no tengan la sensaci√≥n de incorporarse a un campo de minas: Typescript nos ayuda a todo esto y mucho.  ** Otra ventaja de usar Typescript (que junto con Visual Studio Code son de las pocas cosas que me entusiasman de Microsoft) ¬†es que nos permite seleccionar sobre qu√© versi√≥n de Javascript ¬†(ES5, ES6, ES7, experimental y lo que venga) queremos transpilar nuestro c√≥digo, por lo que podemos aprovechar todas las ventajas que vayan incorporando los navegadores soportados en el proyecto sin tocar apenas nuestro c√≥digo, aspecto que a futuro nos evitar√° refactorizaciones y supondr√° un ahorro de costes importante.    La Ensalada Definitiva  Hace algunos a√±os cuando trabajaba para una gran multinacional espa√±ola de tecnolog√≠a, me ‚Äútocaba‚Äù viajar mucho para dar soluciones de comunicaciones a grandes bancos. En uno de mi viajes a Andorra me di el capricho (me pagaban muy bien las dietas de desplazamiento al extranjero) y cen√© en un restaurante una ensalada que me entusiasm√≥: tom√© nota de los ingredientes y posteriormente la he preparado en varias ocasiones, siempre con gran √©xito entre mis invitados. La llam√© ‚Äúla ensalada definitiva‚Äù (no la llam√© ‚Äúla mejor ensalada del mundo mundial‚Äù): ten√≠a los ingredientes justos y estaba especialmente buena (si ten√©is curiosidad sobre la receta pod√©is contactar tambi√©n‚Ä¶ eso s√≠, los ingredientes son gourmet ;-)) En mi opini√≥n parece que a Angular le va a ocurrir lo mismo que a mi ensalada favorita, creo que es el mejor posicionado para convertirse en el Framework Definitivo ya que tiene los ingredientes justos y es especialmente bueno.  Aunque con AngularJS 1.X ya era posible incorporar la funcionalidades de lazy load y cacheado en forma de c√≥digo Javascript (con las templates, por ejemplo) a trav√©s de ciertos servicios y herramientas ($templateCache, gulp, gulp-angular-template-cach√©, junto con gulp-inject, por ejemplo), ahora Angular lo facilita proporcionando ‚Äúde caja‚Äù una importante mejorar en la carga de las aplicaciones que puede impresionar a m√°s de uno.  As√≠, una aplicaci√≥n de Angular consiste en una gran cantidad de componentes y sus respectivas templates en HTML. Antes de que el navegador pueda renderizar la aplicaci√≥n, los componentes y las plantillas se deben convertir a c√≥digo Javascript ejecutable. Este proceso lo realiza el propio compilador de Angular en tiempo real , el cual se carga en el navegador ( Just-in-Time ) o previamente en el despliegue , para posteriormente ser ejecutado desde su core en el navegador ( Ahead-of-Time ), es decir, de forma laxa:     En el caso de la compilaci√≥n Just-in-Time de Angular, la template se recupera y se pasa por el compilador de Angular cargado en el navegador para generar c√≥digo Javascript, de modo que es ejecutado por el core de Angular, tambi√©n descargado y ejecutado en el navegador.  En el caso de la pre-compilaci√≥n Ahead-of-Time de Angular, se ofrece una herramienta en el angular-cli que permite pre-compilar la aplicaci√≥n al c√≥digo Javascript que necesita el core de Angular del navegador, por lo que de esta forma no es necesario pre-compilar a Javascript en el navegador. El c√≥digo precompilado ocupa menos que el original (en el modo JIT) y ya no es necesario cargar en la aplicaci√≥n el precompilador de Angular (que en bytes es aproximadamente el 50% de la biblioteca Angular) por lo que la aplicaci√≥n se carga m√°s r√°pido (archivos m√°s peque√±os) y se ejecuta m√°s r√°pido (se evita el compilado de los componentes en el navegador). Puedes ver un resumen m√°s extendido aqu√≠ sobre diferencias de rendimiento.     Pero ah√≠ no queda todo, Angular es m√°s que un framework de plataforma para el Front-End en el lado del cliente (bien pensado y con pocas improvisaciones) en sus versiones estables para producci√≥n; parece m√°s bien que es una idea que va m√°s all√°, intentando universalizar toda la arquitectura con Angular Universal .  Logo oficial de Angular Universal  El proyecto Angular Universal (se incorpor√≥ en www.angular.io, aqu√≠, la documentaci√≥n del proyecto recientemente) consiste en una API de base y en las herramientas ofrecidas que permiten al desarrollador realizar renderizaciones en el lado del servidor (o pre-renderizado) de aplicaciones escritas en Angular. Esto ser√≠a un gran paso en su intento de universalizar Angular como tecnolog√≠a, tratando de desmonopolizar las aplicaciones de servidor donde Java y .NET mandan en el mundo corporativo .        ¬øSer√° Angular, junto con Angular Universal, la alternativa de Spring framework?  ¬øSe convertir√° Angular, junto con todo el ecosistema que est√° surgiendo a su alrededor en el Framework Definitivo empresarial?     Hasta hace muy poco tiempo, no eran muchos los que se hac√≠an estas preguntas; si est√°s interesado en el tema una buena opci√≥n es este link de Michael Prentince.  Si observamos las pruebas de rendimiento que ofrece la p√°gina oficial de Angular, vemos unas diferencias significativas:  Pruebas de rendimiento de Angular en modalidad JIT, AOT y Angular Universal  Las tres soluciones de la gr√°fica anterior, marcan unos tiempos aceptables en un entorno normal de trabajo; sin embargo, cuando la capacidad de computaci√≥n del dispositivo es menor y la red est√° saturada o hay una mala conexi√≥n (forzando la simulaci√≥n a dispositivos 5 veces m√°s lentos y simulando una red m√°s lenta de 3G network:750kb/s) se obtienen los siguientes resultados:  Pruebas de rendimiento de Angular en modalidad JIT, AOT y Angular Universal en dispositivos y redes lentas  Vemos que los resultados asombran en aspectos de rendimiento en la versi√≥n con Angular Universal . La versi√≥n Angular Universal carga la p√°gina principal en 0,4s, ya que no tiene que esperar el c√≥digo Javascript para cargar. La aplicaci√≥n no estar√≠a completamente disponible funcionalmente hasta que el bundle de Javascript hubiera cargado, lo cual ser√≠a comparable en tiempo a la versi√≥n AOT (5,5 seg), pero el usuario podr√≠a ver la p√°gina principal inmediatamente; as√≠, si queremos que la aplicaci√≥n sea usable en redes lentas debemos elegir AOT y Angular Universal deber√≠a usarse si la primera impresi√≥n de p√°gina fuese importante.  Vaya rollo os estoy metiendo‚Ä¶ continuamos que hay algunos ingredientes verdes m√°s a tener en cuenta ‚Ä¶ üôÇ    Tercera Parte. Divide y Vencer√°s, Repite y Perder√°s    A√∫n no hemos hablado de un aspecto muy importante a la hora de seleccionar el framework y es la reutilizaci√≥n del c√≥digo. Cualquier desarrollador con algo de experiencia sabe que repetir c√≥digo es lo que mata a un proyecto , por lo que se debe cuidar mucho este aspecto tanto en lo escrito para Javascript (o Typescript ), templates y HTML, como en CSS.  Si repetimos tendremos que mantener y testear reiteradamente, algo que a ser posible deber√≠amos evitar hacer sobre nuestro c√≥digo. Pero al igual que para nuestro c√≥digo, idealmente tambi√©n deber√≠amos trasladar esta premisa a nuestra colecci√≥n de aplicaciones ( evitar repetir partes de c√≥digo o funcionalidad en otros lenguajes ) as√≠ como a nuestros componentes.  Ya que tienes una aplicaci√≥n web, ¬øpor qu√© no mostrarla con pantallas t√°ctiles en tus oficinas? Si hay cola quiz√°s obtengas nuevos clientes en el acto. Considerando el caso m√°s t√≠pico, ¬øpor qu√© no reutilizar el mismo c√≥digo para dispositivos m√≥viles? Y ya que estamos, ¬øpor qu√© no tambi√©n para televisores? Si es posible (que hoy en d√≠a lo es) esto lo haremos ejecutando el mismo c√≥digo sobre cada dispositivo: ¬°maravilloso!  ¬øY si pudi√©ramos generar aplicaciones para dispositivos m√≥viles que no necesitan descarga del market de turno? Estar√≠a bien, ¬øverdad? Pero estar√≠a ¬†mucho mejor si no tuvi√©ramos que reescribir la aplicaci√≥n. Esto es posible de lograr con las PWAs , cuyo acr√≥nimo se refiere a las Aplicaciones Web Progressivas o Progressive Web Apps en sus siglas en ingl√©s y seg√∫n Google :     Una PWA utiliza las √∫ltimas tecnolog√≠as disponibles en los navegadores para ofrecer una experiencia en m√≥viles lo m√°s parecida a la de una aplicaci√≥n nativa.     En la mayor√≠a de los casos, gracias a la generaci√≥n de aplicaciones h√≠bridas con tecnolog√≠as como Cordova (sin tilde: [kor‚Äô√∞oŒ≤a] ) o Phonegap es viable gestionar dichas aplicaciones y desplegarlas con c√≥digo Javascript/HTML/CSSs . As√≠, hay frameworks para aplicaciones h√≠bridas ( Ionic , Intel xdk , framework7 ) que utilizan internamente otros frameworks o paradigmas (Angular, VanillaJS, Vue) para establecer esa r eutilizaci√≥n de forma optimizada , por lo que es extremadamente interesante tenerlo en cuenta antes de la elecci√≥n.  Como aspirantes de transpiladores a c√≥digo nativo compilado y para re-aprovechar nuestro c√≥digo, tenemos a ReactNative que transpila y compila tu c√≥digo escrito en React a c√≥digo nativo para tus aplicaciones m√≥viles y tambi√©n ha surgido NativeScript , que permite reutilizar el c√≥digo en Angular con algunas modificaciones (tambi√©n Typescript o VanillaJS) para hacer lo propio. Aunque estas tecnolog√≠as est√°n en fases tempranas y en ocasiones suponen verdaderos quebraderos de cabeza para los equipos de desarrollado (adem√°s del encorsetamiento a la hora de utilizar determinados componentes), parecen tecnolog√≠as prometedoras , debido, sobre todo, a la mala fama que supusieron ciertas aplicaciones h√≠bridas en relaci√≥n a la fluidez.  Ahora bien, gracias a los web-workers , service-workers y a las mejoras que han introducido algunos frameworks a nivel de rendimiento, entre los que destaca (de nuevo) Angular , se ha permitido a frameworks para aplicaciones h√≠bridas, como Ionic  (actual versi√≥n 3 de Ionic est√° basada en la versi√≥n 4 de Angular), suplir esas carencias y desarrollar aplicaciones para m√≥viles (y escritorio desde la versi√≥n 2.2.0 de Ionic) que permiten ejecutar multihilo con desarrollados basados en Javascript (transpilado desde Typescript).  Todo esto puede parecer una opini√≥n sesgada, pero Ionic (Angular) nos ofrece:     Aplicaciones h√≠bridas con rendimiento perceptible similar a las aplicaciones nativas  Reutilizaci√≥n y flexibilidad de programaci√≥n con Javascript (TypeScript)/HMTL5/CSS3  Mantenibilidad de un lenguaje tipado (Typescript) como en las aplicaciones Nativas  Posibilidad de generar Progressive Web Aplications (PWA) (cosa que no permiten las aplicaciones nativas)     Por lo anterior, podr√≠amos concluir que la elecci√≥n de hacer uso de las tecnolog√≠as que generan aplicaciones h√≠bridas puede ser una muy buena decisi√≥n a nivel empresarial y corporativo , ya que sus ventajas superan la mala fama de las aplicaciones h√≠bridas en sus inicios y de nuevo, el Framework Definitivo de Google, Angular, aparece en escena.  Es quiz√°s tambi√©n importante recalcar que un equipo de expertos , al igual que un framework , es tambi√©n una herramienta para las organizaciones que necesitan desarrollos. Y esta herramienta es clave a la hora de valorar opciones y tomar las decisiones m√°s adecuadas a las necesidades de cada organizaci√≥n‚Ä¶ ¬øLo ves? Est√° justo aqu√≠‚Ä¶ es el Rayo Verde :     Muchas gracias Eduardo Redondo , Ver√≥nica S√°nchez y Juanjo Jos√© Ram√≠rez por vuestro feedback‚Ä¶ üôÇ  REFERENCIAS:    TRANSPILADORES   https://babeljs.io/  https://www.typescriptlang.org/  https://www.dartlang.org/     FRAMEWORKS   https://www.polymer-project.org/  http://aurelia.io/  https://marionettejs.com/  http://knockoutjs.com/  https://www.emberjs.com/  https://facebook.github.io/react/  https://vuejs.org/  https://angular.io/  https://angularjs.org/     OFICIAL:   https://angular.io/docs/ts/latest/guide/ngmodule.html#!#bootstrap  https://angular.io/docs/ts/latest/cookbook/aot-compiler.html  https://universal.angular.io/  https://developers.google.com/web/updates/2016/09/devtools-digest#cpu_throttling_for_a_mobile-first_world  https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#throttling     OTROS:   https://w3c.github.io/webcomponents/spec/custom/  https://w3c.github.io/webcomponents/spec/shadow/  https://www.polymer-project.org/blog/shadydom  https://www.campusmvp.es/recursos/post/Que-son-las-Aplicaciones-Web-Progresivas-o-Progressive-Web-Apps.aspx  https://www.w3schools.com/html/html5_webworkers.asp  https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API  http://blog.ionic.io/ionic-2-2-0-is-out/  http://webassembly.org/  https://www.campusmvp.es/recursos/post/JavaScript-ECMAScript-ES6-Existe-ES7-Aclarando-las-diferentes-versiones-del-lenguaje.aspx     WIKIPEDIA:   https://en.wikipedia.org/wiki/AtScript  https://en.wikipedia.org/wiki/Dart_(programming_language)     ESTAD√çSTICAS:   https://trends.google.com/trends/explore?q=backbone.js,vue.js,ember.js,knockout.js,react.js  https://www.indeed.com/jobtrends/q-Angular.JS-q-backbone.js-q-knockout.js-q-ember.js-q-ext.js-q-react.js-q-vue.js-q-Angular2.html  https://www.indeed.com/jobtrends/q-Angular.JS-q-backbone.js-q-knockout.js-q-ember.js-q-ext.js-q-react.js-q-vue.js-q-Angular2.html     DEBATES:   http://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript     APLICACIONES¬†M√ìVILES/H√çBRIDAS:   https://cordova.apache.org/  http://phonegap.com/  https://ionicframework.com/docs/  https://software.intel.com/es-es/intel-xdk  http://framework7.io/  https://facebook.github.io/react-native/  https://www.nativescript.org/                   Proyectos relacionados noviembre 29, 2017 Segundo nivel en la navegaci√≥n DXA Leer m√°s abril 5, 2016 SDL XPM y Smart Target: simulaci√≥n de footprints Leer m√°s enero 21, 2016 Nuevo tarificador de autos y motos MAPFRE Leer m√°s               Fecron hace f√°cil lo dif√≠cil. Contacta con nosotros.      FECRON te permite crear aplicaciones web con gestores de contenido, como SDL Tridion, de forma sencilla y automatizada.  Estamos especializados en el desarrollo personalizado con tecnolog√≠as modernas que nos permiten realizar ciclos de desarrollo m√°s r√°pidos .       Nuestros valores   Creemos en nuestra gente , en la direcci√≥n de la empresa y los productos que representamos .  Nos ayudamos mutuamente y trabajar juntos.  Principio KISS (Keep It Short and Simple): Hacemos las cosas sencillas y simples.  Servicio de calidad: Certificado  ISO 9001:2008  Compromiso con el medio ambiente.   Categorias   CMS   Customer   Desarrollo   Eventos   Fecron   Front-End   Magia   Metodolog√≠a   SCRUM   SDL   SmartTarget          ¬© 2018 Fecron Consulting Services Aviso Legal | Pol√≠tica de Cookies | Calidad y Medio Ambiente                      * Nombre:  * E-mail:  Asunto:  Mensaje:                    Acepto las condiciones de contacto. Pulsa aqu√≠ para revisar las condiciones de contacto.          Cookies Utilizamos cookies para que usted tenga una mejor experiencia de usuario. Si contin√∫a navegando est√° dando su consentimiento expl√≠cito para la aceptaci√≥n de las mencionadas cookies y la aceptaci√≥n de nuestra pol√≠tica de cookies , pinche aqu√≠ para mas informaci√≥n.  Aceptar Privacidad y Pol√≠tica de Cookies                       